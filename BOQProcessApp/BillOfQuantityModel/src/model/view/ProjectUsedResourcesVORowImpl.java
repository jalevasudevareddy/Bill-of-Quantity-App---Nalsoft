package model.view;

import java.math.BigDecimal;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jan 11 15:02:25 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProjectUsedResourcesVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ItemId {
            public Object get(ProjectUsedResourcesVORowImpl obj) {
                return obj.getItemId();
            }

            public void put(ProjectUsedResourcesVORowImpl obj, Object value) {
                obj.setItemId((BigDecimal)value);
            }
        },
        ActualUnitRate {
            public Object get(ProjectUsedResourcesVORowImpl obj) {
                return obj.getActualUnitRate();
            }

            public void put(ProjectUsedResourcesVORowImpl obj, Object value) {
                obj.setActualUnitRate((BigDecimal)value);
            }
        },
        ItemCode {
            public Object get(ProjectUsedResourcesVORowImpl obj) {
                return obj.getItemCode();
            }

            public void put(ProjectUsedResourcesVORowImpl obj, Object value) {
                obj.setItemCode((String)value);
            }
        },
        TransUnitRate {
            public Object get(ProjectUsedResourcesVORowImpl obj) {
                return obj.getTransUnitRate();
            }

            public void put(ProjectUsedResourcesVORowImpl obj, Object value) {
                obj.setTransUnitRate((BigDecimal)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(ProjectUsedResourcesVORowImpl object);

        public abstract void put(ProjectUsedResourcesVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ITEMID = AttributesEnum.ItemId.index();
    public static final int ACTUALUNITRATE =
        AttributesEnum.ActualUnitRate.index();
    public static final int ITEMCODE = AttributesEnum.ItemCode.index();
    public static final int TRANSUNITRATE =
        AttributesEnum.TransUnitRate.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ProjectUsedResourcesVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute ItemId.
     * @return the ItemId
     */
    public BigDecimal getItemId() {
        return (BigDecimal)getAttributeInternal(ITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemId.
     * @param value value to set the  ItemId
     */
    public void setItemId(BigDecimal value) {
        setAttributeInternal(ITEMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ActualUnitRate.
     * @return the ActualUnitRate
     */
    public BigDecimal getActualUnitRate() {
        return (BigDecimal)getAttributeInternal(ACTUALUNITRATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ActualUnitRate.
     * @param value value to set the  ActualUnitRate
     */
    public void setActualUnitRate(BigDecimal value) {
        setAttributeInternal(ACTUALUNITRATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItemCode.
     * @return the ItemCode
     */
    public String getItemCode() {
        return (String)getAttributeInternal(ITEMCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemCode.
     * @param value value to set the  ItemCode
     */
    public void setItemCode(String value) {
        setAttributeInternal(ITEMCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransUnitRate.
     * @return the TransUnitRate
     */
    public BigDecimal getTransUnitRate() {
        return (BigDecimal)getAttributeInternal(TRANSUNITRATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransUnitRate.
     * @param value value to set the  TransUnitRate
     */
    public void setTransUnitRate(BigDecimal value) {
        setAttributeInternal(TRANSUNITRATE, value);
    }


    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
