package model.view;

import java.math.BigDecimal;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Dec 30 11:48:16 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LookupVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Description {
            public Object get(LookupVORowImpl obj) {
                return obj.getDescription();
            }

            public void put(LookupVORowImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        },
        DisplaySequence {
            public Object get(LookupVORowImpl obj) {
                return obj.getDisplaySequence();
            }

            public void put(LookupVORowImpl obj, Object value) {
                obj.setDisplaySequence((BigDecimal)value);
            }
        },
        LookupCode {
            public Object get(LookupVORowImpl obj) {
                return obj.getLookupCode();
            }

            public void put(LookupVORowImpl obj, Object value) {
                obj.setLookupCode((String)value);
            }
        },
        LookupType {
            public Object get(LookupVORowImpl obj) {
                return obj.getLookupType();
            }

            public void put(LookupVORowImpl obj, Object value) {
                obj.setLookupType((String)value);
            }
        },
        Meaning {
            public Object get(LookupVORowImpl obj) {
                return obj.getMeaning();
            }

            public void put(LookupVORowImpl obj, Object value) {
                obj.setMeaning((String)value);
            }
        },
        RowID {
            public Object get(LookupVORowImpl obj) {
                return obj.getRowID();
            }

            public void put(LookupVORowImpl obj, Object value) {
                obj.setRowID((String)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(LookupVORowImpl object);

        public abstract void put(LookupVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int DISPLAYSEQUENCE =
        AttributesEnum.DisplaySequence.index();
    public static final int LOOKUPCODE = AttributesEnum.LookupCode.index();
    public static final int LOOKUPTYPE = AttributesEnum.LookupType.index();
    public static final int MEANING = AttributesEnum.Meaning.index();
    public static final int ROWID = AttributesEnum.RowID.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LookupVORowImpl() {
    }

    /**
     * Gets XxboqLookupsEO entity object.
     * @return the XxboqLookupsEO
     */
    public EntityImpl getXxboqLookupsEO() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for DESCRIPTION using the alias name Description.
     * @return the DESCRIPTION
     */
    public String getDescription() {
        return (String)getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for DESCRIPTION using the alias name Description.
     * @param value value to set the DESCRIPTION
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for DISPLAY_SEQUENCE using the alias name DisplaySequence.
     * @return the DISPLAY_SEQUENCE
     */
    public BigDecimal getDisplaySequence() {
        return (BigDecimal)getAttributeInternal(DISPLAYSEQUENCE);
    }

    /**
     * Sets <code>value</code> as attribute value for DISPLAY_SEQUENCE using the alias name DisplaySequence.
     * @param value value to set the DISPLAY_SEQUENCE
     */
    public void setDisplaySequence(BigDecimal value) {
        setAttributeInternal(DISPLAYSEQUENCE, value);
    }

    /**
     * Gets the attribute value for LOOKUP_CODE using the alias name LookupCode.
     * @return the LOOKUP_CODE
     */
    public String getLookupCode() {
        return (String)getAttributeInternal(LOOKUPCODE);
    }

    /**
     * Sets <code>value</code> as attribute value for LOOKUP_CODE using the alias name LookupCode.
     * @param value value to set the LOOKUP_CODE
     */
    public void setLookupCode(String value) {
        setAttributeInternal(LOOKUPCODE, value);
    }

    /**
     * Gets the attribute value for LOOKUP_TYPE using the alias name LookupType.
     * @return the LOOKUP_TYPE
     */
    public String getLookupType() {
        return (String)getAttributeInternal(LOOKUPTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for LOOKUP_TYPE using the alias name LookupType.
     * @param value value to set the LOOKUP_TYPE
     */
    public void setLookupType(String value) {
        setAttributeInternal(LOOKUPTYPE, value);
    }

    /**
     * Gets the attribute value for MEANING using the alias name Meaning.
     * @return the MEANING
     */
    public String getMeaning() {
        return (String)getAttributeInternal(MEANING);
    }

    /**
     * Sets <code>value</code> as attribute value for MEANING using the alias name Meaning.
     * @param value value to set the MEANING
     */
    public void setMeaning(String value) {
        setAttributeInternal(MEANING, value);
    }

    /**
     * Gets the attribute value for ROWID using the alias name RowID.
     * @return the ROWID
     */
    public String getRowID() {
        return (String)getAttributeInternal(ROWID);
    }

    /**
     * Sets <code>value</code> as attribute value for ROWID using the alias name RowID.
     * @param value value to set the ROWID
     */
    public void setRowID(String value) {
        setAttributeInternal(ROWID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
