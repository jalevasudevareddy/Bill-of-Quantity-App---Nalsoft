package model.view;

import java.math.BigDecimal;

import java.sql.Date;

import java.util.HashMap;
import java.util.Map;

import model.entity.XxboqPcHdrEOImpl;
import model.entity.XxboqPcLinesEOImpl;

import model.masterentity.ContractHeadersEOImpl;

import model.searchview.PCLinesScrVOImpl;

import model.searchview.PCLinesScrVORowImpl;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Feb 08 14:41:47 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PaymentCertLinesVORowImpl extends ViewRowImpl {
    public static final int ENTITY_XXBOQPCLINESEO = 0;
    public static final int ENTITY_XXBOQPCHDREO = 1;
    public static final int ENTITY_XXPJPROJECTSEO = 2;
    public static final int ENTITY_CONTRACTHEADERSEO = 3;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CreatedBy {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getCreatedBy();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CreationDate {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getCreationDate();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Cummulative {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getCummulative();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setCummulative((BigDecimal) value);
            }
        }
        ,
        LastUpdatedBy {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getLastUpdatedBy();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdatedDate {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getLastUpdatedDate();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Particulars {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getParticulars();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setParticulars((String) value);
            }
        }
        ,
        PcHeaderId {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getPcHeaderId();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setPcHeaderId((BigDecimal) value);
            }
        }
        ,
        PcLineId {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getPcLineId();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setPcLineId((BigDecimal) value);
            }
        }
        ,
        Previous {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getPrevious();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setPrevious((BigDecimal) value);
            }
        }
        ,
        TransCurrent {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransCurrent();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransCurrent((BigDecimal) value);
            }
        }
        ,
        EnableFlag {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getEnableFlag();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setEnableFlag((String) value);
            }
        }
        ,
        TransTotalPrevAmnt {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransTotalPrevAmnt();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransTotalPrevAmnt((BigDecimal) value);
            }
        }
        ,
        TransTotalCumltAmnt {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransTotalCumltAmnt();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransTotalCumltAmnt((BigDecimal) value);
            }
        }
        ,
        TransTotalPCAmnt {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransTotalPCAmnt();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransTotalPCAmnt((BigDecimal) value);
            }
        }
        ,
        TransParticular {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransParticular();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransParticular((String) value);
            }
        }
        ,
        TransVOWDPrevTotal {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransVOWDPrevTotal();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransVOWDPrevTotal((BigDecimal) value);
            }
        }
        ,
        TransVOWDCurrTotal {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransVOWDCurrTotal();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransVOWDCurrTotal((BigDecimal) value);
            }
        }
        ,
        TransVOWDTotal {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransVOWDTotal();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransVOWDTotal((BigDecimal) value);
            }
        }
        ,
        TransADVPrevTotal {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransADVPrevTotal();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransADVPrevTotal((BigDecimal) value);
            }
        }
        ,
        TransADVTotal {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransADVTotal();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransADVTotal((BigDecimal) value);
            }
        }
        ,
        TransADVCurrTotal {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransADVCurrTotal();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransADVCurrTotal((BigDecimal) value);
            }
        }
        ,
        AccountCcId {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getAccountCcId();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setAccountCcId((BigDecimal) value);
            }
        }
        ,
        LineComments {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getLineComments();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setLineComments((String) value);
            }
        }
        ,
        TransAccountCombination {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransAccountCombination();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransAccountCombination((String) value);
            }
        }
        ,
        TransAdvancePaidAmnt {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransAdvancePaidAmnt();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransAdvancePaidAmnt((BigDecimal) value);
            }
        }
        ,
        TransIsReadOnly {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransIsReadOnly();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransIsReadOnly((Boolean) value);
            }
        }
        ,
        PcHeaderId1 {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getPcHeaderId1();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setPcHeaderId1((BigDecimal) value);
            }
        }
        ,
        DocumentType {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getDocumentType();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setDocumentType((String) value);
            }
        }
        ,
        TransVOWDAmnt {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransVOWDAmnt();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransVOWDAmnt((BigDecimal) value);
            }
        }
        ,
        TransCummulativePer {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransCummulativePer();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransCummulativePer((BigDecimal) value);
            }
        }
        ,
        TransPreviousPer {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransPreviousPer();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransPreviousPer((BigDecimal) value);
            }
        }
        ,
        TransCurrentPer {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransCurrentPer();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransCurrentPer((BigDecimal) value);
            }
        }
        ,
        TransPrecision {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransPrecision();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransPrecision((BigDecimal) value);
            }
        }
        ,
        ProjectId {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getProjectId();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setProjectId((Number) value);
            }
        }
        ,
        TransDEDCurrTotal {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransDEDCurrTotal();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransDEDCurrTotal((BigDecimal) value);
            }
        }
        ,
        TransDEDPrevTotal {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransDEDPrevTotal();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransDEDPrevTotal((BigDecimal) value);
            }
        }
        ,
        TaxRate {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTaxRate();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTaxRate((BigDecimal) value);
            }
        }
        ,
        TaxRateCode {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTaxRateCode();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTaxRateCode((String) value);
            }
        }
        ,
        VatTaxAmount {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getVatTaxAmount();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setVatTaxAmount((BigDecimal) value);
            }
        }
        ,
        TransCurrentAmountTax {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransCurrentAmountTax();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransCurrentAmountTax((BigDecimal) value);
            }
        }
        ,
        TransTotalPCAmountExcludingVAT {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransTotalPCAmountExcludingVAT();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransTotalPCAmountExcludingVAT((BigDecimal) value);
            }
        }
        ,
        ContractId {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getContractId();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setContractId((BigDecimal) value);
            }
        }
        ,
        TransRetentionAmt {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getTransRetentionAmt();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setTransRetentionAmt((BigDecimal) value);
            }
        }
        ,
        PaymentCertHdrVO {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getPaymentCertHdrVO();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PCLinesScrVO1 {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getPCLinesScrVO1();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PaymentCertHdrVO1 {
            protected Object get(PaymentCertLinesVORowImpl obj) {
                return obj.getPaymentCertHdrVO1();
            }

            protected void put(PaymentCertLinesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;


        public int index() {
            return PaymentCertLinesVORowImpl.AttributesEnum.firstIndex() +
                ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return PaymentCertLinesVORowImpl.AttributesEnum.firstIndex() +
                PaymentCertLinesVORowImpl.AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = PaymentCertLinesVORowImpl.AttributesEnum.values();
            }
            return vals;
        }

        protected abstract Object get(PaymentCertLinesVORowImpl object);

        protected abstract void put(PaymentCertLinesVORowImpl object, Object value);
    }


    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int CUMMULATIVE = AttributesEnum.Cummulative.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int PARTICULARS = AttributesEnum.Particulars.index();
    public static final int PCHEADERID = AttributesEnum.PcHeaderId.index();
    public static final int PCLINEID = AttributesEnum.PcLineId.index();
    public static final int PREVIOUS = AttributesEnum.Previous.index();
    public static final int TRANSCURRENT = AttributesEnum.TransCurrent.index();
    public static final int ENABLEFLAG = AttributesEnum.EnableFlag.index();
    public static final int TRANSTOTALPREVAMNT = AttributesEnum.TransTotalPrevAmnt.index();
    public static final int TRANSTOTALCUMLTAMNT = AttributesEnum.TransTotalCumltAmnt.index();
    public static final int TRANSTOTALPCAMNT = AttributesEnum.TransTotalPCAmnt.index();
    public static final int TRANSPARTICULAR = AttributesEnum.TransParticular.index();
    public static final int TRANSVOWDPREVTOTAL = AttributesEnum.TransVOWDPrevTotal.index();
    public static final int TRANSVOWDCURRTOTAL = AttributesEnum.TransVOWDCurrTotal.index();
    public static final int TRANSVOWDTOTAL = AttributesEnum.TransVOWDTotal.index();
    public static final int TRANSADVPREVTOTAL = AttributesEnum.TransADVPrevTotal.index();
    public static final int TRANSADVTOTAL = AttributesEnum.TransADVTotal.index();
    public static final int TRANSADVCURRTOTAL = AttributesEnum.TransADVCurrTotal.index();
    public static final int ACCOUNTCCID = AttributesEnum.AccountCcId.index();
    public static final int LINECOMMENTS = AttributesEnum.LineComments.index();
    public static final int TRANSACCOUNTCOMBINATION = AttributesEnum.TransAccountCombination.index();
    public static final int TRANSADVANCEPAIDAMNT = AttributesEnum.TransAdvancePaidAmnt.index();
    public static final int TRANSISREADONLY = AttributesEnum.TransIsReadOnly.index();
    public static final int PCHEADERID1 = AttributesEnum.PcHeaderId1.index();
    public static final int DOCUMENTTYPE = AttributesEnum.DocumentType.index();
    public static final int TRANSVOWDAMNT = AttributesEnum.TransVOWDAmnt.index();
    public static final int TRANSCUMMULATIVEPER = AttributesEnum.TransCummulativePer.index();
    public static final int TRANSPREVIOUSPER = AttributesEnum.TransPreviousPer.index();
    public static final int TRANSCURRENTPER = AttributesEnum.TransCurrentPer.index();
    public static final int TRANSPRECISION = AttributesEnum.TransPrecision.index();
    public static final int PROJECTID = AttributesEnum.ProjectId.index();
    public static final int TRANSDEDCURRTOTAL = AttributesEnum.TransDEDCurrTotal.index();
    public static final int TRANSDEDPREVTOTAL = AttributesEnum.TransDEDPrevTotal.index();
    public static final int TAXRATE = AttributesEnum.TaxRate.index();
    public static final int TAXRATECODE = AttributesEnum.TaxRateCode.index();
    public static final int VATTAXAMOUNT = AttributesEnum.VatTaxAmount.index();
    public static final int TRANSCURRENTAMOUNTTAX = AttributesEnum.TransCurrentAmountTax.index();
    public static final int TRANSTOTALPCAMOUNTEXCLUDINGVAT = AttributesEnum.TransTotalPCAmountExcludingVAT.index();
    public static final int CONTRACTID = AttributesEnum.ContractId.index();
    public static final int TRANSRETENTIONAMT = AttributesEnum.TransRetentionAmt.index();
    public static final int PAYMENTCERTHDRVO = AttributesEnum.PaymentCertHdrVO.index();
    public static final int PCLINESSCRVO1 = AttributesEnum.PCLinesScrVO1.index();
    public static final int PAYMENTCERTHDRVO1 = AttributesEnum.PaymentCertHdrVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public PaymentCertLinesVORowImpl() {
    }

    /**
     * Gets XxboqPcLinesEO entity object.
     * @return the XxboqPcLinesEO
     */
    public XxboqPcLinesEOImpl getXxboqPcLinesEO() {
        return (XxboqPcLinesEOImpl)getEntity(0);
    }

    /**
     * Gets XxboqPcHdrEO entity object.
     * @return the XxboqPcHdrEO
     */
    public XxboqPcHdrEOImpl getXxboqPcHdrEO() {
        return (XxboqPcHdrEOImpl)getEntity(1);
    }

    /**
     * Gets XxpjProjectsEO entity object.
     * @return the XxpjProjectsEO
     */
    public EntityImpl getXxpjProjectsEO() {
        return (EntityImpl)getEntity(2);
    }

    /**
     * Gets ContractHeadersEO entity object.
     * @return the ContractHeadersEO
     */
    public ContractHeadersEOImpl getContractHeadersEO() {
        return (ContractHeadersEOImpl)getEntity(3);
    }

    /**
     * Gets the attribute value for CREATED_BY using the alias name CreatedBy.
     * @return the CREATED_BY
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }


    /**
     * Gets the attribute value for CREATION_DATE using the alias name CreationDate.
     * @return the CREATION_DATE
     */
    public Date getCreationDate() {
        return (Date)getAttributeInternal(CREATIONDATE);
    }


    /**
     * Gets the attribute value for CUMMULATIVE using the alias name Cummulative.
     * @return the CUMMULATIVE
     */
    public BigDecimal getCummulative() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            if ("VOWD_TOT".equals(getParticulars())) {
                amnt = getTransVOWDCurrTotal();
            } else if ("ADV_TOT".equals(getParticulars())) {
                amnt = getTransADVCurrTotal();
            } else if ("DED_TOT".equals(getParticulars())) { //TODO
                amnt = getTransDEDCurrTotal();
            } else if ("TOT".equals(getParticulars())) {
                amnt = getTransTotalCumltAmnt();
            } else {
                amnt = (BigDecimal)getAttributeInternal(CUMMULATIVE);
            }
        } catch (Exception e) {
            amnt = (BigDecimal)getAttributeInternal(CUMMULATIVE);
            e.printStackTrace();
        }
        setAttributeInternal(CUMMULATIVE, new BigDecimal(amnt.toString()));
        return amnt;
    }

    /**
     * Sets <code>value</code> as attribute value for CUMMULATIVE using the alias name Cummulative.
     * @param value value to set the CUMMULATIVE
     */
    public void setCummulative(BigDecimal value) {
        if (value != null && getTransPrecision() != null) {
            BigDecimal n =
                new BigDecimal(value.doubleValue() - getPrevious().doubleValue());
            n =
                round((n.doubleValue() * (getTaxRate()==null?0:getTaxRate().doubleValue() / 100)), getTransPrecision().intValue());
            setAttributeInternal(VATTAXAMOUNT, n);
            value =
                    (round(value.doubleValue(), getTransPrecision().intValue()));
        }
        setAttributeInternal(CUMMULATIVE, value);
    }

    /**
     * Gets the attribute value for LAST_UPDATED_BY using the alias name LastUpdatedBy.
     * @return the LAST_UPDATED_BY
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }


    /**
     * Gets the attribute value for LAST_UPDATED_DATE using the alias name LastUpdatedDate.
     * @return the LAST_UPDATED_DATE
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }


    /**
     * Gets the attribute value for PARTICULARS using the alias name Particulars.
     * @return the PARTICULARS
     */
    public String getParticulars() {

        return (String)getAttributeInternal(PARTICULARS);
    }


    private Map getTransParticularStr() {
        Map<String, String> particulasMap = null;
        try {
            particulasMap = new HashMap<String, String>();
            particulasMap.put("VOWD", "Value of Work Done");
            particulasMap.put("MAT_AT_SITE", "Material at Site");
            particulasMap.put("VOWD_TOT", "Sub Total A");
            particulasMap.put("ADV", "Advance");
            particulasMap.put("ADV_RECV", "Advance Recovery");
            particulasMap.put("ADV_TOT", "Sub Total B");
            particulasMap.put("RET", "Retention");
            particulasMap.put("RET_REL", "Retention Release");
            particulasMap.put("OTH_DED", "Other Deductions (D)");
            particulasMap.put("DED_TOT", "Sub Total C");
            particulasMap.put("TOT", "Grand Total(A+B-C-D)");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return particulasMap;


    }

    /**
     * Sets <code>value</code> as attribute value for PARTICULARS using the alias name Particulars.
     * @param value value to set the PARTICULARS
     */
    public void setParticulars(String value) {
        setAttributeInternal(PARTICULARS, value);
    }

    /**
     * Gets the attribute value for PC_HEADER_ID using the alias name PcHeaderId.
     * @return the PC_HEADER_ID
     */
    public BigDecimal getPcHeaderId() {
        return (BigDecimal)getAttributeInternal(PCHEADERID);
    }

    /**
     * Sets <code>value</code> as attribute value for PC_HEADER_ID using the alias name PcHeaderId.
     * @param value value to set the PC_HEADER_ID
     */
    public void setPcHeaderId(BigDecimal value) {
        setAttributeInternal(PCHEADERID, value);
    }

    /**
     * Gets the attribute value for PC_LINE_ID using the alias name PcLineId.
     * @return the PC_LINE_ID
     */
    public BigDecimal getPcLineId() {
        return (BigDecimal)getAttributeInternal(PCLINEID);
    }

    /**
     * Sets <code>value</code> as attribute value for PC_LINE_ID using the alias name PcLineId.
     * @param value value to set the PC_LINE_ID
     */
    public void setPcLineId(BigDecimal value) {
        setAttributeInternal(PCLINEID, value);
    }

    /**
     * Gets the attribute value for PREVIOUS using the alias name Previous.
     * @return the PREVIOUS
     */
    public BigDecimal getPrevious() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            if ("VOWD_TOT".equals(getParticulars())) {
                amnt = getTransVOWDPrevTotal();
            } else if ("ADV_TOT".equals(getParticulars())) {
                amnt = getTransADVPrevTotal();
            } else if ("DED_TOT".equals(getParticulars())) { //TODO
                amnt = getTransDEDPrevTotal();
            } else if ("TOT".equals(getParticulars())) {
                amnt = getTransTotalPrevAmnt();
            } else {
                amnt = (BigDecimal)getAttributeInternal(PREVIOUS);
            }
        } catch (Exception e) {
            amnt = (BigDecimal)getAttributeInternal(PREVIOUS);
            e.printStackTrace();
        }
        setAttributeInternal(PREVIOUS, new BigDecimal(amnt.toString()));
        return amnt;
        //        return (BigDecimal)getAttributeInternal(PREVIOUS);
    }

    /**
     * Sets <code>value</code> as attribute value for PREVIOUS using the alias name Previous.
     * @param value value to set the PREVIOUS
     */
    public void setPrevious(BigDecimal value) {
        if (value != null && getTransPrecision() != null) {
            value =
                    (round(value.doubleValue(), getTransPrecision().intValue()));
        }
        setAttributeInternal(PREVIOUS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCurrent.
     * @return the TransCurrent
     */
    public BigDecimal getTransCurrent() {
        if (getCummulative() != null && getPrevious() != null) {
            return getCummulative().subtract(getPrevious());
        }
        return (BigDecimal)getAttributeInternal(TRANSCURRENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCurrent.
     * @param value value to set the  TransCurrent
     */
    public void setTransCurrent(BigDecimal value) {
        setAttributeInternal(TRANSCURRENT, value);
    }

    /**
     * Gets the attribute value for ENABLE_FLAG using the alias name EnableFlag.
     * @return the ENABLE_FLAG
     */
    public String getEnableFlag() {
        return (String)getAttributeInternal(ENABLEFLAG);
    }

    /**
     * Sets <code>value</code> as attribute value for ENABLE_FLAG using the alias name EnableFlag.
     * @param value value to set the ENABLE_FLAG
     */
    public void setEnableFlag(String value) {
        setAttributeInternal(ENABLEFLAG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotalPrevAmnt.
     * @return the TransTotalPrevAmnt
     */
    public BigDecimal getTransTotalPrevAmnt() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            Double amntDbl = 0.0;
            Map<String, Map> pcValsMap = getPCLinesValues();
            if (pcValsMap != null && pcValsMap.size() == 3) {
                Map<String, Double> prevVals =
                    (HashMap<String, Double>)pcValsMap.get("P");
                for (Map.Entry<String, Double> entry : prevVals.entrySet()) {
                    if (!"TOT".equals(entry.getKey()) &&
                        !"DED_TOT".equals(entry.getKey()) &&
                        !"ADV_TOT".equals(entry.getKey()) &&
                        !"VOWD_TOT".equals(entry.getKey())) {

                        if ("VOWD".equals(entry.getKey().toString()) ||
                            "MAT_AT_SITE".equals(entry.getKey().toString()) ||
                            "ADV".equals(entry.getKey().toString()) ||
                            "RET_REL".equals(entry.getKey().toString())) {
                            amntDbl = amntDbl + entry.getValue();
                        } else {
                            amntDbl = amntDbl - entry.getValue();
                        }
                    }
                }
                amnt = new BigDecimal(amntDbl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return amnt;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotalPrevAmnt.
     * @param value value to set the  TransTotalPrevAmnt
     */
    public void setTransTotalPrevAmnt(BigDecimal value) {
        setAttributeInternal(TRANSTOTALPREVAMNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotalCumltAmnt.
     * @return the TransTotalCumltAmnt
     */
    public BigDecimal getTransTotalCumltAmnt() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            Double amntDbl = 0.0;
            Map<String, Map> pcValsMap = getPCLinesValues();
            if (pcValsMap != null && pcValsMap.size() == 3) {
                Map<String, Double> prevVals =
                    (HashMap<String, Double>)pcValsMap.get("C");
                for (Map.Entry<String, Double> entry : prevVals.entrySet()) {
                    if (!"TOT".equals(entry.getKey()) &&
                        !"DED_TOT".equals(entry.getKey()) &&
                        !"ADV_TOT".equals(entry.getKey()) &&
                        !"VOWD_TOT".equals(entry.getKey())) {
                        if ("VOWD".equals(entry.getKey().toString()) ||
                            "MAT_AT_SITE".equals(entry.getKey().toString()) ||
                            "ADV".equals(entry.getKey().toString()) ||
                            "RET_REL".equals(entry.getKey().toString())) {
                            amntDbl = amntDbl + entry.getValue();
                        } else {
                            amntDbl = amntDbl - entry.getValue();
                        }
                    }
                }
                amnt = new BigDecimal(amntDbl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return amnt;
    }

    public BigDecimal getTotalTaxAmnt() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            Double amntDbl = 0.0;
            Map<String, Map> pcValsMap = getPCLinesValues();
            if (pcValsMap != null && pcValsMap.size() == 3) {
                Map<String, Double> prevVals =
                    (HashMap<String, Double>)pcValsMap.get("T");
                for (Map.Entry<String, Double> entry : prevVals.entrySet()) {
                    if (!"TOT".equals(entry.getKey()) &&
                        !"DED_TOT".equals(entry.getKey()) &&
                        !"ADV_TOT".equals(entry.getKey()) &&
                        !"VOWD_TOT".equals(entry.getKey())) {
                        if ("VOWD".equals(entry.getKey().toString()) ||
                            "MAT_AT_SITE".equals(entry.getKey().toString()) ||
                            "ADV".equals(entry.getKey().toString()) ||
                            "RET_REL".equals(entry.getKey().toString())) {
                            amntDbl = amntDbl + entry.getValue();
                        } else {
                            amntDbl = amntDbl - entry.getValue();
                        }
                    }
                }
                amnt = new BigDecimal(amntDbl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return amnt;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotalCumltAmnt.
     * @param value value to set the  TransTotalCumltAmnt
     */
    public void setTransTotalCumltAmnt(BigDecimal value) {
        setAttributeInternal(TRANSTOTALCUMLTAMNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotalPCAmnt.
     * @return the TransTotalPCAmnt
     */
    public BigDecimal getTransTotalPCAmnt() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            if (getTransTotalPrevAmnt() != null &&
                getTransTotalCumltAmnt() != null) {
                amnt =
new BigDecimal(getTransTotalCumltAmnt().doubleValue() - getTransTotalPrevAmnt().doubleValue() +
               getTotalTaxAmnt().doubleValue());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return amnt;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotalPCAmnt.
     * @param value value to set the  TransTotalPCAmnt
     */
    public void setTransTotalPCAmnt(BigDecimal value) {
        setAttributeInternal(TRANSTOTALPCAMNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransParticular.
     * @return the TransParticular
     */
    public String getTransParticular() {

        Map<String, String> particulasMap = getTransParticularStr();
        if (particulasMap != null) {
            return particulasMap.get(getParticulars());
        }
        return (String)getAttributeInternal(TRANSPARTICULAR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransParticular.
     * @param value value to set the  TransParticular
     */
    public void setTransParticular(String value) {
        setAttributeInternal(TRANSPARTICULAR, value);
    }

    private Map getPCLinesValues() {
        Map<String, Map> valsMap = null;
        try {
            valsMap = new HashMap<String, Map>();
            Map<String, Double> prevValsMap = new HashMap<String, Double>();
            Map<String, Double> cumltValsMap = new HashMap<String, Double>();
            Map<String, Double> taxValsMap = new HashMap<String, Double>();
            prevValsMap = new HashMap<String, Double>();
            RowSet pcLinesVO = getPCLinesScrVO1();
            pcLinesVO.setNamedWhereClauseParam("p_pc_hdr_id", getPcHeaderId());
            pcLinesVO.executeQuery();
            PCLinesScrVORowImpl pclineRow =
                (PCLinesScrVORowImpl)pcLinesVO.first();
            while (pclineRow != null) {
                prevValsMap.put(pclineRow.getParticulars(),
                                pclineRow.getPrevious().doubleValue());
                cumltValsMap.put(pclineRow.getParticulars(),
                                 pclineRow.getCummulative().doubleValue());
                taxValsMap.put(pclineRow.getParticulars(),
                               pclineRow.getVatTaxAmount() == null ? 0 :
                               pclineRow.getVatTaxAmount().doubleValue());
                if (pcLinesVO.hasNext()) {
                    pclineRow = (PCLinesScrVORowImpl)pcLinesVO.next();
                } else {
                    pclineRow = null;
                }
            }
            valsMap.put("P", prevValsMap);
            valsMap.put("C", cumltValsMap);
            valsMap.put("T", taxValsMap);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return valsMap;
    }


    /**
     * Gets the attribute value for the calculated attribute TransVOWDPrevTotal.
     * @return the TransVOWDPrevTotal
     */
    public BigDecimal getTransVOWDPrevTotal() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            Double amntDbl = 0.0;
            Map<String, Map> pcValsMap = getPCLinesValues();
            if (pcValsMap != null && pcValsMap.size() == 3) {
                Map<String, Double> prevVals =
                    (HashMap<String, Double>)pcValsMap.get("P");
                for (Map.Entry<String, Double> entry : prevVals.entrySet()) {
                    if ("VOWD".equals(entry.getKey().toString()) ||
                        "MAT_AT_SITE".equals(entry.getKey().toString())) {
                        amntDbl = amntDbl + entry.getValue();
                    }
                }
                amnt = new BigDecimal(amntDbl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return amnt;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransVOWDPrevTotal.
     * @param value value to set the  TransVOWDPrevTotal
     */
    public void setTransVOWDPrevTotal(BigDecimal value) {
        setAttributeInternal(TRANSVOWDPREVTOTAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransVOWDCurrTotal.
     * @return the TransVOWDCurrTotal
     */
    public BigDecimal getTransVOWDCurrTotal() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            Double amntDbl = 0.0;
            Map<String, Map> pcValsMap = getPCLinesValues();
            if (pcValsMap != null && pcValsMap.size() == 3) {
                Map<String, Double> prevVals =
                    (HashMap<String, Double>)pcValsMap.get("C");
                for (Map.Entry<String, Double> entry : prevVals.entrySet()) {
                    if ("VOWD".equals(entry.getKey().toString()) ||
                        "MAT_AT_SITE".equals(entry.getKey().toString())) {
                        amntDbl = amntDbl + entry.getValue();
                    }
                }
                amnt = new BigDecimal(amntDbl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return amnt;
    }

    public BigDecimal getVOWDTaxTotal() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            Double amntDbl = 0.0;
            Map<String, Map> pcValsMap = getPCLinesValues();
            if (pcValsMap != null && pcValsMap.size() == 3) {
                Map<String, Double> taxVals =
                    (HashMap<String, Double>)pcValsMap.get("T");
                for (Map.Entry<String, Double> entry : taxVals.entrySet()) {
                    if ("VOWD".equals(entry.getKey().toString()) ||
                        "MAT_AT_SITE".equals(entry.getKey().toString())) {
                        amntDbl = amntDbl + entry.getValue();
                    }
                }
                amnt = new BigDecimal(amntDbl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return amnt;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransVOWDCurrTotal.
     * @param value value to set the  TransVOWDCurrTotal
     */
    public void setTransVOWDCurrTotal(BigDecimal value) {
        setAttributeInternal(TRANSVOWDCURRTOTAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransVOWDTotal.
     * @return the TransVOWDTotal
     */
    public BigDecimal getTransVOWDTotal() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            if (getTransVOWDCurrTotal() != null &&
                getTransVOWDPrevTotal() != null) {
                amnt =
new BigDecimal(getTransVOWDCurrTotal().doubleValue() - getTransVOWDPrevTotal().doubleValue());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return amnt;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransVOWDTotal.
     * @param value value to set the  TransVOWDTotal
     */
    public void setTransVOWDTotal(BigDecimal value) {
        setAttributeInternal(TRANSVOWDTOTAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransADVPrevTotal.
     * @return the TransADVPrevTotal
     */
    public BigDecimal getTransADVPrevTotal() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            Double amntDbl = 0.0;
            Map<String, Map> pcValsMap = getPCLinesValues();
            if (pcValsMap != null && pcValsMap.size() == 3) {
                Map<String, Double> prevVals =
                    (HashMap<String, Double>)pcValsMap.get("P");
                for (Map.Entry<String, Double> entry : prevVals.entrySet()) {
                    if ("ADV".equals(entry.getKey().toString())) {
                        amntDbl = amntDbl + entry.getValue();
                    } else if ("ADV_RECV".equals(entry.getKey().toString())) {
                        amntDbl = amntDbl - entry.getValue();
                    }
                }
                amnt = new BigDecimal(amntDbl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return amnt;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransADVPrevTotal.
     * @param value value to set the  TransADVPrevTotal
     */
    public void setTransADVPrevTotal(BigDecimal value) {
        setAttributeInternal(TRANSADVPREVTOTAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransADVTotal.
     * @return the TransADVTotal
     */
    public BigDecimal getTransADVTotal() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            if (getTransADVPrevTotal() != null &&
                getTransADVCurrTotal() != null) {
                amnt =
new BigDecimal(getTransADVCurrTotal().doubleValue() - getTransADVPrevTotal().doubleValue());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return amnt;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransADVTotal.
     * @param value value to set the  TransADVTotal
     */
    public void setTransADVTotal(BigDecimal value) {
        setAttributeInternal(TRANSADVTOTAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransADVCurrTotal.
     * @return the TransADVCurrTotal
     */
    public BigDecimal getTransADVCurrTotal() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            Double amntDbl = 0.0;
            Map<String, Map> pcValsMap = getPCLinesValues();
            if (pcValsMap != null && pcValsMap.size() == 3) {
                Map<String, Double> prevVals =
                    (HashMap<String, Double>)pcValsMap.get("C");
                for (Map.Entry<String, Double> entry : prevVals.entrySet()) {
                    if ("ADV".equals(entry.getKey().toString())) {
                        amntDbl = amntDbl + entry.getValue();
                    } else if ("ADV_RECV".equals(entry.getKey().toString())) {
                        amntDbl = amntDbl - entry.getValue();
                    }
                }
                amnt = new BigDecimal(amntDbl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return amnt;
    }

    public BigDecimal getADVTaxTotal() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            Double amntDbl = 0.0;
            Map<String, Map> pcValsMap = getPCLinesValues();
            if (pcValsMap != null && pcValsMap.size() == 3) {
                Map<String, Double> prevVals =
                    (HashMap<String, Double>)pcValsMap.get("T");
                for (Map.Entry<String, Double> entry : prevVals.entrySet()) {
                    if ("ADV".equals(entry.getKey().toString())) {
                        amntDbl = amntDbl + entry.getValue();
                    } else if ("ADV_RECV".equals(entry.getKey().toString())) {
                        amntDbl = amntDbl - entry.getValue();
                    }
                }
                amnt = new BigDecimal(amntDbl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return amnt;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransADVCurrTotal.
     * @param value value to set the  TransADVCurrTotal
     */
    public void setTransADVCurrTotal(BigDecimal value) {
        setAttributeInternal(TRANSADVCURRTOTAL, value);
    }

    /**
     * Gets the attribute value for ACCOUNT_CC_ID using the alias name AccountCcId.
     * @return the ACCOUNT_CC_ID
     */
    public BigDecimal getAccountCcId() {
        return (BigDecimal)getAttributeInternal(ACCOUNTCCID);
    }

    /**
     * Sets <code>value</code> as attribute value for ACCOUNT_CC_ID using the alias name AccountCcId.
     * @param value value to set the ACCOUNT_CC_ID
     */
    public void setAccountCcId(BigDecimal value) {
        setAttributeInternal(ACCOUNTCCID, value);
    }

    /**
     * Gets the attribute value for LINE_COMMENTS using the alias name LineComments.
     * @return the LINE_COMMENTS
     */
    public String getLineComments() {
        return (String)getAttributeInternal(LINECOMMENTS);
    }

    /**
     * Sets <code>value</code> as attribute value for LINE_COMMENTS using the alias name LineComments.
     * @param value value to set the LINE_COMMENTS
     */
    public void setLineComments(String value) {
        setAttributeInternal(LINECOMMENTS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransAccountCombination.
     * @return the TransAccountCombination
     */
    public String getTransAccountCombination() {
        return (String)getAttributeInternal(TRANSACCOUNTCOMBINATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAccountCombination.
     * @param value value to set the  TransAccountCombination
     */
    public void setTransAccountCombination(String value) {
        setAttributeInternal(TRANSACCOUNTCOMBINATION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransAdvancePaidAmnt.
     * @return the TransAdvancePaidAmnt
     */
    public BigDecimal getTransAdvancePaidAmnt() {
        return (BigDecimal)getAttributeInternal(TRANSADVANCEPAIDAMNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAdvancePaidAmnt.
     * @param value value to set the  TransAdvancePaidAmnt
     */
    public void setTransAdvancePaidAmnt(BigDecimal value) {
        setAttributeInternal(TRANSADVANCEPAIDAMNT, value);
    }


    public Boolean getReadOnly() {
        Boolean readOnly = true;
        Object docTypeObj = getDocumentType();
        Object partTypeObj = getParticulars();
        if (docTypeObj != null && partTypeObj != null) {
            String partType = partTypeObj.toString();
            String docType = docTypeObj.toString();

            if ("VOWD".equals(partType)) {
                readOnly = true;
            }

            else if ("MAT_AT_SITE".equals(partType)) {
                if ("PB".equals(docType) || "FPB".equals(docType)) {
                    readOnly = false;
                }
            }

            else if ("ADV".equals(partType)) {
                if ("ADV".equals(docType)) {
                    readOnly = false;
                }
            } else if ("ADV_RECV".equals(partType)) {
                if ("PB".equals(docType)) {
                    readOnly = false;
                }
            } else if ("RET".equals(partType)) {

                if ("RR".equals(docType) || "FRR".equals(docType)) {
                    readOnly = false;
                }
            }


        }

        return readOnly;
    }

    /**
     * Gets the attribute value for the calculated attribute TransIsReadOnly.
     * @return the TransIsReadOnly
     */
    public Boolean getTransIsReadOnly() {
        Boolean enable = true;
        Object docTypeObj = getDocumentType();
        Object partTypeObj = getParticulars();
        if (docTypeObj != null && partTypeObj != null) {
            String partType = partTypeObj.toString();
            String docType = docTypeObj.toString();

            if ("VOWD".equals(partType)) {
                if ("OB".equals(docType)) {
                    enable = false;
                }
            } else if ("MAT_AT_SITE".equals(partType)) {
                if ("PB".equals(docType) || "FPB".equals(docType) ||
                    "OB".equals(docType)) {
                    enable = false;
                }
            } else if ("ADV".equals(partType)) {
                if ("ADV".equals(docType) || "OB".equals(docType)) {
                    enable = false;
                }
            } else if ("ADV_RECV".equals(partType)) {
                if ("PB".equals(docType) || "FPB".equals(docType) ||
                    "OB".equals(docType)) {
                    enable = false;
                }
            } else if ("RET".equals(partType)) {
                if (                                                                //"RR".equals(docType) || "FRR".equals(docType) ||
                    "PB".equals(docType) || "FPB".equals(docType) ||
                    "OB".equals(docType)) {
                    enable = false;
                }
            } else if ("RET_REL".equals(partType)) {
                if ("RR".equals(docType) || "FRR".equals(docType) ||
                    "PB".equals(docType) || "FPB".equals(docType) ||
                    "OB".equals(docType)) {
                    enable = false;
                }
            }
        }
        return enable;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransIsReadOnly.
     * @param value value to set the  TransIsReadOnly
     */
    public void setTransIsReadOnly(Boolean value) {
        setAttributeInternal(TRANSISREADONLY, value);
    }

    /**
     * Gets the attribute value for PC_HEADER_ID using the alias name PcHeaderId1.
     * @return the PC_HEADER_ID
     */
    public BigDecimal getPcHeaderId1() {
        return (BigDecimal)getAttributeInternal(PCHEADERID1);
    }

    /**
     * Sets <code>value</code> as attribute value for PC_HEADER_ID using the alias name PcHeaderId1.
     * @param value value to set the PC_HEADER_ID
     */
    public void setPcHeaderId1(BigDecimal value) {
        setAttributeInternal(PCHEADERID1, value);
    }

    /**
     * Gets the attribute value for DOCUMENT_TYPE using the alias name DocumentType.
     * @return the DOCUMENT_TYPE
     */
    public String getDocumentType() {
        return (String)getAttributeInternal(DOCUMENTTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for DOCUMENT_TYPE using the alias name DocumentType.
     * @param value value to set the DOCUMENT_TYPE
     */
    public void setDocumentType(String value) {
        setAttributeInternal(DOCUMENTTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransVOWDAmnt.
     * @return the TransVOWDAmnt
     */
    public BigDecimal getTransVOWDAmnt() {
        return (BigDecimal)getAttributeInternal(TRANSVOWDAMNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransVOWDAmnt.
     * @param value value to set the  TransVOWDAmnt
     */
    public void setTransVOWDAmnt(BigDecimal value) {
        setAttributeInternal(TRANSVOWDAMNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCummulativePer.
     * @return the TransCummulativePer
     */
    public BigDecimal getTransCummulativePer() {
        PaymentCertHdrVORowImpl hdrRow = (PaymentCertHdrVORowImpl) getPaymentCertHdrVO1().first();        
        if (hdrRow != null && getTransTotalCumltAmnt() != null &&
            hdrRow.getTransContractValue() != null) {
//            Key k = new Key(new Object({getPcHeaderId()}));
            
            Double contractValue =
                Double.parseDouble(hdrRow.getTransContractValue().toString());
            Double total = getTransTotalCumltAmnt().doubleValue();
            contractValue =
                    contractValue.doubleValue() != 0 ? contractValue : 1;
            Double percent = (total / (contractValue)) * 100;
            return new BigDecimal(percent);
        }
        return new BigDecimal(0);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCummulativePer.
     * @param value value to set the  TransCummulativePer
     */
    public void setTransCummulativePer(BigDecimal value) {
        setAttributeInternal(TRANSCUMMULATIVEPER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPreviousPer.
     * @return the TransPreviousPer
     */
    public BigDecimal getTransPreviousPer() {
        PaymentCertHdrVORowImpl hdrRow = (PaymentCertHdrVORowImpl) getPaymentCertHdrVO1().first();        
        if (hdrRow != null && getTransTotalPrevAmnt() != null &&
             hdrRow.getTransContractValue() != null) {
            Double contractValue =
                Double.parseDouble(hdrRow.getTransContractValue().toString());
            Double total = getTransTotalPrevAmnt().doubleValue();
            contractValue =
                    contractValue.doubleValue() != 0 ? contractValue : 1;
            Double percent = (total / (contractValue)) * 100;
            return new BigDecimal(percent);
        }
        return new BigDecimal(0);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransPreviousPer.
     * @param value value to set the  TransPreviousPer
     */
    public void setTransPreviousPer(BigDecimal value) {
        setAttributeInternal(TRANSPREVIOUSPER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCurrentPer.
     * @return the TransCurrentPer
     */
    public BigDecimal getTransCurrentPer() {
        PaymentCertHdrVORowImpl hdrRow = (PaymentCertHdrVORowImpl) getPaymentCertHdrVO1().first();        
        if (hdrRow != null && getTransTotalCumltAmnt() != null &&
            getTransTotalPrevAmnt() != null &&
             hdrRow.getTransContractValue() != null) {
            Double contractValue =
                Double.parseDouble( hdrRow.getTransContractValue().toString());
            Double total =
                getTransTotalCumltAmnt().doubleValue() - getTransTotalPrevAmnt().doubleValue();
            contractValue =
                    contractValue.doubleValue() != 0 ? contractValue : 1;
            Double percent = (total / (contractValue)) * 100;
            return new BigDecimal(percent);
        }
        return new BigDecimal(0);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCurrentPer.
     * @param value value to set the  TransCurrentPer
     */
    public void setTransCurrentPer(BigDecimal value) {
        setAttributeInternal(TRANSCURRENTPER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPrecision.
     * @return the TransPrecision
     */
    public BigDecimal getTransPrecision() {
        return (BigDecimal)getAttributeInternal(TRANSPRECISION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransPrecision.
     * @param value value to set the  TransPrecision
     */
    public void setTransPrecision(BigDecimal value) {
        setAttributeInternal(TRANSPRECISION, value);
    }


    /**
     * Gets the attribute value for PROJECT_ID using the alias name ProjectId.
     * @return the PROJECT_ID
     */
    public Number getProjectId() {
        return (Number)getAttributeInternal(PROJECTID);
    }

    /**
     * Sets <code>value</code> as attribute value for PROJECT_ID using the alias name ProjectId.
     * @param value value to set the PROJECT_ID
     */
    public void setProjectId(Number value) {
        setAttributeInternal(PROJECTID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransDEDCurrTotal.
     * @return the TransDEDCurrTotal
     */
    public BigDecimal getTransDEDCurrTotal() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            Double amntDbl = 0.0;
            Map<String, Map> pcValsMap = getPCLinesValues();
            if (pcValsMap != null && pcValsMap.size() == 3) {
                Map<String, Double> prevVals =
                    (HashMap<String, Double>)pcValsMap.get("C");
                for (Map.Entry<String, Double> entry : prevVals.entrySet()) {
                    if ("RET_REL".equals(entry.getKey().toString())){
                        amntDbl = amntDbl - entry.getValue();
                    }else if("RET".equals(entry.getKey().toString())) {
                        amntDbl = amntDbl + entry.getValue();
                    }
                }
                amnt = new BigDecimal(amntDbl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return amnt;
    }


    public BigDecimal getDEDTaxTotal() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            Double amntDbl = 0.0;
            Map<String, Map> pcValsMap = getPCLinesValues();
            if (pcValsMap != null && pcValsMap.size() == 3) {
                Map<String, Double> prevVals =
                    (HashMap<String, Double>)pcValsMap.get("T");
                for (Map.Entry<String, Double> entry : prevVals.entrySet()) {
                    if ("RET_REL".equals(entry.getKey().toString())){
                        amntDbl = amntDbl - entry.getValue();
                    }else if("RET".equals(entry.getKey().toString())) {
                        amntDbl = amntDbl + entry.getValue();
                    }
                }
                amnt = new BigDecimal(amntDbl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return amnt;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransDEDCurrTotal.
     * @param value value to set the  TransDEDCurrTotal
     */
    public void setTransDEDCurrTotal(BigDecimal value) {
        setAttributeInternal(TRANSDEDCURRTOTAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransDEDPrevTotal.
     * @return the TransDEDPrevTotal
     */
    public BigDecimal getTransDEDPrevTotal() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            Double amntDbl = 0.0;
            Map<String, Map> pcValsMap = getPCLinesValues();
            if (pcValsMap != null && pcValsMap.size() == 3) {
                Map<String, Double> prevVals =
                    (HashMap<String, Double>)pcValsMap.get("P");
                for (Map.Entry<String, Double> entry : prevVals.entrySet()) {
                        if ("RET_REL".equals(entry.getKey().toString())){
                            amntDbl = amntDbl - entry.getValue();
                        }else if("RET".equals(entry.getKey().toString())) {
                            amntDbl = amntDbl + entry.getValue();
                    }
                }
                amnt = new BigDecimal(amntDbl);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return amnt;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransDEDPrevTotal.
     * @param value value to set the  TransDEDPrevTotal
     */
    public void setTransDEDPrevTotal(BigDecimal value) {
        setAttributeInternal(TRANSDEDPREVTOTAL, value);
    }


    /**
     * Gets the attribute value for TAX_RATE using the alias name TaxRate.
     * @return the TAX_RATE
     */
    public BigDecimal getTaxRate() {
        return (BigDecimal)getAttributeInternal(TAXRATE);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RATE using the alias name TaxRate.
     * @param value value to set the TAX_RATE
     */
    public void setTaxRate(BigDecimal value) {
        setAttributeInternal(TAXRATE, value);
    }

    /**
     * Gets the attribute value for TAX_RATE_CODE using the alias name TaxRateCode.
     * @return the TAX_RATE_CODE
     */
    public String getTaxRateCode() {
        return (String)getAttributeInternal(TAXRATECODE);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RATE_CODE using the alias name TaxRateCode.
     * @param value value to set the TAX_RATE_CODE
     */
    public void setTaxRateCode(String value) {
        setAttributeInternal(TAXRATECODE, value);
    }

    /**
     * Gets the attribute value for VAT_TAX_AMOUNT using the alias name VatTaxAmount.
     * @return the VAT_TAX_AMOUNT
     */
    public BigDecimal getVatTaxAmount() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            if ("VOWD_TOT".equals(getParticulars())) {
                amnt = getVOWDTaxTotal();
            } else if ("ADV_TOT".equals(getParticulars())) {
                amnt = getADVTaxTotal();
            } else if ("DED_TOT".equals(getParticulars())) { //TODO
                amnt = getDEDTaxTotal();
            } else if ("TOT".equals(getParticulars())) {
                amnt = getTotalTaxAmnt();
            } else {
                amnt = (BigDecimal)getAttributeInternal(VATTAXAMOUNT);
            }
        } catch (Exception e) {
            amnt = (BigDecimal)getAttributeInternal(VATTAXAMOUNT);
            e.printStackTrace();
        }
        setAttributeInternal(VATTAXAMOUNT,
                             new BigDecimal(amnt == null ? "0" : amnt.toString()));
        return amnt;
    }

    /**
     * Sets <code>value</code> as attribute value for VAT_TAX_AMOUNT using the alias name VatTaxAmount.
     * @param value value to set the VAT_TAX_AMOUNT
     */
    public void setVatTaxAmount(BigDecimal value) {
        setAttributeInternal(VATTAXAMOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCurrentAmountTax.
     * @return the TransCurrentAmountTax
     */
    public BigDecimal getTransCurrentAmountTax() {
        if (getCummulative() != null && getPrevious() != null) {
            return getCummulative().subtract(getPrevious()).add(getVatTaxAmount() ==
                                                                null ?
                                                                new BigDecimal(0) :
                                                                getVatTaxAmount());
        }
        return (BigDecimal)getAttributeInternal(TRANSCURRENTAMOUNTTAX);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCurrentAmountTax.
     * @param value value to set the  TransCurrentAmountTax
     */
    public void setTransCurrentAmountTax(BigDecimal value) {
        setAttributeInternal(TRANSCURRENTAMOUNTTAX, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotalPCAmountExcludingVAT.
     * @return the TransTotalPCAmountExcludingVAT
     */
    public BigDecimal getTransTotalPCAmountExcludingVAT() {
        BigDecimal amnt = new BigDecimal(0);
        try {
            if (getTransTotalPrevAmnt() != null &&
                getTransTotalCumltAmnt() != null) {
                amnt =
new BigDecimal(getTransTotalCumltAmnt().doubleValue() - getTransTotalPrevAmnt().doubleValue());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return amnt;
        //return (BigDecimal) getAttributeInternal(TRANSTOTALPCAMOUNTEXCLUDINGVAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotalPCAmountExcludingVAT.
     * @param value value to set the  TransTotalPCAmountExcludingVAT
     */
    public void setTransTotalPCAmountExcludingVAT(BigDecimal value) {
        setAttributeInternal(TRANSTOTALPCAMOUNTEXCLUDINGVAT, value);
    }

    /**
     * Gets the attribute value for CONTRACT_ID using the alias name ContractId.
     * @return the CONTRACT_ID
     */
    public BigDecimal getContractId() {
        return (BigDecimal) getAttributeInternal(CONTRACTID);
    }

    /**
     * Sets <code>value</code> as attribute value for CONTRACT_ID using the alias name ContractId.
     * @param value value to set the CONTRACT_ID
     */
    public void setContractId(BigDecimal value) {
        setAttributeInternal(CONTRACTID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransRetentionAmt.
     * @return the TransRetentionAmt
     */
    public BigDecimal getTransRetentionAmt() {
        return (BigDecimal) getAttributeInternal(TRANSRETENTIONAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransRetentionAmt.
     * @param value value to set the  TransRetentionAmt
     */
    public void setTransRetentionAmt(BigDecimal value) {
        setAttributeInternal(TRANSRETENTIONAMT, value);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link PaymentCertHdrVO.
     */
    public Row getPaymentCertHdrVO() {
        return (Row)getAttributeInternal(PAYMENTCERTHDRVO);
    }

    /**
     * Sets the master-detail link PaymentCertHdrVO between this object and <code>value</code>.
     */
    public void setPaymentCertHdrVO(Row value) {
        setAttributeInternal(PAYMENTCERTHDRVO, value);
    }


    /**
     * Gets the view accessor <code>RowSet</code> PCLinesScrVO1.
     */
    public RowSet getPCLinesScrVO1() {
        return (RowSet)getAttributeInternal(PCLINESSCRVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PaymentCertHdrVO1.
     */
    public RowSet getPaymentCertHdrVO1() {
        return (RowSet) getAttributeInternal(PAYMENTCERTHDRVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    public BigDecimal round(double value,
                            int numberOfDigitsAfterDecimalPoint) {
        BigDecimal bigDecimal = new BigDecimal(value);
        bigDecimal =
                bigDecimal.setScale(numberOfDigitsAfterDecimalPoint, BigDecimal.ROUND_HALF_UP);

        //        try {
        //            RowSet vo = getRoundNumberVO1();
        //            vo.setNamedWhereClauseParam("p_value", value);
        //            vo.setNamedWhereClauseParam("p_precision",
        //                                        numberOfDigitsAfterDecimalPoint);
        //            vo.executeQuery();
        //RoundNumberVORowImpl row =(RoundNumberVORowImpl) vo.first();
        //            if(row.getValue()!=null){
        //         return row.getValue().doubleValue()       ;
        //
        //        }
        //        }
        //                catch (Exception e) {
        //            e.printStackTrace();
        //        }
        return bigDecimal;
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
