package model.reportview;

import java.math.BigDecimal;

import java.sql.Date;

import model.viewentity.XxboqPcLinesVEOImpl;

import oracle.jbo.Row;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 08 18:51:54 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BoqPcLinesViewVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Amount {
            public Object get(BoqPcLinesViewVORowImpl obj) {
                return obj.getAmount();
            }

            public void put(BoqPcLinesViewVORowImpl obj, Object value) {
                obj.setAmount((BigDecimal)value);
            }
        },
        Description {
            public Object get(BoqPcLinesViewVORowImpl obj) {
                return obj.getDescription();
            }

            public void put(BoqPcLinesViewVORowImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        },
        Month {
            public Object get(BoqPcLinesViewVORowImpl obj) {
                return obj.getMonth();
            }

            public void put(BoqPcLinesViewVORowImpl obj, Object value) {
                obj.setMonth((Date)value);
            }
        },
        PcDocumentNum {
            public Object get(BoqPcLinesViewVORowImpl obj) {
                return obj.getPcDocumentNum();
            }

            public void put(BoqPcLinesViewVORowImpl obj, Object value) {
                obj.setPcDocumentNum((String)value);
            }
        },
        PcHeaderId {
            public Object get(BoqPcLinesViewVORowImpl obj) {
                return obj.getPcHeaderId();
            }

            public void put(BoqPcLinesViewVORowImpl obj, Object value) {
                obj.setPcHeaderId((BigDecimal)value);
            }
        },
        Period {
            public Object get(BoqPcLinesViewVORowImpl obj) {
                return obj.getPeriod();
            }

            public void put(BoqPcLinesViewVORowImpl obj, Object value) {
                obj.setPeriod((String)value);
            }
        },
        ProjectId {
            public Object get(BoqPcLinesViewVORowImpl obj) {
                return obj.getProjectId();
            }

            public void put(BoqPcLinesViewVORowImpl obj, Object value) {
                obj.setProjectId((BigDecimal)value);
            }
        },
        Remarks {
            public Object get(BoqPcLinesViewVORowImpl obj) {
                return obj.getRemarks();
            }

            public void put(BoqPcLinesViewVORowImpl obj, Object value) {
                obj.setRemarks((String)value);
            }
        },
        BoqPcHdrViewVO {
            public Object get(BoqPcLinesViewVORowImpl obj) {
                return obj.getBoqPcHdrViewVO();
            }

            public void put(BoqPcLinesViewVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(BoqPcLinesViewVORowImpl object);

        public abstract void put(BoqPcLinesViewVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int AMOUNT = AttributesEnum.Amount.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int MONTH = AttributesEnum.Month.index();
    public static final int PCDOCUMENTNUM =
        AttributesEnum.PcDocumentNum.index();
    public static final int PCHEADERID = AttributesEnum.PcHeaderId.index();
    public static final int PERIOD = AttributesEnum.Period.index();
    public static final int PROJECTID = AttributesEnum.ProjectId.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int BOQPCHDRVIEWVO =
        AttributesEnum.BoqPcHdrViewVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public BoqPcLinesViewVORowImpl() {
    }

    /**
     * Gets XxboqPcLinesVEO entity object.
     * @return the XxboqPcLinesVEO
     */
    public XxboqPcLinesVEOImpl getXxboqPcLinesVEO() {
        return (XxboqPcLinesVEOImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for AMOUNT using the alias name Amount.
     * @return the AMOUNT
     */
    public BigDecimal getAmount() {
        return (BigDecimal)getAttributeInternal(AMOUNT);
    }

    /**
     * Sets <code>value</code> as attribute value for AMOUNT using the alias name Amount.
     * @param value value to set the AMOUNT
     */
    public void setAmount(BigDecimal value) {
        setAttributeInternal(AMOUNT, value);
    }

    /**
     * Gets the attribute value for DESCRIPTION using the alias name Description.
     * @return the DESCRIPTION
     */
    public String getDescription() {
        return (String)getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for DESCRIPTION using the alias name Description.
     * @param value value to set the DESCRIPTION
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for MONTH using the alias name Month.
     * @return the MONTH
     */
    public Date getMonth() {
        return (Date)getAttributeInternal(MONTH);
    }

    /**
     * Sets <code>value</code> as attribute value for MONTH using the alias name Month.
     * @param value value to set the MONTH
     */
    public void setMonth(Date value) {
        setAttributeInternal(MONTH, value);
    }

    /**
     * Gets the attribute value for PC_DOCUMENT_NUM using the alias name PcDocumentNum.
     * @return the PC_DOCUMENT_NUM
     */
    public String getPcDocumentNum() {
        return (String)getAttributeInternal(PCDOCUMENTNUM);
    }

    /**
     * Sets <code>value</code> as attribute value for PC_DOCUMENT_NUM using the alias name PcDocumentNum.
     * @param value value to set the PC_DOCUMENT_NUM
     */
    public void setPcDocumentNum(String value) {
        setAttributeInternal(PCDOCUMENTNUM, value);
    }

    /**
     * Gets the attribute value for PC_HEADER_ID using the alias name PcHeaderId.
     * @return the PC_HEADER_ID
     */
    public BigDecimal getPcHeaderId() {
        return (BigDecimal)getAttributeInternal(PCHEADERID);
    }

    /**
     * Sets <code>value</code> as attribute value for PC_HEADER_ID using the alias name PcHeaderId.
     * @param value value to set the PC_HEADER_ID
     */
    public void setPcHeaderId(BigDecimal value) {
        setAttributeInternal(PCHEADERID, value);
    }

    /**
     * Gets the attribute value for PERIOD using the alias name Period.
     * @return the PERIOD
     */
    public String getPeriod() {
        return (String)getAttributeInternal(PERIOD);
    }

    /**
     * Sets <code>value</code> as attribute value for PERIOD using the alias name Period.
     * @param value value to set the PERIOD
     */
    public void setPeriod(String value) {
        setAttributeInternal(PERIOD, value);
    }

    /**
     * Gets the attribute value for PROJECT_ID using the alias name ProjectId.
     * @return the PROJECT_ID
     */
    public BigDecimal getProjectId() {
        return (BigDecimal)getAttributeInternal(PROJECTID);
    }

    /**
     * Sets <code>value</code> as attribute value for PROJECT_ID using the alias name ProjectId.
     * @param value value to set the PROJECT_ID
     */
    public void setProjectId(BigDecimal value) {
        setAttributeInternal(PROJECTID, value);
    }

    /**
     * Gets the attribute value for REMARKS using the alias name Remarks.
     * @return the REMARKS
     */
    public String getRemarks() {
        return (String)getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as attribute value for REMARKS using the alias name Remarks.
     * @param value value to set the REMARKS
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link BoqPcHdrViewVO.
     */
    public Row getBoqPcHdrViewVO() {
        return (Row)getAttributeInternal(BOQPCHDRVIEWVO);
    }

    /**
     * Sets the master-detail link BoqPcHdrViewVO between this object and <code>value</code>.
     */
    public void setBoqPcHdrViewVO(Row value) {
        setAttributeInternal(BOQPCHDRVIEWVO, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
