package model.searchview;

import java.math.BigDecimal;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 17 11:23:54 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProjectCertifiedDetailsScrVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CertifiedHeaderId {
            public Object get(ProjectCertifiedDetailsScrVORowImpl obj) {
                return obj.getCertifiedHeaderId();
            }

            public void put(ProjectCertifiedDetailsScrVORowImpl obj,
                            Object value) {
                obj.setCertifiedHeaderId((BigDecimal)value);
            }
        }
        ,
        MasterCertHeaderId {
            public Object get(ProjectCertifiedDetailsScrVORowImpl obj) {
                return obj.getMasterCertHeaderId();
            }

            public void put(ProjectCertifiedDetailsScrVORowImpl obj,
                            Object value) {
                obj.setMasterCertHeaderId((BigDecimal)value);
            }
        }
        ,
        CertifiedDocumentNum {
            public Object get(ProjectCertifiedDetailsScrVORowImpl obj) {
                return obj.getCertifiedDocumentNum();
            }

            public void put(ProjectCertifiedDetailsScrVORowImpl obj,
                            Object value) {
                obj.setCertifiedDocumentNum((String)value);
            }
        }
        ,
        PeriodOfMeasure {
            public Object get(ProjectCertifiedDetailsScrVORowImpl obj) {
                return obj.getPeriodOfMeasure();
            }

            public void put(ProjectCertifiedDetailsScrVORowImpl obj,
                            Object value) {
                obj.setPeriodOfMeasure((String)value);
            }
        }
        ,
        Attribute2 {
            public Object get(ProjectCertifiedDetailsScrVORowImpl obj) {
                return obj.getAttribute2();
            }

            public void put(ProjectCertifiedDetailsScrVORowImpl obj,
                            Object value) {
                obj.setAttribute2((String)value);
            }
        }
        ,
        AdvanceRecoveryPrct {
            public Object get(ProjectCertifiedDetailsScrVORowImpl obj) {
                return obj.getAdvanceRecoveryPrct();
            }

            public void put(ProjectCertifiedDetailsScrVORowImpl obj,
                            Object value) {
                obj.setAdvanceRecoveryPrct((BigDecimal)value);
            }
        }
        ,
        Attribute3 {
            public Object get(ProjectCertifiedDetailsScrVORowImpl obj) {
                return obj.getAttribute3();
            }

            public void put(ProjectCertifiedDetailsScrVORowImpl obj,
                            Object value) {
                obj.setAttribute3((String)value);
            }
        }
        ,
        BoqHeaderId {
            public Object get(ProjectCertifiedDetailsScrVORowImpl obj) {
                return obj.getBoqHeaderId();
            }

            public void put(ProjectCertifiedDetailsScrVORowImpl obj,
                            Object value) {
                obj.setBoqHeaderId((BigDecimal)value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(ProjectCertifiedDetailsScrVORowImpl object);

        public abstract void put(ProjectCertifiedDetailsScrVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CERTIFIEDHEADERID = AttributesEnum.CertifiedHeaderId.index();
    public static final int MASTERCERTHEADERID = AttributesEnum.MasterCertHeaderId.index();
    public static final int CERTIFIEDDOCUMENTNUM = AttributesEnum.CertifiedDocumentNum.index();
    public static final int PERIODOFMEASURE = AttributesEnum.PeriodOfMeasure.index();
    public static final int ATTRIBUTE2 = AttributesEnum.Attribute2.index();
    public static final int ADVANCERECOVERYPRCT = AttributesEnum.AdvanceRecoveryPrct.index();
    public static final int ATTRIBUTE3 = AttributesEnum.Attribute3.index();
    public static final int BOQHEADERID = AttributesEnum.BoqHeaderId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ProjectCertifiedDetailsScrVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CertifiedHeaderId.
     * @return the CertifiedHeaderId
     */
    public BigDecimal getCertifiedHeaderId() {
        return (BigDecimal)getAttributeInternal(CERTIFIEDHEADERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CertifiedHeaderId.
     * @param value value to set the  CertifiedHeaderId
     */
    public void setCertifiedHeaderId(BigDecimal value) {
        setAttributeInternal(CERTIFIEDHEADERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MasterCertHeaderId.
     * @return the MasterCertHeaderId
     */
    public BigDecimal getMasterCertHeaderId() {
        return (BigDecimal)getAttributeInternal(MASTERCERTHEADERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MasterCertHeaderId.
     * @param value value to set the  MasterCertHeaderId
     */
    public void setMasterCertHeaderId(BigDecimal value) {
        setAttributeInternal(MASTERCERTHEADERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CertifiedDocumentNum.
     * @return the CertifiedDocumentNum
     */
    public String getCertifiedDocumentNum() {
        return (String)getAttributeInternal(CERTIFIEDDOCUMENTNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CertifiedDocumentNum.
     * @param value value to set the  CertifiedDocumentNum
     */
    public void setCertifiedDocumentNum(String value) {
        setAttributeInternal(CERTIFIEDDOCUMENTNUM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PeriodOfMeasure.
     * @return the PeriodOfMeasure
     */
    public String getPeriodOfMeasure() {
        return (String)getAttributeInternal(PERIODOFMEASURE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PeriodOfMeasure.
     * @param value value to set the  PeriodOfMeasure
     */
    public void setPeriodOfMeasure(String value) {
        setAttributeInternal(PERIODOFMEASURE, value);
    }


    /**
     * Gets the attribute value for the calculated attribute Attribute2.
     * @return the Attribute2
     */
    public String getAttribute2() {
        return (String) getAttributeInternal(ATTRIBUTE2);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Attribute2.
     * @param value value to set the  Attribute2
     */
    public void setAttribute2(String value) {
        setAttributeInternal(ATTRIBUTE2, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AdvanceRecoveryPrct.
     * @return the AdvanceRecoveryPrct
     */
    public BigDecimal getAdvanceRecoveryPrct() {
        return (BigDecimal)getAttributeInternal(ADVANCERECOVERYPRCT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AdvanceRecoveryPrct.
     * @param value value to set the  AdvanceRecoveryPrct
     */
    public void setAdvanceRecoveryPrct(BigDecimal value) {
        setAttributeInternal(ADVANCERECOVERYPRCT, value);
    }


    /**
     * Gets the attribute value for the calculated attribute Attribute3.
     * @return the Attribute3
     */
    public String getAttribute3() {
        return (String) getAttributeInternal(ATTRIBUTE3);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Attribute3.
     * @param value value to set the  Attribute3
     */
    public void setAttribute3(String value) {
        setAttributeInternal(ATTRIBUTE3, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BoqHeaderId.
     * @return the BoqHeaderId
     */
    public BigDecimal getBoqHeaderId() {
        return (BigDecimal)getAttributeInternal(BOQHEADERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BoqHeaderId.
     * @param value value to set the  BoqHeaderId
     */
    public void setBoqHeaderId(BigDecimal value) {
        setAttributeInternal(BOQHEADERID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
