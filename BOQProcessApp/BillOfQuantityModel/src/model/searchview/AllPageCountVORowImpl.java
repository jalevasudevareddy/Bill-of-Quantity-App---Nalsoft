package model.searchview;

import java.math.BigDecimal;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 16 18:52:01 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AllPageCountVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        DocCount {
            public Object get(AllPageCountVORowImpl obj) {
                return obj.getDocCount();
            }

            public void put(AllPageCountVORowImpl obj, Object value) {
                obj.setDocCount((BigDecimal)value);
            }
        },
        DocType {
            public Object get(AllPageCountVORowImpl obj) {
                return obj.getDocType();
            }

            public void put(AllPageCountVORowImpl obj, Object value) {
                obj.setDocType((String)value);
            }
        },
        Meaning {
            public Object get(AllPageCountVORowImpl obj) {
                return obj.getMeaning();
            }

            public void put(AllPageCountVORowImpl obj, Object value) {
                obj.setMeaning((String)value);
            }
        },
        TransColor {
            public Object get(AllPageCountVORowImpl obj) {
                return obj.getTransColor();
            }

            public void put(AllPageCountVORowImpl obj, Object value) {
                obj.setTransColor((String)value);
            }
        },
        TransTarget {
            public Object get(AllPageCountVORowImpl obj) {
                return obj.getTransTarget();
            }

            public void put(AllPageCountVORowImpl obj, Object value) {
                obj.setTransTarget((BigDecimal)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(AllPageCountVORowImpl object);

        public abstract void put(AllPageCountVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DOCCOUNT = AttributesEnum.DocCount.index();
    public static final int DOCTYPE = AttributesEnum.DocType.index();
    public static final int MEANING = AttributesEnum.Meaning.index();
    public static final int TRANSCOLOR = AttributesEnum.TransColor.index();
    public static final int TRANSTARGET = AttributesEnum.TransTarget.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AllPageCountVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute DocCount.
     * @return the DocCount
     */
    public BigDecimal getDocCount() {
        return (BigDecimal)getAttributeInternal(DOCCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocCount.
     * @param value value to set the  DocCount
     */
    public void setDocCount(BigDecimal value) {
        setAttributeInternal(DOCCOUNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DocType.
     * @return the DocType
     */
    public String getDocType() {
        return (String)getAttributeInternal(DOCTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocType.
     * @param value value to set the  DocType
     */
    public void setDocType(String value) {
        setAttributeInternal(DOCTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Meaning.
     * @return the Meaning
     */
    public String getMeaning() {
        return (String)getAttributeInternal(MEANING);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Meaning.
     * @param value value to set the  Meaning
     */
    public void setMeaning(String value) {
        setAttributeInternal(MEANING, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransColor.
     * @return the TransColor
     */
    public String getTransColor() {
        String meaning = getMeaning();
        if ("Active".equals(meaning) || "Approved".equals(meaning)) {
            return "#68c182";
        } else if ("Cancelled".equals(meaning)) {
            return "#fad55c";
        } else if ("Rejected".equals(meaning)) {
            return "#e4001e";
        } else if ("Draft".equals(meaning)) {
            return "#267db3";
        } else if ("Pending Approval".equals(meaning)) {
            return "#8561c8";
        } else if ("Revised".equals(meaning)) {
            return "#ea9d52";
        } else if ("Withdrawn".equals(meaning)) {
            return "#ed6647";
        } else if ("Posted".equals(meaning)) {
            return "#cacaca";
        }
        return (String)getAttributeInternal(TRANSCOLOR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransColor.
     * @param value value to set the  TransColor
     */
    public void setTransColor(String value) {
        setAttributeInternal(TRANSCOLOR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTarget.
     * @return the TransTarget
     */
    public BigDecimal getTransTarget() {
        return (BigDecimal)getAttributeInternal(TRANSTARGET);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTarget.
     * @param value value to set the  TransTarget
     */
    public void setTransTarget(BigDecimal value) {
        setAttributeInternal(TRANSTARGET, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
