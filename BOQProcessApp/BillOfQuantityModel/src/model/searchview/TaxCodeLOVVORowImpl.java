package model.searchview;

import java.math.BigDecimal;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 27 12:09:26 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TaxCodeLOVVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        TaxRateId {
            protected Object get(TaxCodeLOVVORowImpl obj) {
                return obj.getTaxRateId();
            }

            protected void put(TaxCodeLOVVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Tax {
            protected Object get(TaxCodeLOVVORowImpl obj) {
                return obj.getTax();
            }

            protected void put(TaxCodeLOVVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TaxRateCode {
            protected Object get(TaxCodeLOVVORowImpl obj) {
                return obj.getTaxRateCode();
            }

            protected void put(TaxCodeLOVVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PercentageRate {
            protected Object get(TaxCodeLOVVORowImpl obj) {
                return obj.getPercentageRate();
            }

            protected void put(TaxCodeLOVVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;


        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }

        protected abstract Object get(TaxCodeLOVVORowImpl object);

        protected abstract void put(TaxCodeLOVVORowImpl object, Object value);
    }


    public static final int TAXRATEID = AttributesEnum.TaxRateId.index();
    public static final int TAX = AttributesEnum.Tax.index();
    public static final int TAXRATECODE = AttributesEnum.TaxRateCode.index();
    public static final int PERCENTAGERATE = AttributesEnum.PercentageRate.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TaxCodeLOVVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute TaxRateId.
     * @return the TaxRateId
     */
    public BigDecimal getTaxRateId() {
        return (BigDecimal)getAttributeInternal(TAXRATEID);
    }


    /**
     * Gets the attribute value for the calculated attribute Tax.
     * @return the Tax
     */
    public String getTax() {
        return (String)getAttributeInternal(TAX);
    }


    /**
     * Gets the attribute value for the calculated attribute TaxRateCode.
     * @return the TaxRateCode
     */
    public String getTaxRateCode() {
        return (String)getAttributeInternal(TAXRATECODE);
    }


    /**
     * Gets the attribute value for the calculated attribute PercentageRate.
     * @return the PercentageRate
     */
    public BigDecimal getPercentageRate() {
        return (BigDecimal)getAttributeInternal(PERCENTAGERATE);
    }


    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
