package model.searchview;

import java.math.BigDecimal;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 05 11:03:46 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CertifiedVersionLOVVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CertifiedHeaderId {
            public Object get(CertifiedVersionLOVVORowImpl obj) {
                return obj.getCertifiedHeaderId();
            }

            public void put(CertifiedVersionLOVVORowImpl obj, Object value) {
                obj.setCertifiedHeaderId((BigDecimal)value);
            }
        },
        Version {
            public Object get(CertifiedVersionLOVVORowImpl obj) {
                return obj.getVersion();
            }

            public void put(CertifiedVersionLOVVORowImpl obj, Object value) {
                obj.setVersion((BigDecimal)value);
            }
        },
        ProjectId {
            public Object get(CertifiedVersionLOVVORowImpl obj) {
                return obj.getProjectId();
            }

            public void put(CertifiedVersionLOVVORowImpl obj, Object value) {
                obj.setProjectId((BigDecimal)value);
            }
        },
        CertifiedDocumentNum {
            public Object get(CertifiedVersionLOVVORowImpl obj) {
                return obj.getCertifiedDocumentNum();
            }

            public void put(CertifiedVersionLOVVORowImpl obj, Object value) {
                obj.setCertifiedDocumentNum((String)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(CertifiedVersionLOVVORowImpl object);

        public abstract void put(CertifiedVersionLOVVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CERTIFIEDHEADERID =
        AttributesEnum.CertifiedHeaderId.index();
    public static final int VERSION = AttributesEnum.Version.index();
    public static final int PROJECTID = AttributesEnum.ProjectId.index();
    public static final int CERTIFIEDDOCUMENTNUM =
        AttributesEnum.CertifiedDocumentNum.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CertifiedVersionLOVVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CertifiedHeaderId.
     * @return the CertifiedHeaderId
     */
    public BigDecimal getCertifiedHeaderId() {
        return (BigDecimal)getAttributeInternal(CERTIFIEDHEADERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CertifiedHeaderId.
     * @param value value to set the  CertifiedHeaderId
     */
    public void setCertifiedHeaderId(BigDecimal value) {
        setAttributeInternal(CERTIFIEDHEADERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Version.
     * @return the Version
     */
    public BigDecimal getVersion() {
        return (BigDecimal)getAttributeInternal(VERSION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Version.
     * @param value value to set the  Version
     */
    public void setVersion(BigDecimal value) {
        setAttributeInternal(VERSION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ProjectId.
     * @return the ProjectId
     */
    public BigDecimal getProjectId() {
        return (BigDecimal)getAttributeInternal(PROJECTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ProjectId.
     * @param value value to set the  ProjectId
     */
    public void setProjectId(BigDecimal value) {
        setAttributeInternal(PROJECTID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CertifiedDocumentNum.
     * @return the CertifiedDocumentNum
     */
    public String getCertifiedDocumentNum() {
        return (String)getAttributeInternal(CERTIFIEDDOCUMENTNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CertifiedDocumentNum.
     * @param value value to set the  CertifiedDocumentNum
     */
    public void setCertifiedDocumentNum(String value) {
        setAttributeInternal(CERTIFIEDDOCUMENTNUM, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
