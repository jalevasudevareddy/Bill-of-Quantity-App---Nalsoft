package model.applicationmodule;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

import java.math.BigDecimal;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;

import java.util.Map;

import model.applicationmodule.common.BillofQuantityAM;

import model.searchview.ProjectTaxHeaderValidateVOImpl;
import model.searchview.ProjectTaxLinesValidateVOImpl;

import model.searchview.ProjectTaxLinesValidateVORowImpl;

import model.searchview.TaxLinesDifferenceVOImpl;

import model.transview.TransTaxHdrVOImpl;

import model.transview.TransTaxHdrVORowImpl;

import model.view.BOQHeaderVOImpl;
import model.view.BOQHeaderVORowImpl;
import model.view.BOQLinesVOImpl;
import model.view.BOQLinesVORowImpl;
import model.view.BOQSearchVOImpl;

import model.view.BOQSearchVORowImpl;

import model.view.BOQUploadIntVOImpl;
import model.view.BOQUploadIntVORowImpl;

import model.view.BoqAnalysisReportHdrViewVORowImpl;


import model.view.ProjectTaxHeaderVOImpl;
import model.view.ProjectTaxHeaderVORowImpl;

import model.view.ProjectTaxLinesVOImpl;

import model.view.ProjectTaxLinesVORowImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.model.UploadedFile;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Dec 30 11:34:46 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BillofQuantityAMImpl extends ApplicationModuleImpl implements BillofQuantityAM {
    /**
     * This is the default constructor (do not remove).
     */
    public BillofQuantityAMImpl() {
    }

    private final String DELETE_UPLOADED_EMPLOYEES =
        "begin xxtl_ts_int_validation_pkg.del_ts_int_rows" +
        "(:p_upload_id);end;";


    private Number getUserUploadId() {
        oracle.jbo.domain.Number uploadId = null;

        try {
            Map userMap =
                (Map)ADFContext.getCurrent().getSessionScope().get("userMap");
            if (!userMap.containsKey("uploadId")) {
                SequenceImpl seq =
                    new SequenceImpl("XXBOQ_UPLOAD_SEQUENCE_S", getDBTransaction());
                uploadId = seq.getSequenceNumber();
                ((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).put("uploadId",
                                                                                    uploadId);
            } else {
                uploadId =
                        new oracle.jbo.domain.Number(((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("uploadId").toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return uploadId;
    }

    public Object getCellValue(XSSFCell cell) {
        Object value = null;
        if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) {
            value = cell.getRichStringCellValue().getString();
        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {
            value = cell.getNumericCellValue();
            if (HSSFDateUtil.isCellDateFormatted(cell)) {
                value = cell.getDateCellValue();
            }
        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) {
            value = cell.getBooleanCellValue();
        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) {
            value = null;
        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) {
            value = cell.getErrorCellValue();
        }
        return value;
    }

    public byte[] downloadExcelSheet() {

        BOQHeaderVORowImpl searchRow =
            (BOQHeaderVORowImpl)getBOQHeaderVO1().getCurrentRow();

        byte[] returnData = null;
        try {
            XSSFWorkbook workbook = new XSSFWorkbook();
            // create a new sheet
            XSSFSheet worksheet = workbook.createSheet("Upload BOQ Lines");

            XSSFRow excelrow = null;
            XSSFFont font = workbook.createFont();
            font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            CellStyle cellStyle = workbook.createCellStyle();
            cellStyle.setFont(font);
            // cellStyle.setLocked(true);
            // worksheet.protectSheet("pwd");
            worksheet.createFreezePane(0, 1);
            workbook.getSheetAt(workbook.getActiveSheetIndex()).createFreezePane(0,
                                                                                 3);
            cellStyle.setFillForegroundColor(IndexedColors.LEMON_CHIFFON.getIndex());
            cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);

            DataFormat fmt = workbook.createDataFormat();
            CellStyle textStyle = workbook.createCellStyle();
            textStyle.setDataFormat(fmt.getFormat("@"));
            // worksheet.setDefaultColumnStyle(0, textStyle);

            XSSFFont font1 = workbook.createFont();
            font1.setBoldweight(HSSFFont.BOLDWEIGHT_NORMAL);
            CellStyle cellStyle1 = workbook.createCellStyle();
            cellStyle1.setFont(font1);

            for (int k = 0; k < 11; k++) {
                worksheet.setColumnWidth(k, 4500);

            }
            //  worksheet.setDefaultColumnStyle(1, cellStyle);

            excelrow = (XSSFRow)worksheet.createRow(0);
            XSSFCell cellV0 = excelrow.createCell(0);
            cellV0.setCellValue("BILL OF QUANTITY");
            cellV0.setCellStyle(cellStyle);
            cellV0.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellV1 = excelrow.createCell(1);
            cellV1.setCellValue("Version V1");
            cellV1.setCellStyle(cellStyle);
            cellV1.setCellType(Cell.CELL_TYPE_STRING);
            excelrow = (XSSFRow)worksheet.createRow(1);
            XSSFCell cellV2 = excelrow.createCell(1);
            cellV2.setCellValue("BUSINESS UNIT:");
            cellV2.setCellStyle(cellStyle);
            cellV2.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellV3 = excelrow.createCell(2);
            cellV3.setCellValue(searchRow != null ? searchRow.getBuName() :
                                "");
            cellV3.setCellStyle(cellStyle);
            cellV3.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellV4 = excelrow.createCell(5);
            cellV4.setCellValue("PROJECT NUMBER:");
            cellV4.setCellStyle(cellStyle);
            cellV4.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellV5 = excelrow.createCell(6);
            cellV5.setCellValue(searchRow != null ?
                                searchRow.getProjectNumber() : "");
            cellV5.setCellStyle(cellStyle);
            cellV5.setCellType(Cell.CELL_TYPE_STRING);

            excelrow = (XSSFRow)worksheet.createRow(2);

            XSSFCell cellA0 = excelrow.createCell(0);
            cellA0.setCellValue("BILL NUMBER");
            cellA0.setCellStyle(cellStyle);
            cellA0.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellA1 = excelrow.createCell(1);
            cellA1.setCellValue("PAGE NUMBER");
            cellA1.setCellStyle(cellStyle);
            cellA1.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellA2 = excelrow.createCell(2);
            cellA2.setCellValue("ITEM NUMBER");
            cellA2.setCellStyle(cellStyle);
            cellA2.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellA3 = excelrow.createCell(3);
            cellA3.setCellValue("DESCRIPTION");
            cellA3.setCellStyle(cellStyle);
            cellA3.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellA4 = excelrow.createCell(4);
            cellA4.setCellValue("BOQ QUANTITY");
            cellA4.setCellStyle(cellStyle);
            cellA4.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellA5 = excelrow.createCell(5);
            cellA5.setCellValue("UOM");
            cellA5.setCellStyle(cellStyle);
            cellA5.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellA6 = excelrow.createCell(6);
            cellA6.setCellValue("RATE");
            cellA6.setCellStyle(cellStyle);
            cellA6.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellA7 = excelrow.createCell(7);
            cellA7.setCellValue("ESTIMATED QUANTITY");
            cellA7.setCellStyle(cellStyle);
            cellA7.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellA8 = excelrow.createCell(8);
            cellA8.setCellValue("STRUCTURE");
            cellA8.setCellStyle(cellStyle);
            cellA8.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellA9 = excelrow.createCell(9);
            cellA9.setCellValue("CONTRACT TYPE");
            cellA9.setCellStyle(cellStyle);
            cellA9.setCellType(Cell.CELL_TYPE_STRING);
            XSSFCell cellA10 = excelrow.createCell(10);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            try {
                workbook.write(bos);
                bos.close();
            } catch (IOException e) {
            }
            returnData = bos.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return returnData;
    }

    public String uploadXLFile(UploadedFile uploadedFile) {
        Number uploadId = getUserUploadId();
        try {
            if (uploadedFile != null) {
                InputStream inputStream = uploadedFile.getInputStream();
                XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
                inputStream.close();
                XSSFSheet sheet = workbook.getSheetAt(0);
                Iterator<Row> rowIterator = sheet.iterator();
                int i = 0;
                for (i = 0; i < 3; i++) {
                    Row HdrRow = rowIterator.next();
                    if (i == 0 &&
                        !("Version V1".equals(HdrRow.getCell(1).getStringCellValue()))) {
                        return "Verion mismatch. Please download latest template";
                    }
                }
                while (rowIterator.hasNext()) {
                    Row row = rowIterator.next();

                    BOQUploadIntVORowImpl uploadRow =
                        (BOQUploadIntVORowImpl)getBOQUploadIntVO1().createRow();
                    uploadRow.setUploadId(uploadId.bigDecimalValue());
                    for (int j = 0; j <= 9; j++) {
                        Cell cell = null;
                        cell = row.getCell(j);
                        Object cellValue = null;
                        if (cell != null) {
                            cellValue = getCellValue((XSSFCell)cell);
                            if (j == 2 &&
                                cellValue == null) // if bill number is null, that row is not considered.
                                break;
                            if (cellValue != null) {
                                try {
                                    switch (j) {
                                    case 0:
                                        uploadRow.setBillNumber(cellValue.toString());
                                        break;
                                    case 1:
                                        uploadRow.setPageNumber(cellValue.toString());
                                        break;
                                    case 2:
                                        uploadRow.setItemNumber(cellValue.toString());
                                        break;
                                    case 3:
                                        uploadRow.setItemDescription(cellValue.toString());
                                        break;
                                    case 4:
                                        uploadRow.setBoqQuantity(new BigDecimal(cellValue.toString()));
                                        break;
                                    case 5:
                                        uploadRow.setUom(cellValue.toString());
                                        break;
                                    case 6:
                                        uploadRow.setBoqRate(new BigDecimal(cellValue.toString()));
                                        break;
                                    case 7:
                                        uploadRow.setEstimatedQuantity(new BigDecimal(cellValue.toString()));
                                        break;
                                    case 8:
                                        uploadRow.setStructureCode(cellValue.toString());
                                        break;
                                    case 9:
                                        uploadRow.setContractType(cellValue.toString());
                                        break;

                                    default:
                                        break;
                                    }
                                } catch (Exception e) {
                                    workbook.close();
                                    return "Invalid values at row no: " +
                                        (i + 1) + " column no: " + (j + 1) +
                                        " error Message:  " + e.getMessage();
                                }
                            }
                        } //END IF
                        else {
                            //Cell value is null
                            if (!(j == 3 || j == 9)) {
                                workbook.close();
                                return "Required values at row no: " +
                                    (i + 1) + " column no: " + (j + 1) + "";
                            }

                        }
                    } //END FOR

                    getBOQUploadIntVO1().insertRow(uploadRow);

                    i++;
                }
                workbook.close();
            }

        } catch (Exception e) {
            return e.getMessage();
        }

        this.getDBTransaction().commit();

        return "UPLOADED";
    }


    public String validateBOQUploadDetails() {
        String msg = null;
        BOQHeaderVORowImpl hdrRow =
            (BOQHeaderVORowImpl)getBOQHeaderVO1().getCurrentRow();
        if (hdrRow != null) {
            Map paramsMap = new HashMap();
            paramsMap.put("BuId", hdrRow.getBuId());
            paramsMap.put("ProjectId", hdrRow.getProjectId());
            paramsMap.put("UploadId", getUserUploadId());

            BOQUploadsAMImpl uploadAM = (BOQUploadsAMImpl)getBOQUploadsAM1();
            String returnMsg = uploadAM.validateBOQUpload(paramsMap);
            if (returnMsg != null)
                msg = returnMsg;
            else
                msg = "NOMSG";
        } else
            msg = "NOHDR";
        return msg;
    }

    public void clearUploadedEmployees() {

        CallableStatement st = null;
        try {
            st =
 getDBTransaction().createCallableStatement(DELETE_UPLOADED_EMPLOYEES, 0);
            st.setLong("p_upload_id", getUserUploadId().longValue());
            st.execute();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                st.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Container's getter for CommonUtilsAM1.
     * @return CommonUtilsAM1
     */
    public ApplicationModuleImpl getCommonUtilsAM1() {
        return (ApplicationModuleImpl)findApplicationModule("CommonUtilsAM1");
    }

    /**
     * Container's getter for BOQHeaderVO1.
     * @return BOQHeaderVO1
     */
    public ViewObjectImpl getBOQHeaderVO1() {
        return (ViewObjectImpl)findViewObject("BOQHeaderVO1");
    }

    /**
     * Container's getter for BOQLinesVO1.
     * @return BOQLinesVO1
     */
    public ViewObjectImpl getBOQLinesVO1() {
        return (ViewObjectImpl)findViewObject("BOQLinesVO1");
    }

    /**
     * Container's getter for BOQHdrToLinesVL1.
     * @return BOQHdrToLinesVL1
     */
    public ViewLinkImpl getBOQHdrToLinesVL1() {
        return (ViewLinkImpl)findViewLink("BOQHdrToLinesVL1");
    }

    /**
     * Container's getter for BOQLinesVO2.
     * @return BOQLinesVO2
     */
    public ViewObjectImpl getBOQLinesVO2() {
        return (ViewObjectImpl)findViewObject("BOQLinesVO2");
    }

    /**
     * Container's getter for BOQLinesToChildVL1.
     * @return BOQLinesToChildVL1
     */
    public ViewLinkImpl getBOQLinesToChildVL1() {
        return (ViewLinkImpl)findViewLink("BOQLinesToChildVL1");
    }

    /**
     * Container's getter for BOQSearchVO1.
     * @return BOQSearchVO1
     */
    public BOQSearchVOImpl getBOQSearchVO1() {
        return (BOQSearchVOImpl)findViewObject("BOQSearchVO1");
    }

    public void editDocument() {
        //        BOQHeaderVOImpl hdrVO = getBOQHeaderVO1();
        getBOQHeaderVO1().executeQuery();
        //        BOQSearchVOImpl searchVO = getBOQSearchVO1();
        oracle.jbo.Row currentRow = getBOQSearchVO1().getCurrentRow();
        if (currentRow != null) {
            Key masterkey =
                new Key(new Object[] { currentRow.getAttribute("HeaderId") });
            getBOQHeaderVO1().findAndSetCurrentRowByKey(masterkey, 0);
        }
    }

    public void cancelDocument() {
        getBOQHeaderVO1().getCurrentRow().remove();
        getBOQHeaderVO1().executeQuery();
    }

    public void createDocument() {
        //        BOQSearchVOImpl searchVO = getBOQSearchVO1();
        BOQHeaderVORowImpl searchRow =
            (BOQHeaderVORowImpl)getBOQHeaderVO1().getCurrentRow();
        if (searchRow != null) {
            Long hdrId = new Long(searchRow.getHeaderId().toString());
            getBOQHeaderVO1().executeQuery();
            Key masterkey = new Key(new Object[] { hdrId });
            getBOQHeaderVO1().findAndSetCurrentRowByKey(masterkey, 0);
        }

        //  CommonUtilsAMImpl utilsAmImpl = (CommonUtilsAMImpl)getCommonUtilsAM1();
        //  String docNum =
        //      utilsAmImpl.genDocNumber(hdrRow.getOrganizationCode(), hdrRow.getOrganizationId().longValue(),
        //                              hdrRow.getBuId().longValue(), "**Value");
        // hdrRow.setMirNumber(docNum);
        //hdrRow.setRequestStatus("Draft");
    }

    public void createHeaderRow() {
        //        BOQHeaderVOImpl searchVO = getBOQHeaderVO1();
        BOQHeaderVORowImpl searchRow =
            (BOQHeaderVORowImpl)getBOQHeaderVO1().createRow();
        getBOQHeaderVO1().insertRow(searchRow);
    }

    public void createBOQParantLine() {
        BOQHeaderVORowImpl hdrRow =
            (BOQHeaderVORowImpl)getBOQHeaderVO1().getCurrentRow();
        if (hdrRow != null) {
            //            oracle.jbo.Row[] parantRows =
            //                hdrRow.getBOQLinesVO().getAllRowsInRange();
            //            Long lineId = 0L;
            //            if (parantRows.length > 0) {
            //                for (int i = 0; i < parantRows.length; i++) {
            //                    BOQLinesVORowImpl parantRow =
            //                        (BOQLinesVORowImpl)parantRows[i];
            //                    if (parantRow.getLineId() != null) {
            //                        if (lineId < (parantRow.getLineId().longValue())) {
            //                            lineId = parantRow.getLineId().longValue();
            //                        }
            //                    }
            //                }
            //            }
            BOQLinesVORowImpl childRow =
                (BOQLinesVORowImpl)getBOQLinesVO1().createRow();
            //            Long lineId = childRow.getTransMaxLineId().longValue();
            //            childRow.setLineId(new BigDecimal(lineId + 1));
            childRow.setSequenceNumner(new BigDecimal(0));
            childRow.setProjectId(hdrRow.getProjectId());
            childRow.setBuId(hdrRow.getBuId());
            getBOQLinesVO1().insertRow(childRow);
        }
    }

    public void createBOQChildLine() {
        BOQHeaderVORowImpl hdrRow =
            (BOQHeaderVORowImpl)getBOQHeaderVO1().getCurrentRow();
        BOQLinesVORowImpl mainParantRow =
            (BOQLinesVORowImpl)getBOQLinesVO1().getCurrentRow();
        if (hdrRow != null) {
            //            oracle.jbo.Row[] parantRows =
            //                hdrRow.getBOQLinesVO().getAllRowsInRange();
            //            Long lineId = 0L;
            //            if (parantRows.length > 0) {
            //                for (int i = 0; i < parantRows.length; i++) {
            //                    BOQLinesVORowImpl parantRow =
            //                        (BOQLinesVORowImpl)parantRows[i];
            //                    if (parantRow.getLineId() != null) {
            //                        if (lineId < (parantRow.getLineId().longValue())) {
            //                            lineId = parantRow.getLineId().longValue();
            //                        }
            //                    }
            //
            //                }
            //            }
            BOQLinesVORowImpl childRow =
                (BOQLinesVORowImpl)getBOQLinesVO2().createRow();
            //            Long lineId = childRow.getTransMaxLineId().longValue();
            //            childRow.setLineId(new BigDecimal(lineId + 1L));
            childRow.setParentLineId(mainParantRow.getLineId());
            getBOQLinesVO2().insertRow(childRow);

        }
    }

    public void splitBOQLine() {
        BOQLinesVORowImpl mainParantRow =
            (BOQLinesVORowImpl)getBOQLinesVO1().getCurrentRow();
        Long HdrId = new Long(mainParantRow.getHeaderId().longValue());
        Long LineId = new Long(mainParantRow.getLineId().longValue());
        getBOQLinesVO1().executeQuery();
        Key masterkey = new Key(new Object[] { HdrId, LineId });
        getBOQLinesVO1().findAndSetCurrentRowByKey(masterkey, 0);
        BOQHeaderVORowImpl hdrRow =
            (BOQHeaderVORowImpl)getBOQHeaderVO1().getCurrentRow();
        mainParantRow = (BOQLinesVORowImpl)getBOQLinesVO1().getCurrentRow();
        Long seqNo = mainParantRow.getSequenceNumner().longValue() + 1L;
        mainParantRow.setSequenceNumner(new BigDecimal(seqNo));
        //            this.getTransaction().commit();
        if (hdrRow != null) {
            //            oracle.jbo.Row[] parantRows =
            //                hdrRow.getBOQLinesVO().getAllRowsInRange();
            //            Long lineId = 0L;
            //            if (parantRows.length > 0) {
            //                for (int i = 0; i < parantRows.length; i++) {
            //                    BOQLinesVORowImpl parantRow =
            //                        (BOQLinesVORowImpl)parantRows[i];
            //                    if (parantRow.getLineId() != null) {
            //                        if (lineId < (parantRow.getLineId().longValue())) {
            //                            lineId = parantRow.getLineId().longValue();
            //                        }
            //                    }
            //
            //                }
            //            }
            BOQLinesVORowImpl childRow =
                (BOQLinesVORowImpl)getBOQLinesVO2().createRow();
            //            Long lineId = childRow.getTransMaxLineId().longValue();
            //            childRow.setLineId(new BigDecimal(lineId + 1L));
            childRow.setParentLineId(mainParantRow.getLineId());
            childRow.setBillNumber(mainParantRow.getBillNumber());
            childRow.setPageNumber(mainParantRow.getPageNumber());
            childRow.setItemNumber(mainParantRow.getItemNumber() + "-" +
                                   (seqNo));
            childRow.setItemDescription(mainParantRow.getItemDescription());
            childRow.setUom(mainParantRow.getUom());
            childRow.setProjectId(mainParantRow.getProjectId());
            childRow.setBuId(mainParantRow.getBuId());
            childRow.setContractType(mainParantRow.getContractType());
            getBOQLinesVO2().insertRow(childRow);

        }
    }

    public String validateBOQLines() {
        BOQHeaderVORowImpl hdrRow =
            (BOQHeaderVORowImpl)getBOQHeaderVO1().getCurrentRow();
        if (hdrRow != null) {
            oracle.jbo.Row[] parantRows =
                hdrRow.getBOQLinesVO().getAllRowsInRange();
            if (parantRows.length > 0) {
                for (int i = 0; i < parantRows.length; i++) {
                    BOQLinesVORowImpl parantRow =
                        (BOQLinesVORowImpl)parantRows[i];
                    if (parantRow.getEntity(0).getEntityState() != 1) {
                        if (parantRow.getHeaderId() != null &&
                            parantRow.getLineId() != null &&
                            parantRow.getTransTotalAmt() != null) {
                            if (parantRow.getStructureId() == null) {
                                return "Structure not assigned to BOQ Line.";
                            }
                            if (parantRow.getParentLineId() != null) {
                                RowQualifier rq =
                                    new RowQualifier("HeaderId=" +
                                                     parantRow.getHeaderId() +
                                                     " AND LineId=" +
                                                     parantRow.getParentLineId());
                                oracle.jbo.Row[] rows =
                                    getBOQLinesVO1().getFilteredRows(rq);
                                if (rows.length == 1) {
                                    if (rows[0].getAttribute("TransTotalAmt") !=
                                        null) {
                                        Double amt =
                                            Double.parseDouble(rows[0].getAttribute("TransTotalAmt").toString());
                                        String message =
                                            validateBOQAmounts(parantRow.getHeaderId(),
                                                               parantRow.getParentLineId(),
                                                               amt);
                                        if ("Error".equals(message)) {
                                            return "Net Value of Split Amount is More than Main BOQ Total Amount.";
                                        }
                                    }
                                }
                            } else {
                                String message =
                                    validateBOQAmounts(parantRow.getHeaderId(),
                                                       parantRow.getLineId(),
                                                       parantRow.getTransTotalAmt().doubleValue());
                                if ("Error".equals(message)) {
                                    return "Net Value of Split Amount is More than Main BOQ Total Amount.";
                                }
                            }
                        }

                    }
                }
            }
        }
        return "";
    }

    public String validateBOQAmounts(BigDecimal hdrId, BigDecimal parantLineId,
                                     Double amount) {
        RowQualifier rq =
            new RowQualifier("HeaderId=" + hdrId + " AND ParentLineId=" +
                             parantLineId);
        oracle.jbo.Row[] childRows = getBOQLinesVO2().getFilteredRows(rq);
        if (childRows.length > 0 && amount != null) {
            Double linesAmtSum = 0.0;
            for (int i = 0; i < childRows.length; i++) {
                BOQLinesVORowImpl childRow = (BOQLinesVORowImpl)childRows[i];
                if (childRow.getBoqQuantity() != null &&
                    childRow.getBoqRate() != null) {
                    linesAmtSum =
                            linesAmtSum + (childRow.getBoqQuantity().doubleValue() *
                                           childRow.getBoqRate().doubleValue());
                }

            }
            if (amount.compareTo(linesAmtSum) < 0) {
                return "Error";
            }
        }
        return "";
    }

    public void deleteBOQLine() {
        BOQLinesVORowImpl row =
            (BOQLinesVORowImpl)getBOQLinesVO1().getCurrentRow();
        Long HeaderId = row.getHeaderId().longValue();
        Long lineId = row.getLineId().longValue();
        getBOQLinesVO2().executeQuery();
        RowQualifier rq =
            new RowQualifier("HeaderId=" + HeaderId + " AND ParentLineId=" +
                             lineId);
        oracle.jbo.Row[] childrows = getBOQLinesVO2().getFilteredRows(rq);
        if (childrows.length > 0) {
            for (int i = (childrows.length - 1); i >= 0; i--) {
                childrows[i].remove();
            }
        }
        getBOQLinesVO1().removeCurrentRow();
    }

    public void deleteBOQChildLine() {
        if (getBOQLinesVO2().getCurrentRow() != null) {
            BOQLinesVORowImpl row =
                (BOQLinesVORowImpl)getBOQLinesVO1().getCurrentRow();
            Long seqNumber = row.getSequenceNumner().longValue();
            BOQLinesVORowImpl childrow =
                (BOQLinesVORowImpl)getBOQLinesVO2().getCurrentRow();
            String ItemNumber = childrow.getItemNumber();
            if (ItemNumber.contains("-" + seqNumber.toString())) {
                row.setSequenceNumner(new BigDecimal(seqNumber - 1));
            }
            getBOQLinesVO2().removeCurrentRow();
        }
    }

    public void callpkgForAMEProcessSubmit() {
        CommonUtilsAMImpl commonAM = (CommonUtilsAMImpl)getCommonUtilsAM1();
        BOQHeaderVORowImpl hdrRow =
            (BOQHeaderVORowImpl)getBOQHeaderVO1().getCurrentRow();
        Long hdrId = new Long(hdrRow.getHeaderId().longValue());
        if (hdrRow != null) {
            Map paramsMap = new HashMap();
            try {
                paramsMap.put("docId", new Number(hdrRow.getHeaderId()));
            } catch (SQLException e) {
            }
            paramsMap.put("docTypeId", new Number(5));
            paramsMap.put("ActionCode", "Submit");
            paramsMap.put("currEmpId", commonAM.getCurrentEmployeeId());
            paramsMap.put("remarks", "");
            paramsMap.put("docNum", hdrRow.getHeaderId());
            String msg = commonAM.callAMEProcess(paramsMap);

            //            getSubcontractAgreementsHdrVO1().executeQuery();
            //            ViewObjectImpl Custheader = getSubcontractAgreementsHdrVO1();
            //            Key masterkey = new Key(new Object[] { hdrId });
            //            Custheader.findAndSetCurrentRowByKey(masterkey, 0);
            if (msg != null) {
                submitDocFor("In Process");
                if ("Finally Approved".equals(msg)) { //FYI approval only
                    submitDocFor("Approved");
                }
            }
        }
    }

    public void submitDocFor(String toDocStatus) {
        if (getBOQHeaderVO1().getCurrentRow() != null) {
            BOQHeaderVORowImpl hdrRow =
                (BOQHeaderVORowImpl)getBOQHeaderVO1().getCurrentRow();
            //            hdrRow.setStatus(toDocStatus);
            if ("Approved".equals(toDocStatus)) {
                CommonUtilsAMImpl commanAM =
                    (CommonUtilsAMImpl)getCommonUtilsAM1();
                String userName = commanAM.getCurrentEmployeeUserName();
                //                hdrRow.setApprovedBy(userName);
                java.sql.Timestamp datetime =
                    new java.sql.Timestamp(System.currentTimeMillis());
                oracle.jbo.domain.Date daTime =
                    new oracle.jbo.domain.Date(datetime);
                //                hdrRow.setApprovedDate(daTime);
            }
        }
    }


    /**
     * Container's getter for BOQUploadIntVO1.
     * @return BOQUploadIntVO1
     */
    public ViewObjectImpl getBOQUploadIntVO1() {
        return (ViewObjectImpl)findViewObject("BOQUploadIntVO1");
    }

    /**
     * Container's getter for BOQUploadsAM1.
     * @return BOQUploadsAM1
     */
    public ApplicationModuleImpl getBOQUploadsAM1() {
        return (ApplicationModuleImpl)findApplicationModule("BOQUploadsAM1");
    }


    public String validateProject() {
        BOQHeaderVORowImpl hdrRow =
            (BOQHeaderVORowImpl)getBOQHeaderVO1().getCurrentRow();
        if (hdrRow != null && hdrRow.getProjectId() != null &&
            hdrRow.getBuId() != null) {
            RowQualifier rq =
                new RowQualifier("BuId=" + hdrRow.getBuId() + " AND ProjectId=" +
                                 hdrRow.getProjectId());
            oracle.jbo.Row[] rows = getBOQHeaderVO1().getFilteredRows(rq);
            if (rows.length > 1) {
                return "Error";
            }
        }
        return "";
    }

    public String createTransTaxHeaderRow() {
        String message = "";
        try {
            message = "Success";
            TransTaxHdrVORowImpl row =
                (TransTaxHdrVORowImpl)getTransTaxHdrVO1().createRow();
            getTransTaxHdrVO1().insertRow(row);
        } catch (Exception e) {
            message = e.getMessage();
            e.printStackTrace();
        }
        return message;
    }

    public String createTaxHeaderRow() {
        String message = "";
        try {
            message = "Success";
            TransTaxHdrVORowImpl row =
                (TransTaxHdrVORowImpl)getTransTaxHdrVO1().getCurrentRow();
                
                if(row.getTransTaxFlag().equalsIgnoreCase("N")){
                    return "Tax flag is not enabled for given Business Unit.";
                }
            if (row.getTransCustomerId() != null) {
                getProjectTaxHeaderValidateVO1().setNamedWhereClauseParam("p_contract_id",
                                                                          row.getTransContractId());
                getProjectTaxHeaderValidateVO1().setApplyViewCriteriaName("ProjectTaxHeaderValidateVOCriteria");
                getProjectTaxHeaderValidateVO1().executeQuery();
                if (getProjectTaxHeaderValidateVO1().first() == null) {
                    ProjectTaxHeaderVORowImpl hdrRow =
                        (ProjectTaxHeaderVORowImpl)getProjectTaxHeaderVO1().createRow();
                    hdrRow.setBuId(row.getTransBuId());
                    hdrRow.setContractId(row.getTransContractId());
                    hdrRow.setCustomerId(row.getTransCustomerId());
                    BigDecimal hdrId = hdrRow.getHeaderId();
                    //            hdrRow.setTransBuName(row.getTransBuName());
                    //            hdrRow.setTransProjectName(row.getTransProjectName());
                    //            hdrRow.setTransCustomerName(row.getTransCustomerName());
                    getDBTransaction().commit();
                    getProjectTaxHeaderVO1().setNamedWhereClauseParam("p_hdr_id",
                                                                      hdrId);
                    getProjectTaxHeaderVO1().executeQuery();
                    //                    getProjectTaxLinesVO1().executeQuery();
                } else {
                    message =
                            "Tax Setup already exists for the Selected Contract";
                }
            } else {
                message =
                        "To setup tax for a Contract atleast one customer should be associated to it.";
            }
        } catch (Exception e) {
            message = e.getMessage();
            e.printStackTrace();
        }
        return message;
    }

    public String createTaxLines() {
        String message = "";
        try {
            message = "Success";
            String[] particulars =
            { "VOWD", "MAT_AT_SITE", "ADV", "ADV_RECV", "RET", "OTH_DED" };
            ProjectTaxLinesVOImpl linesVO = getProjectTaxLinesVO1();
            for (String str : particulars) {
                ProjectTaxLinesVORowImpl linesRow =
                    (ProjectTaxLinesVORowImpl)linesVO.createRow();
                linesRow.setParticulars(str);
                linesVO.insertRow(linesRow);
            }
        } catch (Exception e) {
            message = e.getMessage();
            e.printStackTrace();
        }
        return message;
    }

    public String saveLines() {
        String message = "";
        try {
            message = "Success";
            ProjectTaxLinesVOImpl linesVO = getProjectTaxLinesVO1();
            RowSetIterator allRows = linesVO.createRowSetIterator(null);
            while (allRows.hasNext()) {
                ProjectTaxLinesVORowImpl currRow =
                    (ProjectTaxLinesVORowImpl)allRows.next();
                if (currRow.getEndDate() != null &&
                    currRow.getStartDate().compareTo(currRow.getEndDate()) ==
                    1) {
                    return "End date should be always greater than start date for the " +
                        currRow.getTransBillCategory();
                }
                ProjectTaxLinesValidateVOImpl validVO =
                    getProjectTaxLinesValidateVO1();
                if (currRow.getEntity(0).getEntityState() == 0) {
                    validVO.setApplyViewCriteriaName(null);
                    validVO.executeQuery();
                    validVO.setApplyViewCriteriaName("ProjectTaxLinesValidateVOCriteria");
                    validVO.setNamedWhereClauseParam("p_header_id",
                                                     currRow.getHeaderId());
                    validVO.setNamedWhereClauseParam("p_particulars",
                                                     currRow.getParticulars());
                    validVO.setNamedWhereClauseParam("p_line_id",
                                                     currRow.getLineId());
                    validVO.executeQuery();
                    RowSetIterator filteredRows =
                        validVO.createRowSetIterator(null);
                    while (filteredRows.hasNext()) {
                        ProjectTaxLinesValidateVORowImpl currFilRow =
                            (ProjectTaxLinesValidateVORowImpl)filteredRows.next();
                        if (currFilRow.getEndDate() == null) {
                            return "An active or greater record exists for the " +
                                currRow.getTransBillCategory();
                        } else if (currFilRow.getEndDate().compareTo(currRow.getStartDate()) >=
                                   0) {
                            return "An active or greater record exists for the " +
                                currRow.getTransBillCategory();
                        }
                    }
                }
            }
        } catch (Exception e) {
            message = e.getMessage();
            e.printStackTrace();
        }
        return message;
    }

    public String deleteTaxHeaderDoc() {
        String message = "";
        try {
            message = "Success";
            Object hdrId =
                ADFContext.getCurrent().getPageFlowScope().get("HeaderId");
            getProjectTaxHeaderVO1().setNamedWhereClauseParam("p_hdr_id",
                                                              hdrId);
            getProjectTaxHeaderVO1().executeQuery();
            while (getProjectTaxLinesVO2().hasNext()) {
                getProjectTaxLinesVO2().remove();
            }
            getProjectTaxHeaderVO1().remove();
            getProjectTaxHeaderVO1().setNamedWhereClauseParam("p_hdr_id",
                                                              null);
            getProjectTaxHeaderVO1().applyViewCriteria(null);
            getProjectTaxHeaderVO1().executeQuery();
        } catch (Exception e) {
            message = e.getMessage();
        }
        return message;
    }

    public String refreshTaxHeaderAndLines(BigDecimal HeaderId) {
        try {
            getProjectTaxHeaderVO1().setNamedWhereClauseParam("p_hdr_id",
                                                              HeaderId);
            getProjectTaxHeaderVO1().executeQuery();
            getProjectTaxLinesVO1().executeQuery();
        } catch (Exception e) {
            return e.getMessage();
        }
        return "Success";
    }

    /**
     * Container's getter for ProjectTaxHeaderVO1.
     * @return ProjectTaxHeaderVO1
     */
    public ProjectTaxHeaderVOImpl getProjectTaxHeaderVO1() {
        return (ProjectTaxHeaderVOImpl)findViewObject("ProjectTaxHeaderVO1");
    }

    /**
     * Container's getter for TransTaxHdrVO1.
     * @return TransTaxHdrVO1
     */
    public TransTaxHdrVOImpl getTransTaxHdrVO1() {
        return (TransTaxHdrVOImpl)findViewObject("TransTaxHdrVO1");
    }

    /**
     * Container's getter for ProjectTaxLinesVO1.
     * @return ProjectTaxLinesVO1
     */
    public ProjectTaxLinesVOImpl getProjectTaxLinesVO1() {
        return (ProjectTaxLinesVOImpl)findViewObject("ProjectTaxLinesVO1");
    }

    /**
     * Container's getter for ProjectTaxHeaderToLinesVL1.
     * @return ProjectTaxHeaderToLinesVL1
     */
    public ViewLinkImpl getProjectTaxHeaderToLinesVL1() {
        return (ViewLinkImpl)findViewLink("ProjectTaxHeaderToLinesVL1");
    }

    /**
     * Container's getter for ProjectTaxLinesValidateVO1.
     * @return ProjectTaxLinesValidateVO1
     */
    public ProjectTaxLinesValidateVOImpl getProjectTaxLinesValidateVO1() {
        return (ProjectTaxLinesValidateVOImpl)findViewObject("ProjectTaxLinesValidateVO1");
    }


    /**
     * Container's getter for ProjectTaxHeaderValidateVO1.
     * @return ProjectTaxHeaderValidateVO1
     */
    public ProjectTaxHeaderValidateVOImpl getProjectTaxHeaderValidateVO1() {
        return (ProjectTaxHeaderValidateVOImpl)findViewObject("ProjectTaxHeaderValidateVO1");
    }

    /**
     * Container's getter for ProjectTaxLinesVO2.
     * @return ProjectTaxLinesVO2
     */
    public ProjectTaxLinesVOImpl getProjectTaxLinesVO2() {
        return (ProjectTaxLinesVOImpl)findViewObject("ProjectTaxLinesVO2");
    }

    /**
     * Container's getter for ProjectTaxHeaderToLinesVL2.
     * @return ProjectTaxHeaderToLinesVL2
     */
    public ViewLinkImpl getProjectTaxHeaderToLinesVL2() {
        return (ViewLinkImpl)findViewLink("ProjectTaxHeaderToLinesVL2");
    }

    /**
     * Container's getter for TaxLinesDifferenceVO1.
     * @return TaxLinesDifferenceVO1
     */
    public TaxLinesDifferenceVOImpl getTaxLinesDifferenceVO1() {
        return (TaxLinesDifferenceVOImpl)findViewObject("TaxLinesDifferenceVO1");
    }
}
