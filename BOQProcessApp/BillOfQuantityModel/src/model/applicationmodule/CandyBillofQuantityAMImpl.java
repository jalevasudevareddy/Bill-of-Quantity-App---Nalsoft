package model.applicationmodule;

//import com.oracle.xmlns.adf.svc.types.AmountType;
//import com.oracle.xmlns.adf.svc.types.MeasureType;
//import com.oracle.xmlns.apps.projects.control.budgetsandforecasts.budgetservicev2.ProjectBudgetInput;
//import com.oracle.xmlns.apps.projects.control.budgetsandforecasts.budgetservicev2.custom.ProjectBudgetServiceCustom;
//import com.oracle.xmlns.apps.projects.control.budgetsandforecasts.budgetservicev2.types.CreateBudget;
//import com.oracle.xmlns.apps.projects.foundation.projectdefinition.publicservice.maintainprojectv2.ObjectFactory;
//import com.oracle.xmlns.apps.projects.foundation.projectdefinition.publicservice.maintainprojectv2.ProjectParam;
//import com.oracle.xmlns.apps.projects.foundation.projectdefinition.publicservice.maintainprojectv2.ProjectTask;
//import com.oracle.xmlns.apps.projects.foundation.projectdefinition.publicservice.maintainprojectv2.custom.ProjectTaskServiceCustom;
//import com.oracle.xmlns.apps.projects.foundation.projectdefinition.publicservice.maintainprojectv2.types.UpdateFinancialTaskStructure;
//
import java.io.ByteArrayOutputStream;

import java.io.IOException;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.GregorianCalendar;

import java.util.HashMap;
import java.util.List;

import java.util.Map;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import model.applicationmodule.common.CandyBillofQuantityAM;

import model.searchview.BOQBaslineValidateVOImpl;


import model.searchview.BOQHeaderVersionLOVVORowImpl;

import model.searchview.BOQMaxValidationHeaderIdVOImpl;

import model.searchview.BOQMaxValidationHeaderIdVORowImpl;

import model.searchview.BoqExportPrintReportVOImpl;
import model.searchview.BoqExportPrintReportVORowImpl;

import model.services.ExternalReportCustom;

import model.view.AttachmentsVOImpl;
import model.view.BOQCostingDetailsHeaderVORowImpl;
import model.view.BOQHeaderVORowImpl;
import model.view.BoqAnalysisReportHdrViewVOImpl;
import model.view.BoqAnalysisReportHdrViewVORowImpl;
import model.view.BoqAnalysisReportLinesViewVOImpl;
import model.view.BoqAnalysisReportLinesViewVORowImpl;
import model.view.BoqValidationHeaderVOImpl;
import model.view.BoqValidationHeaderVORowImpl;
import model.view.BudgetWSVOImpl;
import model.view.BudgetWSVORowImpl;
import model.view.CandyBOQCostCodesVOImpl;
import model.view.CandyBOQHeaderVOImpl;
import model.view.CandyBOQHeaderVORowImpl;
import model.view.CandyBOQLinesVOImpl;
import model.view.CandyBOQResourcesVOImpl;
import model.view.CandyBOQSearchVOImpl;

import model.view.CandyTasksWSVOImpl;
import model.view.CandyTasksWSVORowImpl;
import model.view.PlanningScheduleHdrVOImpl;
import model.view.PlanningScheduleHdrVORowImpl;
import model.view.ProjectBudgetCCScrVOImpl;
import model.view.ProjectBudgetCCScrVORowImpl;
import model.view.TasksWSVORowImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFDataFormat;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Mar 13 15:43:59 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CandyBillofQuantityAMImpl extends ApplicationModuleImpl implements CandyBillofQuantityAM {
    /**
     * This is the default constructor (do not remove).
     */
    public CandyBillofQuantityAMImpl() {
    }
    private final String CREATE_BASELINE =
        "begin xxboq_boq_candy_pkg.CREATE_BASELINE_PRC" +
        "(:P_BOQ_HEADER_ID,:p_user_name,:P_MSG);end;";

    private final String CREATE_BUDGET =
        "begin xxboq_interfaces_pkg.create_budget_prc" +
        "(:P_BOQ_HEADER_ID,:p_user_name,:P_MSG);end;";

    private final String CREATE_BUDGET_LINES =
        "begin xxboq_interfaces_pkg.create_budget_lines_prc" +
        "(:P_BOQ_HEADER_ID,:p_user_name,:P_MSG);end;";

    private final String CREATE_FINANCIAL_PLAN =
        "begin xxboq_interfaces_pkg.create_financial_plan_prc" +
        "(:P_BOQ_HEADER_ID,:p_user_name,:P_MSG);end;";

    public String createBaseline() {
        String message = null;
        try {
            message = "Success";
            CandyBOQHeaderVOImpl hdrVO = getCandyBOQHeaderVO1();
            CandyBOQHeaderVORowImpl hdrRow =
                (CandyBOQHeaderVORowImpl)hdrVO.getCurrentRow();
            getBOQMaxValidationHeaderIdVO1().setNamedWhereClauseParam("p_contract_id",
                                                                      hdrRow.getContractId());
            getBOQMaxValidationHeaderIdVO1().executeQuery();
            BOQMaxValidationHeaderIdVORowImpl VersionRow =
                (BOQMaxValidationHeaderIdVORowImpl)getBOQMaxValidationHeaderIdVO1().first();
            if (VersionRow != null &&
                VersionRow.getMaxVaHdrValidationHeaderId().compareTo(hdrRow.getValidationHeaderId()) !=
                0) {
                return "There exists a working document.";
            }
            BOQBaslineValidateVOImpl baselineVO = getBOQBaslineValidateVO1();
            baselineVO.setNamedWhereClauseParam("p_contract_id",
                                                hdrRow.getContractId());
            baselineVO.executeQuery();
            if (baselineVO.first() != null) {
                message = "Baseline already exists for this project";
            } else {
                CallableStatement st = null;
                try {
                    st =
 getDBTransaction().createCallableStatement(CREATE_BASELINE, 0);
                    st.setLong("P_BOQ_HEADER_ID",
                               hdrRow.getBoqHeaderId().longValue());
                    String userName =
                        ((String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName"));
                    st.setString("p_user_name", userName);
                    st.registerOutParameter("p_msg", Types.VARCHAR);
                    st.execute();
                    message = st.getString("p_msg");
                    getDBTransaction().commit();
                } catch (SQLException e) {
                    e.printStackTrace();
                    //                throw new JboException(e);
                } finally {
                    if (st != null) {
                        try {
                            st.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        } catch (Exception e) {
            message = e.getMessage();
        }
        return message;
    }

    private XSSFCell applyCellBorderAt(XSSFCell excelCell, String cellType,
                                       String applyBoderAt) {

        try {

            //            XSSFFont tblhdrfont =
            //                excelCell.getRow().getSheet().getWorkbook().createFont();
            XSSFCellStyle cellStyle = excelCell.getCellStyle();
            //            tblhdrfont.setFontHeight(9);
            //            tblhdrfont.setColor(HSSFColor.WHITE.index);
            //            tblhdrfont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            //            cellStyle.setFont(tblhdrfont);
            //            applyCellBorder(tblHdrCellStyle, "Header");

            if ("Top".equals(applyBoderAt)) {
                cellStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
            }
            if ("Left".equals(applyBoderAt)) {
                cellStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
            }
            if ("Right".equals(applyBoderAt)) {
                cellStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
            }
            if ("Header".equals(cellType)) {
                cellStyle.setFillForegroundColor(new XSSFColor(new java.awt.Color(220,
                                                                                  230,
                                                                                  241)));
                cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
            }

            excelCell.setCellStyle(cellStyle);
        } catch (Exception e) {
            e.printStackTrace();
        }


        return excelCell;
    }

    private XSSFCellStyle applyCellBorder(XSSFCellStyle cellStyle,
                                          String cellType) {

        cellStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
        cellStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
        cellStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
        cellStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
        if ("Header".equals(cellType)) {
            cellStyle.setFillForegroundColor(new XSSFColor(new java.awt.Color(44,
                                                                              106,
                                                                              182)));
            cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
        }

        return cellStyle;
    }


    private XSSFCellStyle applyCellTopBorders(XSSFCellStyle cellStyle,
                                              String cellType) {


        cellStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);

        if ("Header".equals(cellType)) {
            cellStyle.setFillForegroundColor(new XSSFColor(new java.awt.Color(220,
                                                                              230,
                                                                              241)));
            cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
        }

        return cellStyle;
    }

    private XSSFCellStyle applyCellLeftBorders(XSSFCellStyle cellStyle,
                                               String cellType) {


        cellStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);

        if ("Header".equals(cellType)) {
            cellStyle.setFillForegroundColor(new XSSFColor(new java.awt.Color(220,
                                                                              230,
                                                                              241)));
            cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
        }

        return cellStyle;
    }


    private XSSFCellStyle applyCellRightBorders(XSSFCellStyle cellStyle,
                                                String cellType) {


        cellStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);

        if ("Header".equals(cellType)) {
            cellStyle.setFillForegroundColor(new XSSFColor(new java.awt.Color(220,
                                                                              230,
                                                                              241)));
            cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
        }

        return cellStyle;
    }


    private XSSFCell createBorderedCell(XSSFRow excelRow, int cellNum) {
        XSSFCell excelCell = null;
        try {
            excelCell = excelRow.createCell(cellNum);
            XSSFCellStyle tblCellStyle =
                excelCell.getRow().getSheet().getWorkbook().createCellStyle();
            applyCellBorder(tblCellStyle, null);
            excelCell.setCellStyle(tblCellStyle);

        } catch (Exception e) {

            e.printStackTrace();
        }
        return excelCell;
    }

    private XSSFCell createHeaderBorderCell(XSSFRow excelRow, int cellNum) {
        XSSFCell excelCell = null;
        try {
            excelCell = excelRow.createCell(cellNum);
            XSSFFont tblhdrfont =
                excelCell.getRow().getSheet().getWorkbook().createFont();
            XSSFCellStyle tblHdrCellStyle =
                excelCell.getRow().getSheet().getWorkbook().createCellStyle();
            tblhdrfont.setFontHeight(9);
            tblhdrfont.setColor(HSSFColor.WHITE.index);
            tblhdrfont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            tblHdrCellStyle.setFont(tblhdrfont);
            applyCellBorder(tblHdrCellStyle, "Header");
            excelCell.setCellStyle(tblHdrCellStyle);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return excelCell;
    }

    private String addBOQAnalysisReportHeader(XSSFSheet sheet,
                                              BoqAnalysisReportHdrViewVORowImpl analysisHdrRow) {
        String message = null;
        try {
            int rowNum = 0;
            if (analysisHdrRow != null) {
                XSSFRow excelRow = sheet.createRow(rowNum++);
                XSSFCell cell = null;


                XSSFFont font = sheet.getWorkbook().createFont();
                XSSFCellStyle cellStyle =
                    sheet.getWorkbook().createCellStyle();
                font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
                font.setFontHeight(12);
                cellStyle.setFont(font);
                applyCellBorder(cellStyle, null);

                cell = excelRow.createCell(6);
                cell.setCellValue("AR Project Invoice Details");

                XSSFFont hdrFont = sheet.getWorkbook().createFont();
                XSSFCellStyle hdrCellStyle =
                    sheet.getWorkbook().createCellStyle();
                hdrFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
                hdrFont.setFontHeight(12);
                hdrCellStyle.setFont(hdrFont);
                cell.setCellStyle(hdrCellStyle);


                rowNum = rowNum + 2;
                excelRow = sheet.createRow(rowNum++);
                cell = createBorderedCell(excelRow, 0);

                cell.setCellValue("Project");
                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 1);
                cell.setCellValue(analysisHdrRow.getProjectName());


                cell = createBorderedCell(excelRow, 4);
                cell.setCellValue("Payment Term");
                //                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 5);
                cell.setCellValue(analysisHdrRow.getPaymentTerm());


                cell = createBorderedCell(excelRow, 8);
                cell.setCellValue("Retention%");
                //           cell.setCellStyle( cell.getCellStyle().setAlignment(arg0);
                //                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 9);
                if (analysisHdrRow.getRetentionPercentage() != null) {
                    cell.setCellValue(analysisHdrRow.getRetentionPercentage());
                    cell.getCellStyle().setAlignment(cell.getCellStyle().ALIGN_RIGHT);
                }


                cell = createBorderedCell(excelRow, 11);
                cell.setCellValue("Advance%");
                //                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 12);
                if (analysisHdrRow.getAdvancePercentage() != null) {
                    cell.setCellValue(analysisHdrRow.getAdvancePercentage());
                    cell.getCellStyle().setAlignment(cell.getCellStyle().ALIGN_RIGHT);
                }


                excelRow = sheet.createRow(rowNum++);
                cell = createBorderedCell(excelRow, 0);
                cell.setCellValue("Customer");
                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 1);
                cell.setCellValue(analysisHdrRow.getCustomer());


                cell = createBorderedCell(excelRow, 4);
                cell.setCellValue("Start Date");
                //                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 5);
                cell.setCellValue(analysisHdrRow.getStartDate());


                cell = createBorderedCell(excelRow, 8);
                cell.setCellValue("Retention Balance");
                //                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 9);
                if (analysisHdrRow.getRetentionAmount() != null) {
                    cell.setCellValue(analysisHdrRow.getRetentionAmount());
                    cell.getCellStyle().setAlignment(cell.getCellStyle().ALIGN_RIGHT);
                }

                cell = createBorderedCell(excelRow, 11);
                cell.setCellValue("Advance Payment");
                //                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 12);
                if (analysisHdrRow.getAdvanceAmount() != null) {
                    cell.setCellValue(analysisHdrRow.getAdvanceAmount());
                    cell.getCellStyle().setAlignment(cell.getCellStyle().ALIGN_RIGHT);
                }

                excelRow = sheet.createRow(rowNum++);
                cell = createBorderedCell(excelRow, 0);
                cell.setCellValue("Original Contract Value");
                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 1);
                if (analysisHdrRow.getOriginalContractValue() != null) {
                    cell.setCellValue(analysisHdrRow.getOriginalContractValue());
                    cell.getCellStyle().setAlignment(cell.getCellStyle().ALIGN_RIGHT);
                }


                cell = createBorderedCell(excelRow, 4);
                cell.setCellValue("Completion Date");
                //                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 5);

                cell.setCellValue(analysisHdrRow.getCompletionDate());


                cell = createBorderedCell(excelRow, 11);
                cell.setCellValue("Advance Recovery");
                //                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 12);
                if (analysisHdrRow.getAdvanceRecoveryAmount() != null) {
                    cell.setCellValue(analysisHdrRow.getAdvanceRecoveryAmount());
                    cell.getCellStyle().setAlignment(cell.getCellStyle().ALIGN_RIGHT);
                }

                excelRow = sheet.createRow(rowNum++);
                cell = createBorderedCell(excelRow, 0);
                cell.setCellValue("VO Value");
                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 1);
                cell.setCellValue((analysisHdrRow.getVoValue()));
                cell.getCellStyle().setAlignment(cell.getCellStyle().ALIGN_RIGHT);


                cell = createBorderedCell(excelRow, 11);
                cell.setCellValue("Advance Balance");
                //                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 12);
                if (analysisHdrRow.getAdvanceBalance() != null) {
                    cell.setCellValue(analysisHdrRow.getAdvanceBalance());
                    cell.getCellStyle().setAlignment(cell.getCellStyle().ALIGN_RIGHT);
                }

                excelRow = sheet.createRow(rowNum++);
                cell = createBorderedCell(excelRow, 0);
                cell.setCellValue("Current Contract Value");
                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 1);
                if (analysisHdrRow.getCurrentContractValue() != null) {

                    cell.setCellValue(analysisHdrRow.getCurrentContractValue());
                    cell.getCellStyle().setAlignment(cell.getCellStyle().ALIGN_RIGHT);
                }


                excelRow = sheet.createRow(rowNum++);
                cell = createBorderedCell(excelRow, 0);
                cell.setCellValue("Currency");
                //                cell.setCellStyle(cellStyle);

                cell = createBorderedCell(excelRow, 1);
                cell.setCellValue(analysisHdrRow.getCurrency());


                message = "Success";
            }
        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        }
        return message;
    }

    private String addBOQAnalysisReportLines(XSSFSheet sheet,
                                             BoqAnalysisReportLinesViewVOImpl analysisLinesVO) {
        String message = null;
        try {
            int rowNum = 12;
            if (analysisLinesVO != null) {

                BoqAnalysisReportLinesViewVORowImpl scAnalysisRow =
                    (BoqAnalysisReportLinesViewVORowImpl)analysisLinesVO.first();

                XSSFRow excelRow = null;
                XSSFCell excelCell = null;
                int cellNum = 0;

                excelRow = sheet.createRow(rowNum++);

                for (int inx = 0; inx <= 18; inx++) {
                    excelCell = excelRow.createCell(inx);
                    XSSFCellStyle subCellStyle =
                        excelCell.getRow().getSheet().getWorkbook().createCellStyle();

                    XSSFFont tblhdrfont =
                        excelCell.getRow().getSheet().getWorkbook().createFont();

                    tblhdrfont.setFontHeight(9);
                    tblhdrfont.setColor(HSSFColor.BLACK.index);
                    tblhdrfont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
                    subCellStyle.setFont(tblhdrfont);

                    if (inx == 0 || inx == 17 || inx == 18) {
                        applyCellLeftBorders(subCellStyle, "Header");
                    }

                    applyCellTopBorders(subCellStyle, "Header");
                    if (inx == 7 || inx == 11 || inx == 13 || inx == 16 ||
                        inx == 17 || inx == 18) {
                        applyCellRightBorders(subCellStyle, "Header");
                    }
                    excelCell.setCellStyle(subCellStyle);
                    if (inx == 4) {
                        excelCell.setCellValue("Invoice Details");
                    }
                    if (inx == 9) {
                        excelCell.setCellValue("Deductions");
                    }
                    if (inx == 12) {
                        excelCell.setCellValue("Receivable");
                        excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                    }

                    if (inx == 15) {
                        excelCell.setCellValue("Receipt Details");
                    }
                }


                excelRow = sheet.createRow(rowNum++);
                //                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                //                excelCell.setCellValue("Period");
                //                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                //                excelCell.setCellValue("Value");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.setCellValue("Document Type");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.setCellValue("Inv. Number");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.setCellValue("PC for the Month");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.setCellValue("Inv. Date");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.setCellValue("VOWD");
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                excelCell.setCellValue("MOS");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                excelCell.setCellValue("Inv. Amount");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                excelCell.setCellValue("VAT");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                excelCell.setCellValue("Adv. Recovery");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                excelCell.setCellValue("Retention");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                excelCell.setCellValue("Other Ded");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                excelCell.setCellValue("VAT/Tax");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                excelCell.setCellValue("Amount");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                excelCell.setCellValue("Due Date");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                excelCell.setCellValue("Amount");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                excelCell.setCellValue("Receipt Date");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.setCellValue("Late Day");
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.setCellValue("Outstanding Amount");
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                excelCell = createHeaderBorderCell(excelRow, cellNum++);
                excelCell.setCellValue("Age");
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);

                while (scAnalysisRow != null) {
                    cellNum = 0;
                    excelRow = sheet.createRow(rowNum++);

                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.setCellValue(scAnalysisRow.getDocumentType());


                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.setCellValue(scAnalysisRow.getPcDocumentNum());

                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.setCellValue(scAnalysisRow.getInvoiceDate());

                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.setCellValue(scAnalysisRow.getInvoiceDate());

                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                    if (scAnalysisRow.getVowd() != null) {
                        excelCell.setCellValue(scAnalysisRow.getVowd());

                    }

                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                    if (scAnalysisRow.getMaterialAtSite() != null) {
                        excelCell.setCellValue(scAnalysisRow.getMaterialAtSite());
                    }


                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                    if (scAnalysisRow.getAmount() != null) {
                        excelCell.setCellValue(scAnalysisRow.getAmount());
                    }

                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                    if (scAnalysisRow.getVat() != null) {
                        excelCell.setCellValue(scAnalysisRow.getVat());
                    }

                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                    if (scAnalysisRow.getAdvanceRecovery() != null) {
                        excelCell.setCellValue(scAnalysisRow.getAdvanceRecovery());
                    }


                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                    if (scAnalysisRow.getRetention() != null) {
                        excelCell.setCellValue(scAnalysisRow.getRetention());
                    }


                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                    if (scAnalysisRow.getOtherDeductions() != null) {
                        excelCell.setCellValue(scAnalysisRow.getOtherDeductions());
                    }


                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                    if (scAnalysisRow.getVatTax() != null) {
                        excelCell.setCellValue(scAnalysisRow.getVatTax());
                    }

                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                    if (scAnalysisRow.getAmount() != null) {
                        excelCell.setCellValue(scAnalysisRow.getAmount());
                    }

                    excelCell = createBorderedCell(excelRow, cellNum++);
                    if (scAnalysisRow.getDueDate() != null) {
                        excelCell.setCellValue(scAnalysisRow.getDueDate());
                    }

                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                    if (scAnalysisRow.getReceiptAmount() != null) {
                        excelCell.setCellValue(scAnalysisRow.getReceiptAmount());
                    }
                    //
                    excelCell = createBorderedCell(excelRow, cellNum++);
                    if (scAnalysisRow.getReceiptDate() != null) {
                        excelCell.setCellValue(scAnalysisRow.getReceiptDate());
                    }


                    excelCell = createBorderedCell(excelRow, cellNum++);
                    if (scAnalysisRow.getLateDay() != null) {
                        excelCell.setCellValue(scAnalysisRow.getLateDay().doubleValue());
                    }


                    excelCell = createBorderedCell(excelRow, cellNum++);
                    excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                    if (scAnalysisRow.getOutstandingAmount() != null) {
                        excelCell.setCellValue(scAnalysisRow.getOutstandingAmount());
                    }

                    excelCell = createBorderedCell(excelRow, cellNum++);
                    if (scAnalysisRow.getAge() != null) {
                        excelCell.setCellValue(scAnalysisRow.getAge().doubleValue());
                    }

                    if (analysisLinesVO.hasNext()) {
                        scAnalysisRow =
                                (BoqAnalysisReportLinesViewVORowImpl)analysisLinesVO.next();
                    } else {
                        scAnalysisRow = null;
                    }
                }
            }

        } catch (Exception e) {
            message = e.getMessage();
            e.printStackTrace();
        }
        return message;
    }


    private String addBOQAnalysisPrjRevData(Long projectId, XSSFSheet sheet) {
        String message = null;
        try {


            ExternalReportCustom extServ = new ExternalReportCustom();
            List<Map<String, Object>> amountsList =
                extServ.getProjectRevenueAmounts(projectId);
            int lastRowNum = sheet.getLastRowNum() + 3;
            XSSFRow excelRow = null;
            XSSFCell excelCell = null;

            XSSFFont font = sheet.getWorkbook().createFont();
            XSSFCellStyle cellStyle = sheet.getWorkbook().createCellStyle();
            font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
            font.setFontHeight(12);
            cellStyle.setFont(font);

            int cellNum = 0;

            excelRow = sheet.createRow(lastRowNum++);
            excelCell = excelRow.createCell(0);
            excelCell.setCellValue("Project Revenue Details");
            excelCell.setCellStyle(cellStyle);


            excelRow = sheet.createRow(lastRowNum++);
            excelCell = createHeaderBorderCell(excelRow, cellNum++);
            excelCell.setCellValue("Period");
            //            excelCell.setCellStyle(cellStyle);
            excelCell = createHeaderBorderCell(excelRow, cellNum++);
            excelCell.setCellValue("Value");
            excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
            //            excelCell.setCellStyle(cellStyle);

            for (Map<String, Object> dataMap : amountsList) {
                cellNum = 0;
                //                for (Map.Entry<String, Object> entry : dataMap.entrySet()) {
                excelRow = sheet.createRow(lastRowNum++);
                excelCell = createBorderedCell(excelRow, cellNum++);
                excelCell.setCellValue((String)dataMap.get("COMPLETION_DATE"));
                excelCell = createBorderedCell(excelRow, cellNum++);
                excelCell.getCellStyle().setAlignment(excelCell.getCellStyle().ALIGN_RIGHT);
                if (dataMap.get("REVENUE_AMT") != null) {
                    excelCell.setCellValue((String)dataMap.get("REVENUE_AMT"));
                }
                //                }
            }
            message = "Success";

        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        }
        return message;
    }

    public byte[] runAndGetBoqAnalysisReportData() {
        byte[] dataBytes = null;
        try {
            CandyBOQHeaderVORowImpl hdrRow =
                (CandyBOQHeaderVORowImpl)getCandyBOQHeaderVO1().getCurrentRow();
            String message = null;
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            if (hdrRow != null) {
                BoqAnalysisReportHdrViewVOImpl reportHdrVO =
                    getBoqAnalysisReportHdrViewVO1();
                reportHdrVO.setNamedWhereClauseParam("p_prj_id",
                                                     hdrRow.getProjectId());
                reportHdrVO.executeQuery();

                if (reportHdrVO.first() != null) {
                    BoqAnalysisReportHdrViewVORowImpl anaHdrRow =
                        (BoqAnalysisReportHdrViewVORowImpl)reportHdrVO.first();
                    XSSFWorkbook workbook = new XSSFWorkbook();
                    XSSFSheet sheet =
                        workbook.createSheet("AR Project Invoice Details");
                    sheet.setDisplayGridlines(false);
                    message = addBOQAnalysisReportHeader(sheet, anaHdrRow);
                    message =
                            addBOQAnalysisReportLines(sheet, getBoqAnalysisReportLinesViewVO1());
                    message =
                            addBOQAnalysisPrjRevData(hdrRow.getProjectId().longValue(),
                                                     sheet);
                    workbook.write(baos);
                    baos.close();
                    dataBytes = baos.toByteArray();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return dataBytes;
    }

    public byte[] getUploadedBoqData() {
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet worksheet = workbook.createSheet("Import BOQ");
        XSSFRow excelrow = null;
        int rowNum = 0;
        XSSFFont hdrFont = workbook.createFont();
        hdrFont.setColor(IndexedColors.WHITE.getIndex());
        hdrFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
        CellStyle cellStyleHdr = workbook.createCellStyle();
        cellStyleHdr.setFont(hdrFont);
        cellStyleHdr.setFillForegroundColor(IndexedColors.ROYAL_BLUE.getIndex());
        cellStyleHdr.setFillPattern(CellStyle.SOLID_FOREGROUND);
        XSSFFont lineFont = workbook.createFont();
        lineFont.setColor(IndexedColors.BLACK.getIndex());
        CellStyle cellStyleLine = workbook.createCellStyle();
        cellStyleLine.setFont(lineFont);
        for (int k = 0; k < 27; k++) {
            worksheet.setColumnWidth(k, 5000);
        }
        excelrow = (XSSFRow)worksheet.createRow(0);
        XSSFCell cellV0 = excelrow.createCell(0);
        cellV0.setCellValue("Level");
        cellV0.setCellStyle(cellStyleHdr);
        cellV0.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV1 = excelrow.createCell(1);
        cellV1.setCellValue("Bill No.");
        cellV1.setCellStyle(cellStyleHdr);
        cellV1.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV2 = excelrow.createCell(2);
        cellV2.setCellValue("Page");
        cellV2.setCellStyle(cellStyleHdr);
        cellV2.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV3 = excelrow.createCell(3);
        cellV3.setCellValue("Item");
        cellV3.setCellStyle(cellStyleHdr);
        cellV3.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV100 = excelrow.createCell(4);
        cellV100.setCellValue("Line Type");
        cellV100.setCellStyle(cellStyleHdr);
        cellV100.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV17 = excelrow.createCell(5);
        cellV17.setCellValue("Variation Category");
        cellV17.setCellStyle(cellStyleHdr);
        cellV17.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV4 = excelrow.createCell(6);
        cellV4.setCellValue("Description");
        cellV4.setCellStyle(cellStyleHdr);
        cellV4.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV5 = excelrow.createCell(7);
        cellV5.setCellValue("Bill Quantity");
        cellV5.setCellStyle(cellStyleHdr);
        cellV5.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV23 = excelrow.createCell(8);
        cellV23.setCellValue("Final Quantity");
        cellV23.setCellStyle(cellStyleHdr);
        cellV23.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV7 = excelrow.createCell(9);
        cellV7.setCellValue("UOM");
        cellV7.setCellStyle(cellStyleHdr);
        cellV7.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV8 = excelrow.createCell(10);
        cellV8.setCellValue("Bill Rate in Contract Currency");
        cellV8.setCellStyle(cellStyleHdr);
        cellV8.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV21 = excelrow.createCell(11);
        cellV21.setCellValue("Bill Amount in Contract Currency");
        cellV21.setCellStyle(cellStyleHdr);
        cellV21.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV210 = excelrow.createCell(12);
        cellV210.setCellValue("Bill Amount in Ledger Currency");
        cellV210.setCellStyle(cellStyleHdr);
        cellV210.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV211 = excelrow.createCell(13);
        cellV211.setCellValue("Final Amount in Contract Currency");
        cellV211.setCellStyle(cellStyleHdr);
        cellV211.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV212 = excelrow.createCell(14);
        cellV212.setCellValue("Final Amount in Ledger Currency");
        cellV212.setCellStyle(cellStyleHdr);
        cellV212.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV213 = excelrow.createCell(15);
        cellV213.setCellValue("Contract Line Number");
        cellV213.setCellStyle(cellStyleHdr);
        cellV213.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV214 = excelrow.createCell(16);
        cellV214.setCellValue("Associated Project Number");
        cellV214.setCellStyle(cellStyleHdr);
        cellV214.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV90 = excelrow.createCell(17);
        cellV90.setCellValue("Task Number");
        cellV90.setCellStyle(cellStyleHdr);
        cellV90.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV215 = excelrow.createCell(18);
        cellV215.setCellValue("Task Name");
        cellV215.setCellStyle(cellStyleHdr);
        cellV215.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV9 = excelrow.createCell(19);
        cellV9.setCellValue("Trade");
        cellV9.setCellStyle(cellStyleHdr);
        cellV9.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV10 = excelrow.createCell(20);
        cellV10.setCellValue("Price Code");
        cellV10.setCellStyle(cellStyleHdr);
        cellV10.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV22 = excelrow.createCell(21);
        cellV22.setCellValue("Cost Rate");
        cellV22.setCellStyle(cellStyleHdr);
        cellV22.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV6 = excelrow.createCell(22);
        cellV6.setCellValue("Cost Amount");
        cellV6.setCellStyle(cellStyleHdr);
        cellV6.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV11 = excelrow.createCell(23);
        cellV11.setCellValue("Line Remarks");
        cellV11.setCellStyle(cellStyleHdr);
        cellV11.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV12 = excelrow.createCell(24);
        cellV12.setCellValue("Resource");
        cellV12.setCellStyle(cellStyleHdr);
        cellV12.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV13 = excelrow.createCell(25);
        cellV13.setCellValue("Resource Description");
        cellV13.setCellStyle(cellStyleHdr);
        cellV13.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV130 = excelrow.createCell(26);
        cellV130.setCellValue("Resource Class");
        cellV130.setCellStyle(cellStyleHdr);
        cellV130.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV131 = excelrow.createCell(27);
        cellV131.setCellValue("Resource UOM");
        cellV131.setCellStyle(cellStyleHdr);
        cellV131.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV14 = excelrow.createCell(28);
        cellV14.setCellValue("Resource Quantity");
        cellV14.setCellStyle(cellStyleHdr);
        cellV14.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV15 = excelrow.createCell(29);
        cellV15.setCellValue("Resource Rate");
        cellV15.setCellStyle(cellStyleHdr);
        cellV15.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV24 = excelrow.createCell(30);
        cellV24.setCellValue("Resource Amount");
        cellV24.setCellStyle(cellStyleHdr);
        cellV24.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV16 = excelrow.createCell(31);
        cellV16.setCellValue("Resource Remarks");
        cellV16.setCellStyle(cellStyleHdr);
        cellV16.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV25 = excelrow.createCell(32);
        cellV25.setCellValue("Line Error Information");
        cellV25.setCellStyle(cellStyleHdr);
        cellV25.setCellType(Cell.CELL_TYPE_STRING);
        XSSFCell cellV26 = excelrow.createCell(33);
        cellV26.setCellValue("Cost Code Error Information");
        cellV26.setCellStyle(cellStyleHdr);
        cellV26.setCellType(Cell.CELL_TYPE_STRING);
        //lines
        CandyBOQHeaderVORowImpl headerRow =
            (CandyBOQHeaderVORowImpl)getCandyBOQHeaderVO1().getCurrentRow();
        BoqExportPrintReportVOImpl boqExportVO = getBoqExportPrintReportVO1();
        boqExportVO.setNamedWhereClauseParam("p_validation_header_id",
                                             headerRow.getValidationHeaderId());
        boqExportVO.executeQuery();
        RowSetIterator iter = boqExportVO.createRowSetIterator(null);
        String billPageItem = "", newBillPageItem = "";
        String columns[] =
        { "BoqLevel", "BillNumber", "PageItem", "Item", "LineType",
          "VariationCategory", "BillDescription", "BillQuantityNum",
          "FinalQuantityNum", "Uom", "SellingRate", "SellingAmountContract",
          "SellingAmountLedger", "FinalAmountContract", "FinalAmountLedger",
          "ContractLineNumber", "ProjectNumber", "TaskNumber", "TaskName",
          "Trade", "PriceCode", "BudgetRate", "BudgetAmount", "BoqLineRemarks",
          "CostCode", "CostCodeDescription", "ResourceClass", "CostCodeUom",
          "CostCodeQuantity", "CostCodeRate", "CostCodeAmount",
          "CostCodeRemarks" };
        while (iter.hasNext()) {
            int columnNum = 0;
            int billPageItemExists = 0;
            BoqExportPrintReportVORowImpl exportRow =
                (BoqExportPrintReportVORowImpl)iter.next();
            newBillPageItem = exportRow.getBillPageItem();
            if (billPageItem != null &&
                billPageItem.equalsIgnoreCase(newBillPageItem)) {
                columnNum = 24;
                billPageItemExists = 1;
            } else {
                billPageItem = newBillPageItem;
                rowNum++;
            }
            excelrow = worksheet.createRow(++rowNum);
            while (columnNum < columns.length) {
                XSSFCell cellV30 = excelrow.createCell(columnNum);
                cellV30.setCellValue(exportRow.getAttribute(columns[columnNum]) !=
                                     null ?
                                     String.valueOf(exportRow.getAttribute(columns[columnNum])) :
                                     null);
                cellV30.setCellStyle(cellStyleLine);
                //                if(columnNum==8 || columnNum==10||columnNum==11||columnNum==14||columnNum==18||columnNum==19){
                //                    cellV30.setCellType(Cell.CELL_TYPE_NUMERIC);
                //                }else{
                cellV30.setCellType(Cell.CELL_TYPE_STRING);
                //                }
                columnNum++;
            }
        }
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        try {
            workbook.write(bos);
            bos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return bos.toByteArray();
    }


    /**
     * Container's getter for CandyBOQSearchVO1.
     * @return CandyBOQSearchVO1
     */
    public CandyBOQSearchVOImpl getCandyBOQSearchVO1() {
        return (CandyBOQSearchVOImpl)findViewObject("CandyBOQSearchVO1");
    }

    /**
     * Container's getter for CandyBOQHeaderVO1.
     * @return CandyBOQHeaderVO1
     */
    public CandyBOQHeaderVOImpl getCandyBOQHeaderVO1() {
        return (CandyBOQHeaderVOImpl)findViewObject("CandyBOQHeaderVO1");
    }

    /**
     * Container's getter for CandyBOQLinesVO1.
     * @return CandyBOQLinesVO1
     */
    public CandyBOQLinesVOImpl getCandyBOQLinesVO1() {
        return (CandyBOQLinesVOImpl)findViewObject("CandyBOQLinesVO1");
    }

    /**
     * Container's getter for CandyBOQHdrToLinesVL1.
     * @return CandyBOQHdrToLinesVL1
     */
    public ViewLinkImpl getCandyBOQHdrToLinesVL1() {
        return (ViewLinkImpl)findViewLink("CandyBOQHdrToLinesVL1");
    }

    /**
     * Container's getter for CommonUtilsAM1.
     * @return CommonUtilsAM1
     */
    public ApplicationModuleImpl getCommonUtilsAM1() {
        return (ApplicationModuleImpl)findApplicationModule("CommonUtilsAM1");
    }

    public void editDocument() {
        CandyBOQHeaderVOImpl hdrVO = getCandyBOQHeaderVO1();
        hdrVO.executeQuery();
        CandyBOQSearchVOImpl CandyBOQSearchVO = getCandyBOQSearchVO1();
        Row currentRow = CandyBOQSearchVO.getCurrentRow();
        if (currentRow != null) {
            Key masterkey =
                new Key(new Object[] { currentRow.getAttribute("BoqHeaderId") });
            hdrVO.findAndSetCurrentRowByKey(masterkey, 0);
        }
    }

    /**
     * Container's getter for CandyBOQCostCodesVO1.
     * @return CandyBOQCostCodesVO1
     */
    public CandyBOQCostCodesVOImpl getCandyBOQCostCodesVO1() {
        return (CandyBOQCostCodesVOImpl)findViewObject("CandyBOQCostCodesVO1");
    }

    /**
     * Container's getter for CandyBOQLinesToCostCodeVL1.
     * @return CandyBOQLinesToCostCodeVL1
     */
    public ViewLinkImpl getCandyBOQLinesToCostCodeVL1() {
        return (ViewLinkImpl)findViewLink("CandyBOQLinesToCostCodeVL1");
    }

    /**
     * Container's getter for CandyBOQResourcesVO1.
     * @return CandyBOQResourcesVO1
     */
    public CandyBOQResourcesVOImpl getCandyBOQResourcesVO1() {
        return (CandyBOQResourcesVOImpl)findViewObject("CandyBOQResourcesVO1");
    }

    /**
     * Container's getter for CandyBOQCostCodeToResourceVL1.
     * @return CandyBOQCostCodeToResourceVL1
     */
    public ViewLinkImpl getCandyBOQCostCodeToResourceVL1() {
        return (ViewLinkImpl)findViewLink("CandyBOQCostCodeToResourceVL1");
    }

    public String interfaceTasks() {
        String message = "";
        try {
            CandyBOQHeaderVORowImpl costDetHdrRow =
                (CandyBOQHeaderVORowImpl)getCandyBOQHeaderVO1().getCurrentRow();
            if (costDetHdrRow != null) {
                //            getCandyTasksWSVO1().applyViewCriteria(null);
                //            getCandyTasksWSVO1().setRangeSize(-1);
                //            getCandyTasksWSVO1().executeQuery();
                //            getCandyTasksWSVO1().setNamedWhereClauseParam("p_hdr_id",
                //                                                          costDetHdrRow.getBoqHeaderId().longValue());
                //            getCandyTasksWSVO1().executeQuery();
                //            Row[] taskRows = getCandyTasksWSVO1().getAllRowsInRange();
                //            UpdateFinancialTaskStructure taskStr =
                //                new UpdateFinancialTaskStructure();
                //            ObjectFactory objectFactory = new ObjectFactory();
                //            //            List<ProjectTask> tasks = new ArrayList<ProjectTask>();
                //
                //            int i = 0;
                //            for (Row row : taskRows) {
                //                CandyTasksWSVORowImpl taskRow = (CandyTasksWSVORowImpl)row;
                //                if (i == 0) {
                //                    ProjectParam projectParam = new ProjectParam();
                //                    projectParam.setProjectName(objectFactory.createProjectParamProjectName(taskRow.getProjectNumber()));
                //                    projectParam.setGenerateWBSDataFlag(objectFactory.createProjectParamGenerateWBSDataFlag(true));
                //                    projectParam.setProjectKey(objectFactory.createProjectParamProjectKey(taskRow.getProjectNumber()));
                //                    projectParam.setReplaceFlag(objectFactory.createProjectParamReplaceFlag(true));
                //                    taskStr.setProject(projectParam);
                //                }
                //                ProjectTask task = new ProjectTask();
                //                task.setProjectName(objectFactory.createProjectTaskProjectName(taskRow.getProjectNumber()));
                //                task.setTaskName(objectFactory.createProjectTaskTaskName(taskRow.getTaskNumber()));
                //                task.setTaskNumber(objectFactory.createProjectTaskTaskNumber(taskRow.getDescription() !=
                //                                                                             null ?
                //                                                                             taskRow.getDescription() :
                //                                                                             taskRow.getTaskNumber()));
                //
                //                task.setPmTaskSourceReference(objectFactory.createProjectTaskPmTaskSourceReference(taskRow.getDescription() !=
                //                                                                                                   null ?
                //                                                                                                   taskRow.getDescription() :
                //                                                                                                   taskRow.getTaskNumber()));
                //                Date startDate = new Date(taskRow.getStartDate());
                //                startDate.addJulianDays(1, 0);
                //                Date endDate = new Date(taskRow.getEndDate());
                //                endDate.addJulianDays(1, 0);
                //                task.setDnDisplaySequence(objectFactory.createProjectTaskDnDisplaySequence(new Long(i)));
                //                task.setPlanningStartDate(objectFactory.createProjectTaskPlanningStartDate(getXmlCalender(new oracle.jbo.domain.Date(startDate))));
                //                task.setPlanningEndDate(objectFactory.createProjectTaskPlanningEndDate(getXmlCalender(new oracle.jbo.domain.Date(endDate))));
                //                task.setStartDate(objectFactory.createProjectTaskStartDate(getXmlCalender(new oracle.jbo.domain.Date(startDate))));
                //                task.setCompletionDate(objectFactory.createProjectTaskCompletionDate(getXmlCalender(new oracle.jbo.domain.Date(endDate))));
                //                task.setBillableFlag(objectFactory.createProjectTaskBillableFlag(true));
                //                task.setChargeableFlag(objectFactory.createProjectTaskChargeableFlag(true));
                //                taskStr.getTasks().add(task);
                //                i++;
                //            }
                //            ProjectTaskServiceCustom taskCustom =
                //                new ProjectTaskServiceCustom();
                //            message = taskCustom.updateTaskStructure(taskStr);
            }
        } catch (Exception e) {
            e.printStackTrace();

        }
        return message;
    }

    public XMLGregorianCalendar getXmlCalender(oracle.jbo.domain.Date date) {
        oracle.jbo.domain.Date oracleDate = date;
        XMLGregorianCalendar xmlDate = null;
        try {

            java.util.Date jDate = oracleDate.getValue();
            GregorianCalendar gc = new GregorianCalendar();
            gc.setTimeInMillis(jDate.getTime());
            DatatypeFactory df = DatatypeFactory.newInstance();
            xmlDate = df.newXMLGregorianCalendar(gc);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return xmlDate;
    }

    /**
     * Container's getter for CandyTasksWSVO1.
     * @return CandyTasksWSVO1
     */
    public CandyTasksWSVOImpl getCandyTasksWSVO1() {
        return (CandyTasksWSVOImpl)findViewObject("CandyTasksWSVO1");
    }

    public String addProjectBudgetHeader(XSSFSheet sheet) {
        String message = null;
        try {

            List<String> headerList = new ArrayList<String>();
            headerList.add("Award Number");
            headerList.add("Financial Plan Type");
            headerList.add("Project Number");
            headerList.add("Project Name");
            headerList.add("Task Number");
            headerList.add("Task Name");
            headerList.add("Plan Version Name");
            headerList.add("Plan Version Description");
            headerList.add("Plan Version Status");
            headerList.add("Resource Name");
            headerList.add("Funding Source Number");
            headerList.add("Funding Source Name");
            headerList.add("Line Type");
            headerList.add("Period Name");
            headerList.add("Start Date");
            headerList.add("Finish Date");
            headerList.add("Planning Currency");
            headerList.add("Total Quantity");
            headerList.add("Total Raw Cost");
            headerList.add("Total Burdened Cost");
            headerList.add("Total Revenue");
            headerList.add("Total Raw Cost in Project Currency");
            headerList.add("Total Burdened Cost in Project Currency");
            headerList.add("Total Revenue in Project Currency");
            headerList.add("Total Raw Cost in Project Ledger Currency");
            headerList.add("Total Burden Cost in Project Ledger Currency");
            headerList.add("Total Revenue in Project Ledger Currency");
            headerList.add("Source Budget Line Reference");
            headerList.add("Attribute Category");
            headerList.add("Attribute1");
            headerList.add("Attribute2");
            headerList.add("Attribute3");
            headerList.add("Attribute4");
            headerList.add("Attribute5");
            headerList.add("Attribute6");
            headerList.add("Attribute7");
            headerList.add("Attribute8");
            headerList.add("Attribute9");
            headerList.add("Attribute10");
            headerList.add("Attribute11");
            headerList.add("Attribute12");
            headerList.add("Attribute13");
            headerList.add("Attribute14");
            headerList.add("Attribute15");
            headerList.add("Attribute16");
            headerList.add("Attribute17");
            headerList.add("Attribute18");
            headerList.add("Attribute19");
            headerList.add("Attribute20");
            headerList.add("Attribute21");
            headerList.add("Attribute22");
            headerList.add("Attribute23");
            headerList.add("Attribute24");
            headerList.add("Attribute25");
            headerList.add("Attribute26");
            headerList.add("Attribute27");
            headerList.add("Attribute28");
            headerList.add("Attribute29");
            headerList.add("Attribute30");
            XSSFRow excelRow = sheet.createRow(0);
            for (int inx = 0; inx < headerList.size(); inx++) {
                XSSFCell cell = excelRow.createCell(inx);
                cell.setCellValue(headerList.get(inx));
            }
            message = "Success";
        } catch (Exception e) {
            message = e.getMessage();
        }
        return message;
    }

    public byte[] interfaceBudget() {
        byte[] byteData = null;
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            String message = null;
            int rowNum = 0;

            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet sheet = workbook.createSheet("PJO_BUDGETS_XFACE");
            XSSFCellStyle tblCellStyle = workbook.createCellStyle();
            XSSFDataFormat xssfDataFormat = workbook.createDataFormat();
            tblCellStyle.setDataFormat(xssfDataFormat.getFormat("yyyy/MM/dd"));
            CandyBOQHeaderVORowImpl costDetHdrRow =
                (CandyBOQHeaderVORowImpl)getCandyBOQHeaderVO1().getCurrentRow();
            if (costDetHdrRow != null) {
                ProjectBudgetCCScrVOImpl scrVO = getProjectBudgetCCScrVO1();
                scrVO.setNamedWhereClauseParam("p_boq_hdr_id",
                                               costDetHdrRow.getBoqHeaderId());
                scrVO.executeQuery();
                message = addProjectBudgetHeader(sheet);
                ProjectBudgetCCScrVORowImpl row =
                    (ProjectBudgetCCScrVORowImpl)scrVO.first();

                if ("Success".equals(message)) {
                    while (row != null) {
                        XSSFRow excelRow = sheet.createRow(++rowNum);
                        int cellNum = 0;
                        XSSFCell cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAwardNumber());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getFinancialPlanType());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getProjectNumber());


                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getProjectName());


                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getTaskNumber());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getTaskName());


                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getPlanVersionName());


                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getPlanVersionDescription());


                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getPlanVersionStatus());


                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getResourceName());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getFundingSourceNumber());


                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getFundingSourceName());


                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getLineType());


                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getPeriodName());


                        cell = excelRow.createCell(cellNum++);
                        cell.setCellStyle(tblCellStyle);
                        cell.setCellValue(row.getStartDate());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellStyle(tblCellStyle);
                        cell.setCellValue(row.getFinishDate());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getPlanningCurrency());

                        cell = excelRow.createCell(cellNum++);
                        if (row.getTotalQuantity() != null) {
                            cell.setCellValue(row.getTotalQuantity().doubleValue());
                        }


                        cell = excelRow.createCell(cellNum++);
                        if (row.getTotalRawCost() != null) {
                            cell.setCellValue(row.getTotalRawCost().doubleValue());
                        }
                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getTotalBurdenedCost());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getTotalRevenue());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getTotRawCostInPrjCurr());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getTotBrdCostInPrjCurr());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getTotRevInPrjCurr());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getTotRawCostInPrjLedCurr());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getTotBrdCostInPrjLedCurr());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getTotRevInPrjLedCurr());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getSourceBudgetLineReference());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttributeCategory());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute1());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute2());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute3());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute4());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute5());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute6());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute7());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute8());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute9());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute10());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute11());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute12());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute13());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute14());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute15());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute16());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute17());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute18());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute19());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute20());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute21());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute22());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute23());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute24());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute25());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute26());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute27());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute28());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute29());

                        cell = excelRow.createCell(cellNum++);
                        cell.setCellValue(row.getAttribute30());


                        if (scrVO.hasNext()) {
                            row = (ProjectBudgetCCScrVORowImpl)scrVO.next();
                        } else {
                            row = null;
                        }
                    }

                    workbook.write(baos);
                    baos.close();
                    byteData = baos.toByteArray();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        //        CandyBOQHeaderVORowImpl costDetHdrRow =
        //            (CandyBOQHeaderVORowImpl)getCandyBOQHeaderVO1().getCurrentRow();
        //        if (costDetHdrRow != null) {
        //            getBudgetWSVO1().applyViewCriteria(null);
        //            getBudgetWSVO1().setRangeSize(-1);
        //            getBudgetWSVO1().executeQuery();
        //            getBudgetWSVO1().setNamedWhereClauseParam("p_hdr_id",
        //                                                      costDetHdrRow.getBoqHeaderId().longValue());
        //            getBudgetWSVO1().executeQuery();
        //            Row[] budgetRows = getBudgetWSVO1().getAllRowsInRange();
        //            if (budgetRows.length > 0) {
        //                BudgetWSVORowImpl budgetRow = (BudgetWSVORowImpl)budgetRows[0];
        //
        //                CreateBudget budget = new CreateBudget();
        //                ProjectBudgetInput budgetattr = new ProjectBudgetInput();
        //                com.oracle.xmlns.apps.projects.control.budgetsandforecasts.budgetservicev2.ObjectFactory objFactory =
        //                    new com.oracle.xmlns.apps.projects.control.budgetsandforecasts.budgetservicev2.ObjectFactory();
        //                budgetattr.setPlanVersionName(objFactory.createProjectBudgetInputPlanVersionName("1"));
        //                budgetattr.setPlanVersionDescription(objFactory.createProjectBudgetInputPlanVersionDescription("BudgetPlan"));
        //                budgetattr.setProjectId(objFactory.createProjectBudgetInputProjectId(budgetRow.getProjectId().longValue()));
        //                budgetattr.setResourceName(objFactory.createProjectBudgetInputResourceName("Labor"));
        //                //        budgetattr.setPeriodName(objFactory.createProjectBudgetInputPeriodName(""));
        //                budgetattr.setLineType(objFactory.createProjectBudgetInputLineType("RESOURCE"));
        //                budgetattr.setPlanVersionStatus(objFactory.createProjectBudgetInputPlanVersionStatus("CURRENT WORKING"));
        //                MeasureType Qty = new MeasureType();
        //                //        Qty.setUnitCode("");
        //                Qty.setValue((budgetRow.getBillQty()));
        //                budgetattr.setQuantity(objFactory.createProjectBudgetInputQuantity(Qty));
        //                //        budgetattr.setUnitOfMeasure(objFactory.createProjectBudgetInputUnitOfMeasure(""));
        //                budgetattr.setPlanningCurrency(objFactory.createProjectBudgetInputPlanningCurrency(budgetRow.getProjectCurrencyCode()));
        //                AmountType amt = new AmountType();
        ////                amt.setCurrencyCode(budgetRow.getProjectCurrencyCode());
        //                amt.setValue(budgetRow.getAmount());
        //                        budgetattr.setRawCostAmount(objFactory.createProjectBudgetInputRawCostAmount(amt));
        ////                budgetattr.setRevenueAmount(objFactory.createProjectBudgetInputRevenueAmount(amt));
        //                budget.getBudgetRowList().add(budgetattr);
        //                ProjectBudgetServiceCustom budgetCustom =
        //                    new ProjectBudgetServiceCustom();
        //                try {
        //                    message = budgetCustom.createBudgetInput(budget);
        //                } catch (Exception e) {
        //                    e.printStackTrace();
        //                    message = e.getLocalizedMessage();
        //                }
        //            }
        //        }
        return byteData;
    }

    public String createBudget() {
        String message = "";
        try {
            message = "Success";
            BigDecimal ValidationHeaderId =
                (BigDecimal)ADFContext.getCurrent().getPageFlowScope().get("BoqHeaderId");
            if (ValidationHeaderId != null) {
                CallableStatement st = null;
                try {
                    st =
 getDBTransaction().createCallableStatement(CREATE_BUDGET, 0);
                    st.setLong("P_BOQ_HEADER_ID",
                               ValidationHeaderId.longValue());
                    String userName =
                        ((String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName"));
                    st.setString("p_user_name", userName);
                    st.registerOutParameter("p_msg", Types.VARCHAR);
                    st.execute();
                    message = st.getString("p_msg");
                    //                    getDBTransaction().commit();
                } catch (SQLException e) {
                    message = e.getMessage();
                    e.printStackTrace();
                    //                throw new JboException(e);
                } finally {
                    if (st != null) {
                        try {
                            st.close();
                        } catch (SQLException e) {
                            message = e.getMessage();
                            e.printStackTrace();
                        }
                    }
                }
            } else {
                message = "Can't get BOQ Header ID";
            }
        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        } // TODO
        return message;
    }

    public String createBudgetLines() {
        String message = "";
        try {
            message = "Success";
            BigDecimal ValidationHeaderId =
                (BigDecimal)ADFContext.getCurrent().getPageFlowScope().get("BoqHeaderId");
            if (ValidationHeaderId != null) {
                CallableStatement st = null;
                try {
                    st =
 getDBTransaction().createCallableStatement(CREATE_BUDGET_LINES, 0);
                    st.setLong("P_BOQ_HEADER_ID",
                               ValidationHeaderId.longValue());
                    String userName =
                        ((String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName"));
                    st.setString("p_user_name", userName);
                    st.registerOutParameter("p_msg", Types.VARCHAR);
                    st.execute();
                    message = st.getString("p_msg");
                    getBoqBudgetLinesVO1().executeQuery();
                    //                    getDBTransaction().commit();
                } catch (SQLException e) {
                    message = e.getMessage();
                    e.printStackTrace();
                    //                throw new JboException(e);
                } finally {
                    if (st != null) {
                        try {
                            st.close();
                        } catch (SQLException e) {
                            message = e.getMessage();
                            e.printStackTrace();
                        }
                    }
                }
            } else {
                message = "Can't get BOQ Header ID";
            }
        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        } // TODO
        return message;
    }
    
    public String createFinancialPlan() {
        String message = "";
        try {
            message = "Success";
            BigDecimal ValidationHeaderId =
                (BigDecimal)ADFContext.getCurrent().getPageFlowScope().get("BoqHeaderId");
            if (ValidationHeaderId != null) {
                CallableStatement st = null;
                try {
                    st =
 getDBTransaction().createCallableStatement(CREATE_FINANCIAL_PLAN, 0);
                    st.setLong("P_BOQ_HEADER_ID",
                               ValidationHeaderId.longValue());
                    String userName =
                        ((String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName"));
                    st.setString("p_user_name", userName);
                    st.registerOutParameter("p_msg", Types.VARCHAR);
                    st.execute();
                    message = st.getString("p_msg");
                    //                    getDBTransaction().commit();
                } catch (SQLException e) {
                    message = e.getMessage();
                    e.printStackTrace();
                    //                throw new JboException(e);
                } finally {
                    if (st != null) {
                        try {
                            st.close();
                        } catch (SQLException e) {
                            message = e.getMessage();
                            e.printStackTrace();
                        }
                    }
                }
            } else {
                message = "Can't get BOQ Header ID";
            }
        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        } // TODO
        return message;
    }

    /**
     * Container's getter for BudgetWSVO1.
     * @return BudgetWSVO1
     */
    public BudgetWSVOImpl getBudgetWSVO1() {
        return (BudgetWSVOImpl)findViewObject("BudgetWSVO1");
    }

    /**
     * Container's getter for AttachmentsVO1.
     * @return AttachmentsVO1
     */
    public AttachmentsVOImpl getAttachmentsVO1() {
        return (AttachmentsVOImpl)findViewObject("AttachmentsVO1");
    }

    /**
     * Container's getter for BOQHdrToAttachmentsVL1.
     * @return BOQHdrToAttachmentsVL1
     */
    public ViewLinkImpl getBOQHdrToAttachmentsVL1() {
        return (ViewLinkImpl)findViewLink("BOQHdrToAttachmentsVL1");
    }

    /**
     * Container's getter for ProjectBudgetCCScrVO1.
     * @return ProjectBudgetCCScrVO1
     */
    public ProjectBudgetCCScrVOImpl getProjectBudgetCCScrVO1() {
        return (ProjectBudgetCCScrVOImpl)findViewObject("ProjectBudgetCCScrVO1");
    }

    /**
     * Container's getter for BoqAnalysisReportHdrViewVO1.
     * @return BoqAnalysisReportHdrViewVO1
     */
    public BoqAnalysisReportHdrViewVOImpl getBoqAnalysisReportHdrViewVO1() {
        return (BoqAnalysisReportHdrViewVOImpl)findViewObject("BoqAnalysisReportHdrViewVO1");
    }

    /**
     * Container's getter for BoqAnalysisReportLinesViewVO1.
     * @return BoqAnalysisReportLinesViewVO1
     */
    public BoqAnalysisReportLinesViewVOImpl getBoqAnalysisReportLinesViewVO1() {
        return (BoqAnalysisReportLinesViewVOImpl)findViewObject("BoqAnalysisReportLinesViewVO1");
    }

    /**
     * Container's getter for BoqAnalysisReportHdrToLinesVL1.
     * @return BoqAnalysisReportHdrToLinesVL1
     */
    public ViewLinkImpl getBoqAnalysisReportHdrToLinesVL1() {
        return (ViewLinkImpl)findViewLink("BoqAnalysisReportHdrToLinesVL1");
    }

    /**
     * Container's getter for BOQBaslineValidateVO1.
     * @return BOQBaslineValidateVO1
     */
    public BOQBaslineValidateVOImpl getBOQBaslineValidateVO1() {
        return (BOQBaslineValidateVOImpl)findViewObject("BOQBaslineValidateVO1");
    }

    /**
     * Container's getter for BoqValidationHeaderVO1.
     * @return BoqValidationHeaderVO1
     */
    public BoqValidationHeaderVOImpl getBoqValidationHeaderVO1() {
        return (BoqValidationHeaderVOImpl)findViewObject("BoqValidationHeaderVO1");
    }


    /**
     * Container's getter for BOQMaxValidationHeaderIdVO1.
     * @return BOQMaxValidationHeaderIdVO1
     */
    public BOQMaxValidationHeaderIdVOImpl getBOQMaxValidationHeaderIdVO1() {
        return (BOQMaxValidationHeaderIdVOImpl)findViewObject("BOQMaxValidationHeaderIdVO1");
    }

    /**
     * Container's getter for BoqExportPrintReportVO1.
     * @return BoqExportPrintReportVO1
     */
    public BoqExportPrintReportVOImpl getBoqExportPrintReportVO1() {
        return (BoqExportPrintReportVOImpl)findViewObject("BoqExportPrintReportVO1");
    }

    /**
     * Container's getter for BoqBudgetLinesVO1.
     * @return BoqBudgetLinesVO1
     */
    public ViewObjectImpl getBoqBudgetLinesVO1() {
        return (ViewObjectImpl)findViewObject("BoqBudgetLinesVO1");
    }

    /**
     * Container's getter for BoqHeaderToBudgetLinesVL1.
     * @return BoqHeaderToBudgetLinesVL1
     */
    public ViewLinkImpl getBoqHeaderToBudgetLinesVL1() {
        return (ViewLinkImpl)findViewLink("BoqHeaderToBudgetLinesVL1");
    }
}
