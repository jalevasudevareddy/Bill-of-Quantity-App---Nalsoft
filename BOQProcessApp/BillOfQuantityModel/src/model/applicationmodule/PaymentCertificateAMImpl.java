package model.applicationmodule;


import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import model.progview.TransReversePopVOImpl;

import model.searchview.PCDocTypeCountsScrVOImpl;


import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import model.applicationmodule.common.PaymentCertificateAM;

import model.progview.TransReversePopVORowImpl;

import model.searchview.MaxPcDocNumVOImpl;
import model.searchview.MaxPcDocNumVORowImpl;
import model.searchview.PCDocTypeCountsScrVORowImpl;
import model.searchview.PCPrintReportVOImpl;
import model.searchview.PaymentCertSearchVOImpl;

import model.searchview.ProjectTaxDetailsVOImpl;
import model.searchview.ProjectTaxDetailsVORowImpl;
import model.searchview.TaxLinesDifferenceVOImpl;

import model.searchview.TaxLinesDifferenceVORowImpl;

import model.services.ExternalReportCustom;

import model.transview.TransPCHdrVOImpl;

import model.transview.TransPCHdrVORowImpl;

import model.view.AttachmentsVOImpl;
import model.view.AttachmentsVORowImpl;
import model.view.BOQAccountsSetupVOImpl;
import model.view.BoqAnalysisReportHdrViewVORowImpl;
import model.view.OtherDeductionsVOImpl;
import model.view.OtherDeductionsVORowImpl;
import model.view.PaymentCertHdrVOImpl;
import model.view.PaymentCertHdrVORowImpl;
import model.view.PaymentCertHdrWSVOImpl;
import model.view.PaymentCertLinesVOImpl;

import model.view.PaymentCertLinesVORowImpl;

import model.view.PaymentCertLinesWSVOImpl;


import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.XMLInterface;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.xml.parser.v2.XMLNode;

import org.apache.myfaces.trinidad.model.UploadedFile;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Feb 08 14:50:55 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PaymentCertificateAMImpl extends ApplicationModuleImpl implements PaymentCertificateAM {


    private final String validate_pc_period =
        "begin xxboq_bill_of_quantity_pkg.validate_pc_period" +
        "(:p_contract_id,:p_doc_type,:p_period,:p_message);end;";
    private final String set_pc_line_values =
        "begin xxboq_boq_candy_pkg.set_pc_line_values" +
        "(:p_hdr_id,:p_contract_id,:p_user_name);end;";

    private final String set_pc_line_total_values =
        "begin xxboq_bill_of_quantity_pkg.set_pc_line_total_values" +
        "(:p_user_name,:p_hdr_id);end;";
    private final String delete_pc_line_values =
        "begin xxboq_bill_of_quantity_pkg.delete_pc_line_values" +
        "(:p_hdr_id,:p_user_name);end;";

    private final String GET_PC_LINES =
        "begin xxboq_bill_of_quantity_pkg.get_pc_lines2" +
        "(:p_pc_header_id,:p_message);end;";
    private final String WITHDRAW_APPRL_SUBMISSION =
        "begin xxame_pkg.withdraw_submission(:p_document_type_id ,:p_document_id,:p_remarks,:p_user,:p_message);end;";

    private final String CHECK_PC_ACCOUNTING_DETAILS =
        "begin xxame_pkg.withdraw_submission(:p_document_type_id ,:p_document_id,:p_remarks,:p_user,:p_message);end;";

    private final String Interface_pc_doc =
        "begin XXBOQ_INTERFACES_PKG.Interface_pc_doc(:p_header_id ,:p_user,:p_message);end;";
    
    private final String Reverse_pc_doc =
        "begin XXBOQ_INTERFACES_PKG.reverse_pc_doc(:p_header_id ,:p_user,:p_message);end;";

    /**
     * This is the default constructor (do not remove).
     */
    public PaymentCertificateAMImpl() {
    }
    
    
    private BlobDomain createBlobDomain(UploadedFile file) {
        InputStream in = null;
        BlobDomain blobDomain = null;
        OutputStream out = null;
        try {
            in = file.getInputStream();
            blobDomain = new BlobDomain();
            out = blobDomain.getBinaryOutputStream();
            byte[] buffer = new byte[8192];
            int bytesRead = 0;
            while ((bytesRead = in.read(buffer, 0, 8192)) != -1) {
                out.write(buffer, 0, bytesRead);
            }
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
            e.fillInStackTrace();
        }
        return blobDomain;
    }


    public String saveAttachedFile(UploadedFile attachedFile) {
        String message = null;
        try {
            if (getAttachmentsVO1().getCurrentRow() != null) {
                String fileName = attachedFile.getFilename();
                String contType = attachedFile.getContentType();
                BlobDomain fileBolb = createBlobDomain(attachedFile);
                if (fileName != null && contType != null) {
                    AttachmentsVORowImpl attachmnt =
                        (AttachmentsVORowImpl)getAttachmentsVO1().getCurrentRow();
                        attachmnt.setFileName(fileName);
                        attachmnt.setFileType(contType);
                        attachmnt.setAttachmentFile(fileBolb);
                        message = "Success";
    //                        this.getDBTransaction().commit();
                } else {
                    message = "Invalid file.";
                }
            } else {
                message = "Attached row not found.";
            }
        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        }
        return message;
    }

    public String postPCDocument() {
        String message = null;
        BigDecimal currHdrId = null;
        try {
            PaymentCertHdrVORowImpl hdrRow =
                (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
            CommonUtilsAMImpl commAM = (CommonUtilsAMImpl)getCommonUtilsAM1();
            currHdrId = new BigDecimal(hdrRow.getPcHeaderId().toString());
            if (hdrRow != null) {
                CallableStatement st = null;
                try {
                    st =
 getDBTransaction().createCallableStatement(Interface_pc_doc, 0);
                    st.setLong("p_header_id",
                               hdrRow.getPcHeaderId().longValue());
                    st.setString("p_user",
                                 ((String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName")));
                    st.registerOutParameter("p_message", Types.VARCHAR);
                    st.execute();

                    message = st.getString("p_message");
                    this.getDBTransaction().commit();
                } catch (Exception e) {
                    e.printStackTrace();
            message = e.getMessage();
                }
                if ("Success".equals(message)) {
//                    this.getDBTransaction().commit();
                    commAM.makeAsCurrentRow(getPaymentCertHdrVO1(), currHdrId);
                    if (getPaymentCertHdrVO1().getCurrentRow() != null) {
                        PaymentCertHdrVORowImpl currHdrRow =
                            (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
                        if ((currHdrRow.getPcHeaderId().longValue() !=
                             currHdrId.longValue())) {
                            message =
                                    "Interface successful. Please refresh the page.";
                        }
                    }
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        }
        return message;
    }


    public String checkPCAccountingDetails(BigDecimal p_pc_hdr_id) {
        String message = null;
        try {
            if (getPaymentCertHdrVO1().getCurrentRow() != null) {
                PaymentCertHdrVORowImpl hdrRow =
                    (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
                //                if (hdrRow.getParentLiabilityHdrId() != null) {


                CallableStatement st =
                    getDBTransaction().createCallableStatement(WITHDRAW_APPRL_SUBMISSION,
                                                               0);
                st.setLong("p_pc_hdr_id", 0);


                st.registerOutParameter("p_message", Types.VARCHAR);
                st.execute();

                message = st.getString("p_message");

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return message;
    }

    public String callpkgForAMEPCDocSubmit() {
        String msg = "";
        try {
            CommonUtilsAMImpl commonAM =
                (CommonUtilsAMImpl)getCommonUtilsAM1();

            PaymentCertHdrVOImpl hdrVO = getPaymentCertHdrVO1();
            PaymentCertHdrVORowImpl hdrRow =
                (PaymentCertHdrVORowImpl)hdrVO.getCurrentRow();
            if (hdrRow != null) {
                Map paramsMap = new HashMap();
                paramsMap.put("docId", hdrRow.getPcHeaderId().longValue());
                paramsMap.put("docTypeId", 5);
                paramsMap.put("ActionCode", "Submit");
                paramsMap.put("currEmpId",
                              commonAM.getCurrentEmployeeId() != null ?
                              commonAM.getCurrentEmployeeId().longValue() :
                              null);
                paramsMap.put("remarks", "");
                paramsMap.put("docNum", hdrRow.getContractNumber().toString());
                msg = commonAM.callAMEProcess(paramsMap);
                if ("Submitted".equals(msg)) {
                    //                    submitDocFor("In Process");
                    hdrRow.setPcStatus("I");
                    msg = "Success";
                    if ("Fianlly Approved".equals(msg)) { //FYI approval only
                        //                        submitDocFor("Approved");
                        hdrRow.setPcStatus("A");
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            msg = e.getMessage();
        }
        return msg;
    }

    public String withdrawCertDocFromApproval(String remarks) {
        String message = null;
        try {
            if (getPaymentCertHdrVO1().getCurrentRow() != null) {
                PaymentCertHdrVORowImpl hdrRow =
                    (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
                //                if (hdrRow.getParentLiabilityHdrId() != null) {

                CommonUtilsAMImpl commAM =
                    (CommonUtilsAMImpl)getCommonUtilsAM1();
                CallableStatement st =
                    getDBTransaction().createCallableStatement(WITHDRAW_APPRL_SUBMISSION,
                                                               0);
                st.setLong("p_document_type_id", 5);
                st.setLong("p_document_id",
                           hdrRow.getPcHeaderId().longValue());
                st.setString("p_remarks", remarks);
                st.setLong("p_user",
                           commAM.getCurrentEmployeeId() != null ? commAM.getCurrentEmployeeId().longValue() :
                           -1);

                st.setString("p_message", null);

                st.registerOutParameter("p_message", Types.VARCHAR);
                st.execute();

                message = st.getString("p_message");
                if ("Success".equals(message)) {
                    this.getDBTransaction().commit();
                    Number revHdrId =
                        new Number(hdrRow.getPcHeaderId().longValue());
                    commAM.makeAsCurrentRow(getPaymentCertHdrVO1(), revHdrId);

                    PaymentCertHdrVORowImpl newPCHdrRow =
                        (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
                    if (newPCHdrRow.getPcHeaderId().longValue() ==
                        revHdrId.longValue()) {
                        newPCHdrRow.setPcStatus("W");
                    }

                    else {
                        message = "Unable to refersh the current row";
                    }

                    //                    getPaymentCertHdrVO1().executeQuery();
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return message;
    }

    public String updatePcOtherDedAmnt() {
        String message = null;
        BigDecimal amountToUpdt = new BigDecimal(0.0);
        BigDecimal amountTaxToUpdt   = new BigDecimal(0.0);
        try {
            if (getPaymentCertHdrVO1().getCurrentRow() != null) {
//                PaymentCertHdrVORowImpl hdrRow =
//                    (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
                getPaymentCertLinesVO1().executeQuery();
                if (getOtherDeductionsVO1().getEstimatedRowCount() > 0) {
                    if (getOtherDeductionsVO1().getCurrentRow() != null) {
                        OtherDeductionsVORowImpl dedRow =
                            (OtherDeductionsVORowImpl)getOtherDeductionsVO1().getCurrentRow();
                        if(dedRow.getTransTotal()!=null){
                            amountToUpdt = dedRow.getTransTotal();
                        }
                        if(dedRow.getTransTaxTotal()!=null){
                            amountTaxToUpdt =  dedRow.getTransTaxTotal();
                        }
                    }
                }

                PaymentCertLinesVOImpl lineVO = getPaymentCertLinesVO1();
                lineVO.executeQuery();
                PaymentCertLinesVORowImpl line =
                    (PaymentCertLinesVORowImpl)lineVO.first();
                while (line != null) {
                    if ("OTH_DED".equals(line.getParticulars())) {
                        line.setCummulative(line.getPrevious() == null ?
                                            amountToUpdt :
                                            line.getPrevious().add(amountToUpdt));
                        
                        line.setVatTaxAmount(amountTaxToUpdt);
                        message = "Success";
                    }
                    if (lineVO.hasNext()) {
                        line = (PaymentCertLinesVORowImpl)lineVO.next();
                    } else {
                        line = null;
                    }
                }
                //                else{
                //                    message="Success";
                //                }

            }
        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        }
        return message;
    }

    public String refreshHdrRow() {
        String message = null;
        try {

            if (getPaymentCertHdrVO1().getCurrentRow() != null) {
                PaymentCertHdrVORowImpl hdrRow =
                    (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
                BigDecimal hdrId = hdrRow.getPcHeaderId();
                CommonUtilsAMImpl commAM =
                    (CommonUtilsAMImpl)getCommonUtilsAM1();
                commAM.makeAsCurrentRow(getPaymentCertHdrVO1(), hdrId);
                if (getPaymentCertHdrVO1().getCurrentRow() != null) {
                    PaymentCertHdrVORowImpl refHdrRow =
                        (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
                    if (refHdrRow.getPcHeaderId().doubleValue() ==
                        hdrId.doubleValue()) {
                        message = "Success";
                    } else {
                        message = "Unable to refresh the current row.";
                    }
                } else {
                    message = "Unable to refresh the current row.";
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return message;
    }

    public String getLines() {
        String messsage = null;
        try {
            if (getPaymentCertHdrVO1().getCurrentRow() != null) {
                PaymentCertHdrVORowImpl hdrRow =
                    (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
                CallableStatement st =
                    this.getDBTransaction().createCallableStatement(GET_PC_LINES,
                                                                    0);
                st.setLong("p_pc_header_id",
                           hdrRow.getPcHeaderId().longValue());
                st.registerOutParameter("p_message", Types.VARCHAR);
                st.execute();
                messsage = st.getString("p_message");
                getPaymentCertLinesVO1().executeQuery();
            } else {
                messsage = "Current row not found.";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return messsage;
    }

    public String deletePCDocRow() {
        String message = null;
        try {
            PaymentCertHdrVOImpl pcVO = getPaymentCertHdrVO1();
            if (pcVO.getCurrentRow() != null) {
                pcVO.getCurrentRow().remove();
                message = "Success";
                getDBTransaction().commit();
            }
        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        }
        return message;
    }


    public String cancelPCDocRow() {
        String message = null;
        try {
            PaymentCertHdrVOImpl pcVO = getPaymentCertHdrVO1();
            if (pcVO.getCurrentRow() != null) {
                PaymentCertHdrVORowImpl row =
                    (PaymentCertHdrVORowImpl)pcVO.getCurrentRow();
                row.setPcStatus("CL");
                message = "Success";
                getDBTransaction().commit();
                CommonUtilsAMImpl commam =
                    (CommonUtilsAMImpl)getCommonUtilsAM1();
                String remarks =
                    String.valueOf(ADFContext.getCurrent().getPageFlowScope().get("CANCEL_REMARKS"));
                String msg =
                    commam.cancelDocument(remarks, row.getPcHeaderId().longValue(),
                                          5L);
            }
        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        }
        return message;
    }

    public String reversePCDocRow() {
        String message = null;
        try {
            PaymentCertHdrVOImpl pcVO = getPaymentCertHdrVO1();
            PaymentCertHdrVORowImpl row = (PaymentCertHdrVORowImpl)pcVO.getCurrentRow();
            
            TransReversePopVOImpl popVO = getTransReversePopVO1();
            TransReversePopVORowImpl curRow = (TransReversePopVORowImpl)popVO.getCurrentRow();
            row.setCmInterfaceDate(curRow.getTransCMDate());
            this.getDBTransaction().commit();
            
            CallableStatement st  = getDBTransaction().createCallableStatement(Reverse_pc_doc, 0);
            st.setLong("p_header_id", row.getPcHeaderId().longValue());
            st.setString("p_user",((String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName")));
            st.registerOutParameter("p_message", Types.VARCHAR);
            st.execute();
            
            message = st.getString("p_message");
            this.getDBTransaction().commit();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        return message;
    }

    public String refreshHdrVOAttrs(Map attributesMap) {
        String message = null;
        try {
            if (attributesMap != null) {

                TransPCHdrVOImpl pCHdrVO = getTransPCHdrVO1();
                TransPCHdrVORowImpl row =
                    (TransPCHdrVORowImpl)pCHdrVO.getCurrentRow();

                Map<String, Object> attributes =
                    (HashMap<String, Object>)attributesMap;
                for (Map.Entry<String, Object> entry : attributes.entrySet()) {
                    row.setAttribute(entry.getKey(), entry.getValue());
                }
                message = "Success";

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return message;
    }

    public byte[] getPCPrintReport(){
        byte[] reportData = null;
        try{
            PaymentCertHdrVORowImpl PCRow =
                (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
            PCPrintReportVOImpl PCPrintVO = getPCPrintReportVO1();
            PCPrintVO.setNamedWhereClauseParam("p_pc_header_id",
                                               PCRow.getPcHeaderId());
            PCPrintVO.setNamedWhereClauseParam("p_report_type", "PC");
            PCPrintVO.executeQuery();
            String reportPath =
                "/Custom/PAAS/Master Reports/Projects/BOQ PC Print Report.xdo";
            String format = "pdf";
            ByteArrayOutputStream opStream = new ByteArrayOutputStream();
            ((XMLNode)PCPrintVO.writeXML(1,
                                         XMLInterface.XML_OPT_ALL_ROWS)).print(opStream);
            ExternalReportCustom ext = new ExternalReportCustom();
            reportData = ext.generatePDFReport(reportPath, format, opStream);
//            File file = new File("C:\\Users\\sumanth.yamani\\Downloads\\BOQ Uploads/invPrintXml2.xml");
//            FileOutputStream fop = new FileOutputStream(file);
//            opStream.writeTo(fop);
//            opStream.close();
        }catch(Exception e){
        }
        return reportData;
    }

    /**
     * Container's getter for PaymentCertSearchVO1.
     * @return PaymentCertSearchVO1
     */
    public PaymentCertSearchVOImpl getPaymentCertSearchVO1() {
        return (PaymentCertSearchVOImpl)findViewObject("PaymentCertSearchVO1");
    }

    /**
     * Container's getter for PaymentCertHdrVO1.
     * @return PaymentCertHdrVO1
     */
    public PaymentCertHdrVOImpl getPaymentCertHdrVO1() {
        return (PaymentCertHdrVOImpl)findViewObject("PaymentCertHdrVO1");
    }

    /**
     * Container's getter for PaymentCertLinesVO1.
     * @return PaymentCertLinesVO1
     */
    public PaymentCertLinesVOImpl getPaymentCertLinesVO1() {
        return (PaymentCertLinesVOImpl)findViewObject("PaymentCertLinesVO1");
    }

    /**
     * Container's getter for PcHdrToLinesVL1.
     * @return PcHdrToLinesVL1
     */
    public ViewLinkImpl getPcHdrToLinesVL1() {
        return (ViewLinkImpl)findViewLink("PcHdrToLinesVL1");
    }

    /**
     * Container's getter for CommonUtilsAM1.
     * @return CommonUtilsAM1
     */
    public ApplicationModuleImpl getCommonUtilsAM1() {
        return (ApplicationModuleImpl)findApplicationModule("CommonUtilsAM1");
    }

    public void editDocument() {
        try {
            PaymentCertHdrVOImpl hdrVO = getPaymentCertHdrVO1();
            hdrVO.executeQuery();
            PaymentCertSearchVOImpl searchVO = getPaymentCertSearchVO1();
            Row currentRow = searchVO.getCurrentRow();
            if (currentRow != null) {
                Key masterkey =
                    new Key(new Object[] { currentRow.getAttribute("PcHeaderId") });
                hdrVO.findAndSetCurrentRowByKey(masterkey, 0);
            }
        } catch (Exception e) {

            e.printStackTrace();

        }
    }

    public void cancelDocument() {
        //        getPaymentCertHdrVO1().getCurrentRow().remove();
        //        getPaymentCertHdrVO1().executeQuery();
    }

    private String formatedNumber(Integer number, int length) {
        String strNumber = null;
        try {
            if (number != null && length > 0) {
                String strInt = number.toString();
                int strIntLength = strInt.length();
                int remLength = length - strIntLength;
                for (int inx = 1; inx <= remLength; inx++) {
                    strNumber =
                            strNumber != null ? strNumber.trim() + "0" : "0";
                }
                strNumber = strNumber + number;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return strNumber;
    }


    public String isPrjEligForPCDocCreation() {
        String message = null;
        try {
            if (getTransPCHdrVO1().getCurrentRow() != null) {
                TransPCHdrVORowImpl transRow =
                    (TransPCHdrVORowImpl)getTransPCHdrVO1().getCurrentRow();
                getTaxLinesDifferenceVO1().setNamedWhereClauseParam("p_contract_id",
                                                                    transRow.getTransContractId());
                getTaxLinesDifferenceVO1().executeQuery();
                TaxLinesDifferenceVORowImpl row =
                    (TaxLinesDifferenceVORowImpl)getTaxLinesDifferenceVO1().first();
                 String res = transRow.getTransTaxFlag()    ;
                if (transRow.getTransTaxFlag().equalsIgnoreCase("Y") && row.getDiff().intValue() != 0) {
                                    message = "Tax setup was not defined for this contract";
                  }
              if(transRow.getTransTaxFlag().equalsIgnoreCase("N") || (transRow.getTransTaxFlag().equalsIgnoreCase("Y") && row.getDiff().intValue() == 0)){
                    PCDocTypeCountsScrVOImpl scrVO =
                        getPCDocTypeCountsScrVO1();
                    scrVO.setNamedWhereClauseParam("p_contract_id",
                                                   transRow.getTransContractId());
                    scrVO.executeQuery();
                    if (scrVO.first() != null) {
    
                        PCDocTypeCountsScrVORowImpl pcRow =
                            (PCDocTypeCountsScrVORowImpl)scrVO.first();
                        int fpbCount = pcRow.getFpbCount().intValue();
                        int frrCount = pcRow.getFrrCount().intValue();
                        String docCode = transRow.getTransDocCode();
    
                        if ("ADV".equals(docCode) || "PB".equals(docCode) ||
                            "FPB".equals(docCode)) {
                            if (fpbCount > 0) {
                                message =
                                        "Document with final payment budget type is already exists.";
                            } else if (frrCount > 0) {
                                message =
                                        "Document with final retention release type is already exists.";
                            } else {
                                message = "Success";
                            }
                        }
    
                        else if (("RR".equals(docCode) ||
                                  "FRR".equals(docCode)) && frrCount > 0) {
                            message =
                                    "Document with final retention release type is already exists.";
    
                        } 
//                        else if ("FRR".equals(docCode) && fpbCount == 0) { //code commented by sumanth to allow FRR without FPB
//                            message =
//                                    " A Document with Final Payment Budget type is not  exists.";
//                        }
    
                        else {
                            message = "Success";
                        }    
                    }
                } 
            }
        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        }
        return message;
    }

    public String createDocument() {
        String message = null;
        try {
            String docNum = null;
            BigDecimal mastHdrId = null;
            BigDecimal parntHdrId = null;
            String prevPerd = null;
            String prevDocNum = null;
            String prevDocType = null;
            if (getTransPCHdrVO1().getCurrentRow() != null) {
                TransPCHdrVORowImpl transRow =
                    (TransPCHdrVORowImpl)getTransPCHdrVO1().getCurrentRow();
                if (transRow.getTransCustomerId() != null) {
                if (transRow.getTransBoqHeaderId() != null) {
                    message = isPrjEligForPCDocCreation();
                    if ("Success".equals(message)) {
                            if (transRow.getTransAdvancePerct() != null &&
                                transRow.getTransAdvanceRecryPerct() != null &&
                                transRow.getTransRetentionPerct() != null) {
                            if(transRow.getTransPaymenTerms()!=null){
                                    PaymentCertHdrVOImpl hdrVO =
                                        getPaymentCertHdrVO1();
                        //            PaymentCertHdrVORowImpl hdrRow =
                        //                (PaymentCertHdrVORowImpl)hdrVO.getCurrentRow();
                        //            Long hdrId = new Long(hdrRow.getPcHeaderId().longValue());
                        //            //            hdrVO.executeQuery();
                        //            Key masterkey = new Key(new Object[] { hdrId });
                        //            //            hdrVO.findAndSetCurrentRowByKey(masterkey, 0);
                        //            //            hdrRow = (PaymentCertHdrVORowImpl)hdrVO.getCurrentRow();

                                    MaxPcDocNumVOImpl prevPcVO =
                                        getMaxPcDocNumVO1();
                        prevPcVO.setNamedWhereClauseParam("p_contract_id",
                                                          transRow.getTransContractId());
                        prevPcVO.setNamedWhereClauseParam("p_bu_id",
                                                          transRow.getTransBuId());
                        prevPcVO.executeQuery();
                        MaxPcDocNumVORowImpl maxRow = null;
                        if (prevPcVO.getEstimatedRowCount() > 0) {
                                        maxRow =
                                                (MaxPcDocNumVORowImpl)prevPcVO.first();
                            if(!"OB".equals(transRow.getTransDocCode())){
                                            if (("P".equals(maxRow.getPcStatus()) ||
                                                 "CL".equals(maxRow.getPcStatus())) &&
                                                maxRow.getPcDocumentNum() !=
                                                null) {
                                    String[] maxNumSplt = maxRow.getPcDocumentNum().split("-");
                                    if (maxNumSplt != null && maxNumSplt.length >= 3) {
                                        if("CL".equalsIgnoreCase(maxRow.getMaxStatus())){
                                            String[] maxNumNewSplt = maxRow.getMaxDocNum().split("-");
//                                            if(transRow.getTransPeriod().equals(maxRow.getMaxPeriod())){
                                                   if( maxNumNewSplt.length > 3){
                                                     int count = new Integer(maxNumNewSplt[3]);
                                                     count = count + 1;
                                                     docNum = maxNumNewSplt[0]+"-"+maxNumNewSplt[1]+"-"+maxNumNewSplt[2]+"-"+count ;
                                                   }else{
                                                       docNum = maxRow.getMaxDocNum()+"-1";
                                                   }
//                                            }else{
//                                                docNum =transRow.getTransContractNumber() +"-PC-" +formatedNumber((new Integer(maxNumNewSplt[2])) + 1,4);
//                                            }
                                        }else{
                                            docNum =transRow.getTransContractNumber() +"-PC-" +formatedNumber((new Integer(maxNumSplt[2])) + 1,4);
                                        }
                                                        mastHdrId =
                                                                maxRow.getMasterPcHeaderId();
                                                        parntHdrId =
                                                                maxRow.getPcHeaderId();
                                                        prevDocNum =
                                                                maxRow.getPcDocumentNum();
                                                        prevDocType =
                                                                maxRow.getDocumentType();
                                                        prevPerd =
                                                                maxRow.getPeriod();
                                        
                                    } else {
                                        message =
                                                "Unable to retrieve the previous PC Number for the contract.";
                                    }
                                } else {
                                    message =
                                            "There already exists a working document for selected contract and period. Search for the document instead.";
                                }
                            }else{
                                            message =
                                                    "Opening balance document can't be created. There already exists a document for selected contract.";
                            }
                        } else {
                            docNum =
                                                transRow.getTransContractNumber() +
                                                "-PC-" + formatedNumber(1, 4);
                            //                mastHdrId = hdrRow.getPcHeaderId();
                            //                parntHdrId = hdrRow.getPcHeaderId();
                        }

                        if (docNum != null) {
                            PaymentCertHdrVORowImpl hdrRow =
                                (PaymentCertHdrVORowImpl)hdrVO.createRow();
                            hdrRow.setPcDocumentNum(docNum);
                                        hdrRow.setMasterPcHeaderId(mastHdrId !=
                                                                   null ?
                                                       mastHdrId :
                                                       hdrRow.getPcHeaderId());
                                        hdrRow.setParentPcHeaderId(parntHdrId !=
                                                                   null ?
                                                       parntHdrId :
                                                       hdrRow.getPcHeaderId());
                            hdrRow.setPrevDocumentType(prevDocType);
                            hdrRow.setPrevPcDocumentNum(prevDocNum);
                            hdrRow.setPrevPeriod(prevPerd);
                            hdrRow.setRevision(new BigDecimal(0));
                            hdrRow.setPcStatus("D");
                            hdrRow.setBuId(transRow.getTransBuId());
                            //hdrRow.setProjectId(transRow.getTransProjectId());
                            hdrRow.setContractId(transRow.getTransContractId());
                            hdrRow.setPeriod(transRow.getTransPeriod());
                            hdrRow.setDocumentType(transRow.getTransDocCode());
                            hdrRow.setCertifiedHeaderId(transRow.getTransCertId());
                            hdrRow.setMasterCertHeaderId(transRow.getTransMasterCertHdrId());
                            hdrRow.setCustomerId(transRow.getTransCustomerId());
                            hdrRow.setBoqHeaderId(transRow.getTransBoqHeaderId());
                            hdrRow.setAdvancePrct(transRow.getTransAdvancePerct());
                            hdrRow.setAdvanceRecoveryPrct(transRow.getTransAdvanceRecryPerct());
                            hdrRow.setRetentionPrct(transRow.getTransRetentionPerct());
                            hdrRow.setPayTerms(transRow.getTransPaymenTerms());
                            hdrVO.insertRow(hdrRow);
                                        ProjectTaxDetailsVOImpl taxDetailsVO =
                                            getProjectTaxDetailsVO1();
                            taxDetailsVO.setApplyViewCriteriaName("ProjectTaxDetailsVOCriteria");
                                        taxDetailsVO.setNamedWhereClauseParam("p_contract_id",
                                                                              transRow.getTransContractId());
                                        message =
                                                insertPCLines(transRow.getTransDocCode());
                            //                message="Success";
                            if ("Success".equals(message)) {
                                this.getDBTransaction().commit();
                            } else {
                                            message =
                                                    "Unable to refresh the document.";
                            }                       
                        } else {
                            message =
                                    message != null ? message + " Unable to generate new PC document number." :
                                    " Unable to generate new PC document number.";
                        }                        
                                } else {
                                    message =
                                            "Payment terms not found for the project.";
                        }
                        
                            } else {
                                message =
                                        "Please update the advance, advance recovery  and retention percentages for the project contract.";
                    }
                    } else {
                        message =
                                    "Unable to create a PC document of type " +
                                    transRow.getTransDocType() + ". " +
                                    message;
                    }
                }else{
                        message =
                                "You cannot create a document as there is no baselined BOQ for selected contract.";
                }
                } else {
                    message = "Customer name not found.";
                }
            } else {
                message = "Trans curent row not found.";
            }

        } catch (Exception e) {
            message = e.getMessage();
            e.printStackTrace();
        }
        return message;
    }


    private String insertPCLines(String docType) {
        String message = null;
        try {
            List<String> lineList = new ArrayList<String>();
            lineList.add("VOWD");
            lineList.add("MAT_AT_SITE");
            lineList.add("VOWD_TOT");
            lineList.add("ADV");
            lineList.add("ADV_RECV");
            lineList.add("ADV_TOT");
            lineList.add("RET");
            lineList.add("RET_REL");
            lineList.add("DED_TOT");
            lineList.add("OTH_DED");
            lineList.add("TOT");

            PaymentCertLinesVOImpl pcLinesVO = getPaymentCertLinesVO1();
            ProjectTaxDetailsVOImpl taxDetailsVO = getProjectTaxDetailsVO1();
            for (String lineType : lineList) {
                PaymentCertLinesVORowImpl row =
                    (PaymentCertLinesVORowImpl)pcLinesVO.createRow();
                row.setParticulars(lineType);
                row.setCummulative(new BigDecimal(0));
                row.setPrevious(new BigDecimal(0));
                String particular = "";
                if("ADV_RECV".equals(lineType)){
                    particular = "ADV";
                } else if ("OTH_DED".equals(lineType)) {
                    particular = "VOWD";
                } else if ("RET_REL".equals(lineType)) {
                    particular = "RET";
                } else {
                    particular = lineType;
                }
                taxDetailsVO.setNamedWhereClauseParam("p_particulars",
                                                      particular);
                taxDetailsVO.executeQuery();
                ProjectTaxDetailsVORowImpl taxRow =
                    (ProjectTaxDetailsVORowImpl)taxDetailsVO.first();
                if(taxRow != null){
                    if("OB".equals(docType)||"OTH_DED".equals(lineType)){
                        row.setTaxRate(new BigDecimal(0));
                        row.setTaxRateCode(null);
                    }else{
                        row.setTaxRate(taxRow.getTaxRate());
                        row.setTaxRateCode(taxRow.getTaxCode());
                    }
                }
            }
            message = "Success";
        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        }
        return message;
    }

    public void executeLinesTable() {
        PaymentCertHdrVOImpl hdrVO = getPaymentCertHdrVO1();
        PaymentCertHdrVORowImpl hdrRow =
            (PaymentCertHdrVORowImpl)hdrVO.getCurrentRow();
        Long hdrId = new Long(hdrRow.getPcHeaderId().longValue());
        Key masterkey = new Key(new Object[] { hdrId });
        hdrVO.executeQuery();
        hdrVO.findAndSetCurrentRowByKey(masterkey, 0);
        getPaymentCertLinesVO1().executeQuery();
    }

    public void createHeaderRow() {
        getTransPCHdrVO1().insertRow(getTransPCHdrVO1().createRow());
    }

    public String validatePCPeriod() {
        String message = null;
        try {

            PaymentCertHdrVOImpl hdrVO = getPaymentCertHdrVO1();
            PaymentCertHdrVORowImpl hdrRow =
                (PaymentCertHdrVORowImpl)hdrVO.getCurrentRow();
            if (hdrRow != null && hdrRow.getProjectId() != null &&
                hdrRow.getDocumentType() != null &&
                hdrRow.getPeriod() != null) {
                CallableStatement st = null;
                try {
                    st =
 getDBTransaction().createCallableStatement(validate_pc_period, 0);
                    st.setLong("p_contract_id", hdrRow.getContractId().longValue());
                    st.setString("p_doc_type", hdrRow.getDocumentType());
                    st.setString("p_period", hdrRow.getPeriod());
                    st.registerOutParameter("p_message", Types.VARCHAR);
                    st.execute();

                    message = st.getString("p_message");

                } catch (SQLException e) {
                    e.printStackTrace();
                    //                throw new JboException(e);
                    return e.getLocalizedMessage();
                } finally {
                    if (st != null) {
                        try {
                            // 7. Close the statement
                            st.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
                if ("Y".equals(message)) {
                    return "";
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return message;
    }

    public void createPcLines() {
        PaymentCertHdrVOImpl hdrVO = getPaymentCertHdrVO1();
        PaymentCertHdrVORowImpl hdrRow =
            (PaymentCertHdrVORowImpl)hdrVO.getCurrentRow();
        if (hdrRow != null) {
            for (int i = 0; i < 9; i++) {
                PaymentCertLinesVORowImpl lineRow =
                    (PaymentCertLinesVORowImpl)getPaymentCertLinesVO1().createRow();
                lineRow.setPcLineId(new BigDecimal(i + 1));
                switch (i) {
                case 0:
                    lineRow.setParticulars("Value of Work Done");
                    break;
                case 1:
                    lineRow.setParticulars("Material at Site");
                    break;
                case 3:
                    lineRow.setParticulars("Advance");
                    break;
                case 5:
                    lineRow.setParticulars("Advance Recovered");
                    break;
                case 6:
                    lineRow.setParticulars("Retention");
                    break;
                case 7:
                    lineRow.setParticulars("Other Deductions");
                    break;
                default:
                    break;
                }
                if (i == 2 || i == 4 || i == 8) {
                    lineRow.setParticulars("Total");
                }
                lineRow.setEnableFlag("N");
                if ("Advance".equals(hdrRow.getDocumentType()) && i == 3) {
                    lineRow.setEnableFlag("Y");
                } else if (("Retention".equals(hdrRow.getDocumentType()) &&
                            i == 6)) {
                    lineRow.setEnableFlag("Y");
                } else if (("Final Retention Release".equals(hdrRow.getDocumentType()) &&
                            i == 6)) {
                    lineRow.setEnableFlag("Y");
                }
                getPaymentCertLinesVO1().insertRow(lineRow);
            }
        }
    }

    /**
     * Container's getter for MaxPcDocNumVO1.
     * @return MaxPcDocNumVO1
     */
    public MaxPcDocNumVOImpl getMaxPcDocNumVO1() {
        return (MaxPcDocNumVOImpl)findViewObject("MaxPcDocNumVO1");
    }

    public void updatePCLines() {
        PaymentCertHdrVOImpl hdrVO = getPaymentCertHdrVO1();
        PaymentCertHdrVORowImpl hdrRow =
            (PaymentCertHdrVORowImpl)hdrVO.getCurrentRow();
        if (hdrRow != null && hdrRow.getProjectId() != null &&
            hdrRow.getDocumentType() != null && hdrRow.getPeriod() != null) {
            CallableStatement st = null;
            try {
                st =
 getDBTransaction().createCallableStatement(set_pc_line_values, 0);
                st.setLong("p_hdr_id", hdrRow.getPcHeaderId().longValue());
                st.setLong("p_contract_id", hdrRow.getContractId().longValue());
                st.setString("p_username",
                             ((String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName")));
                st.execute();


            } catch (SQLException e) {
                e.printStackTrace();
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        // 7. Close the statement
                        st.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
            getPaymentCertLinesVO1().executeQuery();
        }
    }

    public void updatePCLinesTotals() {
        PaymentCertHdrVOImpl hdrVO = getPaymentCertHdrVO1();
        PaymentCertHdrVORowImpl hdrRow =
            (PaymentCertHdrVORowImpl)hdrVO.getCurrentRow();
        if (hdrRow != null && hdrRow.getProjectId() != null &&
            hdrRow.getDocumentType() != null && hdrRow.getPeriod() != null) {
            CallableStatement st = null;
            try {
                st =
 getDBTransaction().createCallableStatement(set_pc_line_total_values, 0);
                st.setString("p_username",
                             ((String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName")));
                st.setLong("p_hdr_id", hdrRow.getPcHeaderId().longValue());
                st.execute();


            } catch (SQLException e) {
                e.printStackTrace();
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        // 7. Close the statement
                        st.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
            getPaymentCertLinesVO1().executeQuery();
        }
    }

    public void deletePCLines() {
        PaymentCertHdrVOImpl hdrVO = getPaymentCertHdrVO1();
        PaymentCertHdrVORowImpl hdrRow =
            (PaymentCertHdrVORowImpl)hdrVO.getCurrentRow();
        if (hdrRow != null) {
            CallableStatement st = null;
            try {
                st =
 getDBTransaction().createCallableStatement(delete_pc_line_values, 0);
                st.setLong("p_hdr_id", hdrRow.getPcHeaderId().longValue());
                st.setString("p_username",
                             ((String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName")));
                st.execute();


            } catch (SQLException e) {
                e.printStackTrace();
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        // 7. Close the statement
                        st.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
            getPaymentCertLinesVO1().executeQuery();
        }
    }

    public String validateCummulative() {
        PaymentCertLinesVORowImpl lineRow =
            (PaymentCertLinesVORowImpl)getPaymentCertLinesVO1().getCurrentRow();
        if (lineRow != null) {
            if (lineRow.getCummulative() != null &&
                lineRow.getPrevious() != null) {
                if (lineRow.getCummulative().doubleValue() <
                    lineRow.getPrevious().doubleValue()) {
                    lineRow.setCummulative(null);
                    return "Cumulative amount should be grater than previous amount.";
                }
            }
        }
        return "";
    }

    public String validatePCLines() {
        PaymentCertHdrVOImpl hdrVO = getPaymentCertHdrVO1();
        PaymentCertHdrVORowImpl hdrRow =
            (PaymentCertHdrVORowImpl)hdrVO.getCurrentRow();
        getPaymentCertLinesVO1().executeQuery();
        if (hdrRow != null) {
            Row[] pcLines = hdrRow.getPaymentCertLinesVO().getAllRowsInRange();
            if (pcLines.length > 0) {
                for (Row row : pcLines) {
                    PaymentCertLinesVORowImpl pcLine =
                        (PaymentCertLinesVORowImpl)row;
                    if (pcLine.getTransCurrent() != null &&
                        pcLine.getTransCurrent().doubleValue() < 0) {
                        return "Cumulative amount is less than previous amount in line " +
                            pcLine.getParticulars() + " Please Check.";
                    }
                }
            }
        }
        return "";
    }

    /**
     * Container's getter for OtherDeductionsVO1.
     * @return OtherDeductionsVO1
     */
    public OtherDeductionsVOImpl getOtherDeductionsVO1() {
        return (OtherDeductionsVOImpl)findViewObject("OtherDeductionsVO1");
    }

    /**
     * Container's getter for PCHdrToDeductionsVL1.
     * @return PCHdrToDeductionsVL1
     */
    public ViewLinkImpl getPCHdrToDeductionsVL1() {
        return (ViewLinkImpl)findViewLink("PCHdrToDeductionsVL1");
    }

    public void addPCDeductionsRow() {
        PaymentCertHdrVOImpl pcRow = getPaymentCertHdrVO1();
        PaymentCertHdrVORowImpl curPcRow = (PaymentCertHdrVORowImpl)pcRow.getCurrentRow();
        
        OtherDeductionsVORowImpl dedRow =
            (OtherDeductionsVORowImpl)getOtherDeductionsVO1().createRow();
         dedRow.setTransBuId(curPcRow.getBuId());
        dedRow.setTransContractId(curPcRow.getContractId());
        dedRow.setTransPCDate(curPcRow.getPcDate());
        dedRow.setExpOrgId(curPcRow.getTransOperationsExpenditureOrg());
        dedRow.setTransOrgName("Operations");
        getOtherDeductionsVO1().insertRow(dedRow);
//        getOtherDeductionsVO1().executeQuery();
//        getOtherDeductionsVO1().setCurrentRow(dedRow);
    }

    public void updateOtherDeductions() {
        //        PaymentCertHdrVOImpl hdrVO = getPaymentCertHdrVO1();
        //        PaymentCertHdrVORowImpl hdrRow =
        //            (PaymentCertHdrVORowImpl)hdrVO.getCurrentRow();
        //        OtherDeductionsVORowImpl dedRow =
        //            (OtherDeductionsVORowImpl)getOtherDeductionsVO1().getCurrentRow();
        //        getPaymentCertLinesVO1().executeQuery();
        //        if (hdrRow != null && dedRow != null &&
        //            dedRow.getTransTotal() != null) {
        //            Row[] pcLines = hdrRow.getPaymentCertLinesVO().getAllRowsInRange();
        //            for (Row row : pcLines) {
        //                PaymentCertLinesVORowImpl pcLine =
        //                    (PaymentCertLinesVORowImpl)row;
        //                if (pcLine.getPcLineId().equals(new BigDecimal(8))) {
        //                    pcLine.setCummulative(dedRow.getTransTotal());
        //                }
        //            }
        //        }
    }

    public void callpkgForAMEProcessSubmit() {
        CommonUtilsAMImpl commonAM = (CommonUtilsAMImpl)getCommonUtilsAM1();
        PaymentCertHdrVORowImpl hdrRow =
            (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
        if (hdrRow != null) {
            Map paramsMap = new HashMap();
            try {
                paramsMap.put("docId",
                              new oracle.jbo.domain.Number(hdrRow.getPcHeaderId()));
            } catch (SQLException e) {
                        e.printStackTrace();
            }
            paramsMap.put("docTypeId", new oracle.jbo.domain.Number(14));
            paramsMap.put("ActionCode", "Submit");
            paramsMap.put("currEmpId", commonAM.getCurrentEmployeeId());
            paramsMap.put("remarks", "");
            paramsMap.put("docNum", hdrRow.getPcDocumentNum().toString());
            String msg = commonAM.callAMEProcess(paramsMap);
            if (msg != null) {
                submitDocFor("In Process");
                if ("Fianlly Approved".equals(msg)) { //FYI approval only
                    submitDocFor("Approved");
                }
            }
        }
    }

    public void submitDocFor(String toDocStatus) {
        if (getPaymentCertHdrVO1().getCurrentRow() != null) {
            PaymentCertHdrVORowImpl hdrRow =
                (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
            hdrRow.setPcStatus(toDocStatus);
            if ("Approved".equals(toDocStatus)) {
//                CommonUtilsAMImpl commanAM =
//                    (CommonUtilsAMImpl)getCommonUtilsAM1();
//                String userName = commanAM.getCurrentEmployeeUserName();
                //                hdrRow.setApprovedBy(userName);
//                java.sql.Timestamp datetime =
//                    new java.sql.Timestamp(System.currentTimeMillis());
//                oracle.jbo.domain.Date daTime =
//                    new oracle.jbo.domain.Date(datetime);
                //                hdrRow.setApprovedDate(daTime);
            }
        }
    }

    //    public String processInterfaceLine1() {
    //        String message = "SUCCESS";
    //        PaymentCertHdrVORowImpl hdrRow =
    //            (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
    //        ProcessInterfaceLine processIntLine = new ProcessInterfaceLine();
    //        processIntLine.setChangeOperation("Create");
    //        RowIterator linesIterator = hdrRow.getPaymentCertLinesVO();
    //        Row lineRow = linesIterator.first();
    //        while (lineRow != null) {
    //            PaymentCertLinesVORowImpl lineVO =
    //                (PaymentCertLinesVORowImpl)lineRow;
    //            Long lineId =
    //                Long.parseLong(lineVO.getAttribute("DeliveryLineId").toString());
    //            getPaymentCertHdrWSVO1().executeQuery();
    //            Key masterkey = new Key(new Object[] { lineId });
    //            getPaymentCertHdrWSVO1().findAndSetCurrentRowByKey(masterkey, 0);
    //            PaymentCertHdrWSVORowImpl pcRow =
    //                (PaymentCertHdrWSVORowImpl)getPaymentCertHdrWSVO1().getCurrentRow();
    //            if (pcRow == null) {
    //                getPaymentCertHdrWSVO1().findAndSetCurrentRowByKey(masterkey,
    //                                                                   0);
    //                pcRow =
    //                        (PaymentCertHdrWSVORowImpl)getPaymentCertHdrWSVO1().getCurrentRow();
    //            }
    //            InterfaceLine intLine = new InterfaceLine();
    //            com.oracle.xmlns.apps.financials.receivables.transactions.invoices.invoiceservice.ObjectFactory objFactory =
    //                new com.oracle.xmlns.apps.financials.receivables.transactions.invoices.invoiceservice.ObjectFactory();
    //
    //            /** interface line **/
    //            intLine.setOrgId(Long.parseLong(hdrRow.getBuId().toString()));
    //            intLine.setBillCustomerAccountNumber(objFactory.createInterfaceLineBillCustomerAccountNumber(pcRow.getPartyNumber().toString()));
    //            intLine.setShipCustomerAccountNumber(objFactory.createInterfaceLineShipCustomerAccountNumber(pcRow.getPartyNumber().toString()));
    //            if (pcRow.getOrigSystemReference() != null) {
    //                intLine.setOrigSystemShipAddressReference(objFactory.createInterfaceLineOrigSystemShipAddressReference(pcRow.getOrigSystemReference().toString()));
    //                intLine.setOrigSystemBillAddressReference(objFactory.createInterfaceLineOrigSystemBillAddressReference(pcRow.getOrigSystemReference().toString()));
    //            }
    //            //            intLine.setBatchSourceName(pcRow.getArTrxSourceName());
    //            intLine.setCurrencyCode(pcRow.getProjectCurrencyCode());
    //            //            intLine.setCustomerTrxTypeName(objFactory.createInterfaceLineCustomerTrxTypeName(pcRow.getArTrxTypeName()));
    //            //            intLine.setInventoryItemId(objFactory.createInterfaceLineInventoryItemId(Long.parseLong(lineVO.getItemId().toString())));
    //            //            intLine.setDescription(lineVO.getItemDescription());
    //            //            intLine.setLineType("LINE");
    //            //            MeasureType ms = new MeasureType();
    //            //            ms.setUnitCode(lineVO.getUomCode());
    //            //            ms.setValue(lineVO.getShippedQty().getBigDecimalValue());
    //            //            intLine.setQuantity(objFactory.createInterfaceLineQuantity(ms));
    //            //            intLine.setPaymentTermsId(objFactory.createInterfaceLinePaymentTermsId((pcRow.getPaymentTermId()!=null?pcRow.getPaymentTermId().longValue():null)));
    //            //            intLine.setTrxNumber(objFactory.createInterfaceLineTrxNumber(hdrRow.getShipmentNum()));
    //            //            intLine.setTrxDate(objFactory.createInterfaceLineTrxDate(getXmlCalender(new Date(hdrRow.getShippedDate().dateValue()))));
    //            AmountType amt = new AmountType();
    //            amt.setCurrencyCode(pcRow.getProjectCurrencyCode());
    //            Row[] pcLines =
    //                pcRow.getPaymentCertLinesWSVO().getAllRowsInRange();
    //            Double orgListPrice = 0D;
    //            for (Row row : pcLines) {
    //                PaymentCertLinesWSVORowImpl pcLine =
    //                    (PaymentCertLinesWSVORowImpl)row;
    //                if (pcLine != null && pcLine.getPcLineId().equals(9)) {
    //                    orgListPrice =
    //                            pcLine.getCummulative().doubleValue() - pcLine.getPrevious().doubleValue();
    //                }
    //            }
    //            amt.setValue(new BigDecimal(orgListPrice));
    //            intLine.setUnitSellingPrice(objFactory.createInterfaceLineUnitSellingPrice(amt));
    //            //            intLine.setWarehouseId(objFactory.createInterfaceLineWarehouseId(lineVO.getOrganizationId().longValue()));
    //            //            intLine.setUOMCode(objFactory.createInterfaceLineUOMCode(lineVO.getUomCode()));
    //            ProcessControl pc1 = new ProcessControl();
    //            pc1.setPartialFailureAllowed(false);
    //            processIntLine.setProcessControl(pc1);
    //            processIntLine.getInterfaceLine().add(intLine);
    //        }
    //        ARInvoiceCustom arInvCustom = new ARInvoiceCustom();
    //
    //
    //        try {
    //            message = arInvCustom.processIntLine(processIntLine);
    //            if (!("ERROR".equals(message.toString())) &&
    //                !(message.toString().contains("access denied")) &&
    //                !(message.toString().contains("Failed"))) {
    //                message = "SUCCESS";
    //            }
    //            if (message.toString().contains("access denied")) {
    //                message = "You dont have Access.";
    //            }
    //            //            processInterfaceDistribution();
    //        } catch (Exception e) {
    //            e.printStackTrace();
    //            message = e.getMessage();
    //        }
    //        return message;
    //    }
    //
    //    public String processInterfaceDistribution1() {
    //        String message = "SUCCESS";
    //        PaymentCertHdrVORowImpl hdrRow =
    //            (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
    //        ProcessInterfaceDistribution processIntDist =
    //            new ProcessInterfaceDistribution();
    //
    //        processIntDist.setChangeOperation("Create");
    //
    //        RowIterator linesIterator = hdrRow.getPaymentCertLinesVO();
    //        Row lineRow = linesIterator.first();
    //        if (lineRow != null) {
    //            PaymentCertLinesVORowImpl lineVO =
    //                (PaymentCertLinesVORowImpl)lineRow;
    //            Long lineId =
    //                Long.parseLong(lineVO.getAttribute("DeliveryLineId").toString());
    //            getPaymentCertHdrWSVO1().executeQuery();
    //            Key masterkey = new Key(new Object[] { lineId });
    //            getPaymentCertHdrWSVO1().findAndSetCurrentRowByKey(masterkey, 0);
    //            PaymentCertHdrWSVORowImpl pcRow =
    //                (PaymentCertHdrWSVORowImpl)getPaymentCertHdrWSVO1().getCurrentRow();
    //            if (pcRow == null) {
    //                getPaymentCertHdrWSVO1().findAndSetCurrentRowByKey(masterkey,
    //                                                                   0);
    //                pcRow =
    //                        (PaymentCertHdrWSVORowImpl)getPaymentCertHdrWSVO1().getCurrentRow();
    //            }
    //            InterfaceDistribution inDest = new InterfaceDistribution();
    //            com.oracle.xmlns.apps.financials.receivables.transactions.invoices.invoiceservice.ObjectFactory objFactory =
    //                new com.oracle.xmlns.apps.financials.receivables.transactions.invoices.invoiceservice.ObjectFactory();
    //
    //            inDest.setAccountClass("REC");
    //            //            inDest.setCodeCombinationId(objFactory.createInterfaceDistributionCodeCombinationId(pcRow.getReceivableAcctId().longValue()));
    //            inDest.setOrgId(hdrRow.getBuId().longValue());
    //            inDest.setPercent(objFactory.createInterfaceDistributionPercent(new BigDecimal(100)));
    //            processIntDist.getInterfaceDistribution().add(inDest);
    //        }
    //        while (lineRow != null) {
    //            PaymentCertLinesVORowImpl lineVO =
    //                (PaymentCertLinesVORowImpl)lineRow;
    //            Long lineId =
    //                Long.parseLong(lineVO.getAttribute("DeliveryLineId").toString());
    //            getPaymentCertHdrWSVO1().executeQuery();
    //            Key masterkey = new Key(new Object[] { lineId });
    //            getPaymentCertHdrWSVO1().findAndSetCurrentRowByKey(masterkey, 0);
    //            PaymentCertHdrWSVORowImpl pcRow =
    //                (PaymentCertHdrWSVORowImpl)getPaymentCertHdrWSVO1().getCurrentRow();
    //            if (pcRow == null) {
    //                getPaymentCertHdrWSVO1().findAndSetCurrentRowByKey(masterkey,
    //                                                                   0);
    //                pcRow =
    //                        (PaymentCertHdrWSVORowImpl)getPaymentCertHdrWSVO1().getCurrentRow();
    //            }
    //            InterfaceDistribution inDest = new InterfaceDistribution();
    //            com.oracle.xmlns.apps.financials.receivables.transactions.invoices.invoiceservice.ObjectFactory objFactory =
    //                new com.oracle.xmlns.apps.financials.receivables.transactions.invoices.invoiceservice.ObjectFactory();
    //
    //
    //            /**  */
    //
    //
    //            /**  **/
    //
    //            inDest.setAccountClass("REV");
    //            //            String recsAcc = pcRow.getReceivableAcct().toString();
    //            String CodeCombinationId = null;
    //            //            String Combination = null;
    //            //            String[] accs = recsAcc.split("-");
    //            //            if (accs.length > 6) {
    //            //                RowQualifier rq =
    //            //                    new RowQualifier("BuId=" + pcRow.getBuId() + " AND ItemTypeCode='" +
    //            //                                     pcRow.getItemType() + "' AND (to_date('" +
    //            //                                     hdrRow.getShippedDate() +
    //            //                                     "','yyyy-mm-dd') BETWEEN StartDate AND EndDate OR EndDate IS NULL)");
    //            //                Row[] row = getWSItemtypeSetupVO1().getFilteredRows(rq);
    //            //                if (row.length > 0) {
    //            //                    Object newCogsAcc = row[0].getAttribute("RevenueAccount");
    //            //                    if (newCogsAcc != null) {
    //            //                        Combination =
    //            //                                accs[0] + "-" + accs[1] + "-" + newCogsAcc.toString() +
    //            //                                "-" + accs[3] + "-" + accs[4] + "-" + accs[5] +
    //            //                                "-" + accs[6];
    //            //                        List<GLAccountsListing> lines = null;
    //            //                        ExternalReportCustom exReport =
    //            //                            new ExternalReportCustom();
    //            //                        try {
    //            //                            lines =
    //            //                                    exReport.findGLAccountsListReport(Combination,
    //            //                                                                      Long.parseLong(lineVO.getBuId().toString()));
    //            //                        } catch (Exception e) {
    //            //                            e.printStackTrace();
    //            //                        }
    //            //                        if (lines != null) {
    //            //                            for (GLAccountsListing line : lines) {
    //            //                                CodeCombinationId =
    //            //                                        line.getCodeCombinationId().toString();
    //            //                            }
    //            //                        }
    //            //                    }
    //            //                }
    //            //            }
    //            if (CodeCombinationId != null) {
    //                inDest.setCodeCombinationId(objFactory.createInterfaceDistributionCodeCombinationId(Long.parseLong(CodeCombinationId)));
    //            } else {
    //                //                message =
    //                //                        "Revenue Account " + Combination.toString() + " is not defined. Unable to submit AR Interface.";
    //                return message;
    //            }
    //            inDest.setOrgId(hdrRow.getBuId().longValue());
    //            inDest.setPercent(objFactory.createInterfaceDistributionPercent(new BigDecimal(100)));
    //            processIntDist.getInterfaceDistribution().add(inDest);
    //        }
    //        ARInvoiceCustom arInvCustom = new ARInvoiceCustom();
    //
    //
    //        try {
    //            message = arInvCustom.processIntDistribution(processIntDist);
    //            if (!("ERROR".equals(message.toString())) &&
    //                !(message.toString().contains("access denied"))) {
    //                message = "SUCCESS";
    //
    //                //                hdrRow.setAttribute("ArInvoice","Y");
    //            }
    //            if (message.toString().contains("access denied")) {
    //                message = "You dont have Access.";
    //            }
    //        } catch (Exception e) {
    //            e.printStackTrace();
    //            message = e.getMessage();
    //        }
    //        return message;
    //    }

    public Double setPrecision(Double data, Integer precision) {
        Double retData = 0.0;
        if (data != null && precision != null) {
            data = data * (Math.pow(10, precision));
            Long newdata = Math.round(data);
            data = newdata / (Math.pow(10, precision));
            BigDecimal bigData = new BigDecimal(data.toString());
            bigData.setScale(precision);
            retData = bigData.doubleValue();
            return retData;
        }
        return retData;
    }

    /**
     * Container's getter for PaymentCertHdrWSVO1.
     * @return PaymentCertHdrWSVO1
     */
    public PaymentCertHdrWSVOImpl getPaymentCertHdrWSVO1() {
        return (PaymentCertHdrWSVOImpl)findViewObject("PaymentCertHdrWSVO1");
    }

    /**
     * Container's getter for PaymentCertLinesWSVO1.
     * @return PaymentCertLinesWSVO1
     */
    public PaymentCertLinesWSVOImpl getPaymentCertLinesWSVO1() {
        return (PaymentCertLinesWSVOImpl)findViewObject("PaymentCertLinesWSVO1");
    }

    /**
     * Container's getter for PCHdrWSToPCLinesWSVL1.
     * @return PCHdrWSToPCLinesWSVL1
     */
    public ViewLinkImpl getPCHdrWSToPCLinesWSVL1() {
        return (ViewLinkImpl)findViewLink("PCHdrWSToPCLinesWSVL1");
    }

    /**
     * Container's getter for BOQAccountsSetupVO1.
     * @return BOQAccountsSetupVO1
     */
    public BOQAccountsSetupVOImpl getBOQAccountsSetupVO1() {
        return (BOQAccountsSetupVOImpl)findViewObject("BOQAccountsSetupVO1");
    }

    public String validateAccounts() {
        PaymentCertHdrVORowImpl hdrRow =
            (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
        String message = "";
        if (hdrRow != null && hdrRow.getBuId() != null) {
            RowQualifier rq = new RowQualifier("BuId=" + hdrRow.getBuId());
            Row[] accRows = getBOQAccountsSetupVO1().getFilteredRows(rq);
            if (accRows.length > 0) {
                if ("Advance".equals(hdrRow.getDocumentType())) {
                    for (Row row : accRows) {
                        if ("Advance".equals(row.getAttribute("BillCategory"))) {
                            message = "Success";
                        }
                    }
                    return message;
                } else {
                    String[] categories =
                    { "Advance Recovered", "Retention", "Value of Work Done",
                      "Total Receivable", "Total VOWD",
                      "Un-Billed Reveivable" };
                    for (int i = 0; i < categories.length; i++) {
                        rq =
 new RowQualifier("BuId=" + hdrRow.getBuId() + " AND BillCategory='" +
                  categories[i] + "' AND to_date('" + Date.getCurrentDate() +
                  "','rrrr-mm-dd') BETWEEN StartDate and (EndDate or EndDate is null)");
                        accRows = getBOQAccountsSetupVO1().getFilteredRows(rq);
                        if (accRows.length > 0) {
                            message = "Success";
                        } else {
                            return "Please setup all accounts for bill categories in Manage Accounting Setup page before submit.";
                        }
                    }
                }
            } else {
                return "Please setup all accounts for bill categories in Manage Accounting Setup page before submit.";
            }
        }
        return message;
    }

    public String processInterfaceLine() {
        String message = "SUCCESS";
        //        PaymentCertHdrVORowImpl hdrRow =
        //            (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
        //        Long headerId =
        //            Long.parseLong(hdrRow.getAttribute("PcHeaderId").toString());
        //        getPaymentCertHdrWSVO1().executeQuery();
        //        Key masterkey = new Key(new Object[] { headerId });
        //        getPaymentCertHdrWSVO1().findAndSetCurrentRowByKey(masterkey, 0);
        //        PaymentCertHdrWSVORowImpl pcRow =
        //            (PaymentCertHdrWSVORowImpl)getPaymentCertHdrWSVO1().getCurrentRow();
        //        if (pcRow == null) {
        //            getPaymentCertHdrWSVO1().findAndSetCurrentRowByKey(masterkey, 0);
        //            pcRow =
        //                    (PaymentCertHdrWSVORowImpl)getPaymentCertHdrWSVO1().getCurrentRow();
        //        }
        //        ProcessInterfaceLine processIntLine = new ProcessInterfaceLine();
        //        processIntLine.setChangeOperation("Create");
        //        RowIterator linesIterator = pcRow.getPaymentCertLinesWSVO();
        //        Row lineRow = linesIterator.first();
        //        while (lineRow != null) {
        //
        //            InterfaceLine intLine = new InterfaceLine();
        //            com.oracle.xmlns.apps.financials.receivables.transactions.invoices.invoiceservice.ObjectFactory objFactory =
        //                new com.oracle.xmlns.apps.financials.receivables.transactions.invoices.invoiceservice.ObjectFactory();
        //
        //            /** interface line **/
        //            intLine.setOrgId(Long.parseLong(pcRow.getBuId().toString()));
        //            intLine.setBillCustomerAccountNumber(objFactory.createInterfaceLineBillCustomerAccountNumber(pcRow.getAccountNumber().toString()));
        //            intLine.setShipCustomerAccountNumber(objFactory.createInterfaceLineShipCustomerAccountNumber(pcRow.getAccountNumber().toString()));
        //            if (pcRow.getOrigSystemReference() != null) {
        //                intLine.setOrigSystemShipAddressReference(objFactory.createInterfaceLineOrigSystemShipAddressReference(pcRow.getOrigSystemReference().toString()));
        //                intLine.setOrigSystemBillAddressReference(objFactory.createInterfaceLineOrigSystemBillAddressReference(pcRow.getOrigSystemReference().toString()));
        //            }
        //            intLine.setCurrencyCode(pcRow.getProjectCurrencyCode());
        //            intLine.setPaymentTermsId(objFactory.createInterfaceLinePaymentTermsId((pcRow.getTermId()!=null?pcRow.getTermId().longValue():null)));
        //            AmountType amt = new AmountType();
        //            amt.setCurrencyCode(pcRow.getProjectCurrencyCode());
        //            if ("Advance".equals(pcRow.getDocumentType())) {
        //
        //            Row[] rows=pcRow.getPaymentCertLinesWSVO().getAllRowsInRange();
        //            if(rows.length>0){
        //                for(Row row:rows){
        //                    PaymentCertLinesWSVORowImpl Line =
        //                        (PaymentCertLinesWSVORowImpl)row;
        //                    if(new BigDecimal(4).equals(Line.getPcLineId())){
        //                        lineRow=row;
        //                        break;
        //                    }
        //                }
        //            }
        //
        //            }
        //            Double orgListPrice = 0D;
        //            PaymentCertLinesWSVORowImpl pcLine =
        //                (PaymentCertLinesWSVORowImpl)lineRow;
        //            orgListPrice =
        //                    pcLine.getCummulative().doubleValue() - pcLine.getPrevious().doubleValue();
        //
        //            amt.setValue(new BigDecimal(orgListPrice));
        //            intLine.setAmount(objFactory.createInterfaceLineAmount(amt));
        //            intLine.setTrxNumber(objFactory.createInterfaceLineTrxNumber(pcRow.getPcDocumentNum()));
        //            intLine.setTrxDate(objFactory.createInterfaceLineTrxDate(getXmlCalender(new oracle.jbo.domain.Date(hdrRow.getPcDate()))));
        //            intLine.setDescription("PAYMENT CERTIFICATE");
        //            intLine.setLineType("LINE");
        //            if ("Advance".equals(pcRow.getDocumentType())) {
        //                RowQualifier rq =
        //                    new RowQualifier("BuId=" + hdrRow.getBuId() + " AND BillCategory='Advance'" +
        //                                     " AND to_date('"+Date.getCurrentDate()+"','rrrr-mm-dd') BETWEEN StartDate and (EndDate or EndDate is null)");
        //                Row[] accRows = getBOQAccountsSetupVO1().getFilteredRows(rq);
        //                if (accRows.length == 1) {
        //                    BOQAccountsSetupVORowImpl accRow =
        //                        (BOQAccountsSetupVORowImpl)accRows[0];
        //                    intLine.setBatchSourceName(accRow.getArSource());
        //                    intLine.setCustomerTrxTypeName(objFactory.createInterfaceLineCustomerTrxTypeName(accRow.getArTrxType()));
        //                }
        //            } else {
        //                RowQualifier rq =
        //                    new RowQualifier("BuId=" + hdrRow.getBuId() + " AND to_date('"+Date.getCurrentDate()+"','rrrr-mm-dd') BETWEEN StartDate and (EndDate or EndDate is null)");
        //                Row[] accRows = getBOQAccountsSetupVO1().getFilteredRows(rq);
        //                if (accRows.length > 0) {
        //                    for (Row row : accRows) {
        //                        BOQAccountsSetupVORowImpl accRow =
        //                            (BOQAccountsSetupVORowImpl)row;
        //                        if ("Advance Recovered".equals(accRow.getBillCategory()) &&
        //                            pcLine.getPcLineId().longValue()==6L) {
        //                            intLine.setBatchSourceName(accRow.getArSource());
        //                            intLine.setCustomerTrxTypeName(objFactory.createInterfaceLineCustomerTrxTypeName(accRow.getArTrxType()));
        //                        } else if ("Retention".equals(accRow.getBillCategory()) &&
        //                                   pcLine.getPcLineId().longValue()==7L) {
        //                            intLine.setBatchSourceName(accRow.getArSource());
        //                            intLine.setCustomerTrxTypeName(objFactory.createInterfaceLineCustomerTrxTypeName(accRow.getArTrxType()));
        //                        } else if ("Value of Work Done".equals(accRow.getBillCategory()) &&
        //                                   pcLine.getPcLineId().longValue()==1L) {
        //                            intLine.setBatchSourceName(accRow.getArSource());
        //                            intLine.setCustomerTrxTypeName(objFactory.createInterfaceLineCustomerTrxTypeName(accRow.getArTrxType()));
        //                        } else if ("Total Receivable".equals(accRow.getBillCategory()) &&
        //                                   pcLine.getPcLineId().longValue()==9L) {
        //                            intLine.setBatchSourceName(accRow.getArSource());
        //                            intLine.setCustomerTrxTypeName(objFactory.createInterfaceLineCustomerTrxTypeName(accRow.getArTrxType()));
        //                        } else if ("Total VOWD".equals(accRow.getBillCategory()) &&
        //                                   pcLine.getPcLineId().longValue()==3L) {
        //                            intLine.setBatchSourceName(accRow.getArSource());
        //                            intLine.setCustomerTrxTypeName(objFactory.createInterfaceLineCustomerTrxTypeName(accRow.getArTrxType()));
        //                        } else if ("Un-Billed Reveivable".equals(accRow.getBillCategory()) &&
        //                                   pcLine.getPcLineId().longValue()==8L) {
        //                            intLine.setBatchSourceName(accRow.getArSource());
        //                            intLine.setCustomerTrxTypeName(objFactory.createInterfaceLineCustomerTrxTypeName(accRow.getArTrxType()));
        //                        }
        //                    }
        //                }
        //            }
        //            ProcessControl pc1 = new ProcessControl();
        //            pc1.setPartialFailureAllowed(false);
        //            processIntLine.setProcessControl(pc1);
        //            processIntLine.getInterfaceLine().add(intLine);
        //            if ("Advance".equals(pcRow.getDocumentType())) {
        //                lineRow = null;
        //                break;
        //            } else {
        //                if (linesIterator.hasNext()) {
        //                    lineRow = linesIterator.next();
        //                } else {
        //                    break;
        //                }
        //            }
        //        }
        //        ARInvoiceCustom arInvCustom = new ARInvoiceCustom();
        //
        //
        //        try {
        //            message = arInvCustom.processIntLine(processIntLine);
        //            if (!("ERROR".equals(message.toString())) &&
        //                !(message.toString().contains("access denied")) &&
        //                !(message.toString().contains("Failed"))) {
        //                message = "SUCCESS";
        //            }
        //            if (message.toString().contains("access denied")) {
        //                message = "You dont have Access.";
        //            }
        //            //            processInterfaceDistribution();
        //        } catch (Exception e) {
        //            e.printStackTrace();
        //            message = e.getMessage();
        //        }
        return message;


    }

    public String processInterfaceDistribution() {

        String message = "SUCCESS";
        //        PaymentCertHdrVORowImpl hdrRow =
        //            (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();
        //        Long headerId =
        //            Long.parseLong(hdrRow.getAttribute("PcHeaderId").toString());
        //        getPaymentCertHdrWSVO1().executeQuery();
        //        Key masterkey = new Key(new Object[] { headerId });
        //        getPaymentCertHdrWSVO1().findAndSetCurrentRowByKey(masterkey, 0);
        //        PaymentCertHdrWSVORowImpl pcRow =
        //            (PaymentCertHdrWSVORowImpl)getPaymentCertHdrWSVO1().getCurrentRow();
        //        if (pcRow == null) {
        //            getPaymentCertHdrWSVO1().findAndSetCurrentRowByKey(masterkey, 0);
        //            pcRow =
        //                    (PaymentCertHdrWSVORowImpl)getPaymentCertHdrWSVO1().getCurrentRow();
        //        }
        //        ProcessInterfaceDistribution processIntDist =
        //            new ProcessInterfaceDistribution();
        //
        //        processIntDist.setChangeOperation("Create");
        //
        //        RowIterator linesIterator = pcRow.getPaymentCertLinesWSVO();
        //        Row lineRow = linesIterator.first();
        //        if (lineRow != null) {
        //
        //            InterfaceDistribution inDest = new InterfaceDistribution();
        //            com.oracle.xmlns.apps.financials.receivables.transactions.invoices.invoiceservice.ObjectFactory objFactory =
        //                new com.oracle.xmlns.apps.financials.receivables.transactions.invoices.invoiceservice.ObjectFactory();
        //
        //            inDest.setAccountClass("REC");
        //            String CodeCombinationId = null;
        //            String recsAcc = null;
        //            if ("Advance".equals(pcRow.getDocumentType())) {
        //                RowQualifier rq =
        //                    new RowQualifier("BuId=" + hdrRow.getBuId() + " AND BillCategory='Advance'" +
        //                                     " AND to_date('"+Date.getCurrentDate()+"','rrrr-mm-dd') BETWEEN StartDate and (EndDate or EndDate is null))");
        //                Row[] accRows = getBOQAccountsSetupVO1().getFilteredRows(rq);
        //                if (accRows.length == 1) {
        //                    BOQAccountsSetupVORowImpl accRow =
        //                        (BOQAccountsSetupVORowImpl)accRows[0];
        //                    recsAcc = accRow.getAccountCombination();
        //                }
        //            } else {
        //                RowQualifier rq =
        //                    new RowQualifier("BuId=" + hdrRow.getBuId() + " AND BillCategory='Total Receivable'" +
        //                                     " AND to_date('"+Date.getCurrentDate()+"','rrrr-mm-dd') BETWEEN StartDate and (EndDate or EndDate is null))");
        //                Row[] accRows = getBOQAccountsSetupVO1().getFilteredRows(rq);
        //                if (accRows.length == 1) {
        //                    BOQAccountsSetupVORowImpl accRow =
        //                        (BOQAccountsSetupVORowImpl)accRows[0];
        //                    recsAcc = accRow.getAccountCombination();
        //                }
        //            }
        //            List<GLAccountsListing> lines = null;
        //            ExternalReportCustom exReport = new ExternalReportCustom();
        //            try {
        //                lines =
        //                        exReport.findGLAccountsListReport(recsAcc, Long.parseLong(pcRow.getBuId().toString()));
        //            } catch (Exception e) {
        //                e.printStackTrace();
        //            }
        //            if (lines != null) {
        //                for (GLAccountsListing line : lines) {
        //                    CodeCombinationId = line.getCodeCombinationId().toString();
        //                }
        //            }
        //
        //
        //            if (CodeCombinationId != null) {
        //                inDest.setCodeCombinationId(objFactory.createInterfaceDistributionCodeCombinationId(Long.parseLong(CodeCombinationId)));
        //            } else {
        //                message =
        //                        "Revenue Account " + recsAcc.toString() + " is not defined. Unable to submit AR Interface.";
        //                return message;
        //            }
        //            //            inDest.setCodeCombinationId(objFactory.createInterfaceDistributionCodeCombinationId(pcRow.getReceivableAcctId().longValue()));
        //            inDest.setOrgId(pcRow.getBuId().longValue());
        //            inDest.setPercent(objFactory.createInterfaceDistributionPercent(new BigDecimal(100)));
        //            processIntDist.getInterfaceDistribution().add(inDest);
        //        }
        //        while (lineRow != null) {
        //
        //            PaymentCertLinesWSVORowImpl pcLine =
        //                (PaymentCertLinesWSVORowImpl)lineRow;
        //            InterfaceDistribution inDest = new InterfaceDistribution();
        //            com.oracle.xmlns.apps.financials.receivables.transactions.invoices.invoiceservice.ObjectFactory objFactory =
        //                new com.oracle.xmlns.apps.financials.receivables.transactions.invoices.invoiceservice.ObjectFactory();
        //            inDest.setAccountClass("REV");
        //            String recsAcc = null;
        //            //            String recsAcc = pcRow.getReceivableAcct().toString();
        //            String CodeCombinationId = null;
        //            String Combination = null;
        //
        //
        //            if ("Advance".equals(pcRow.getDocumentType())) {
        //                RowQualifier rq =
        //                    new RowQualifier("BuId=" + hdrRow.getBuId() + " AND BillCategory='Advance'" +
        //                                     " AND SYSDATE BETWEEN StartDate and NVL(EndDate,to_date('31-12-4712','dd-mm-rrrr'))");
        //                Row[] accRows = getBOQAccountsSetupVO1().getFilteredRows(rq);
        //                if (accRows.length == 1) {
        //                    BOQAccountsSetupVORowImpl accRow =
        //                        (BOQAccountsSetupVORowImpl)accRows[0];
        //                    recsAcc = accRow.getAccountCombination();
        //                }
        //            } else {
        //                RowQualifier rq =
        //                    new RowQualifier("BuId=" + hdrRow.getBuId() + " AND SYSDATE BETWEEN StartDate and NVL(EndDate,to_date('31-12-4712','dd-mm-rrrr'))");
        //                Row[] accRows = getBOQAccountsSetupVO1().getFilteredRows(rq);
        //                if (accRows.length > 0) {
        //                    for (Row row : accRows) {
        //                        BOQAccountsSetupVORowImpl accRow =
        //                            (BOQAccountsSetupVORowImpl)row;
        //                        if ("Advance Recovered".equals(accRow.getBillCategory()) &&
        //                            pcLine.getPcLineId().longValue()==6L) {
        //                            recsAcc = accRow.getAccountCombination();
        //
        //                        } else if ("Retention".equals(accRow.getBillCategory()) &&
        //                                   pcLine.getPcLineId().longValue()==7L) {
        //                            recsAcc = accRow.getAccountCombination();
        //                        } else if ("Value of Work Done".equals(accRow.getBillCategory()) &&
        //                                   pcLine.getPcLineId().longValue()==1L) {
        //                            recsAcc = accRow.getAccountCombination();
        //
        //                        } else if ("Total Receivable".equals(accRow.getBillCategory()) &&
        //                                   pcLine.getPcLineId().longValue()==9L) {
        //                            recsAcc = accRow.getAccountCombination();
        //
        //                        } else if ("Total VOWD".equals(accRow.getBillCategory()) &&
        //                                   pcLine.getPcLineId().longValue()==3L) {
        //                            recsAcc = accRow.getAccountCombination();
        //
        //                        } else if ("Un-Billed Reveivable".equals(accRow.getBillCategory()) &&
        //                                   pcLine.getPcLineId().longValue()==4L) {
        //                            recsAcc = accRow.getAccountCombination();
        //
        //                        }
        //                    }
        //                }
        //            }
        //
        //            List<GLAccountsListing> lines = null;
        //            ExternalReportCustom exReport = new ExternalReportCustom();
        //            try {
        //                lines =
        //                        exReport.findGLAccountsListReport(recsAcc, Long.parseLong(pcRow.getBuId().toString()));
        //            } catch (Exception e) {
        //                e.printStackTrace();
        //            }
        //            if (lines != null) {
        //                for (GLAccountsListing line : lines) {
        //                    CodeCombinationId = line.getCodeCombinationId().toString();
        //                }
        //            }
        //
        //
        //            if (CodeCombinationId != null) {
        //                inDest.setCodeCombinationId(objFactory.createInterfaceDistributionCodeCombinationId(Long.parseLong(CodeCombinationId)));
        //            } else {
        //                message =
        //                        "Revenue Account " + recsAcc.toString() + " is not defined. Unable to submit AR Interface.";
        //                return message;
        //            }
        //            inDest.setOrgId(hdrRow.getBuId().longValue());
        //            inDest.setPercent(objFactory.createInterfaceDistributionPercent(new BigDecimal(100)));
        //            processIntDist.getInterfaceDistribution().add(inDest);
        //            if ("Advance".equals(pcRow.getDocumentType())) {
        //                lineRow = null;
        //                break;
        //            } else {
        //                if (linesIterator.hasNext()) {
        //                    lineRow = linesIterator.next();
        //                } else {
        //                    break;
        //                }
        //            }
        //        }
        //        ARInvoiceCustom arInvCustom = new ARInvoiceCustom();
        //
        //        try {
        //            message = arInvCustom.processIntDistribution(processIntDist);
        //            if (!("ERROR".equals(message.toString())) &&
        //                !(message.toString().contains("access denied"))) {
        //                message = "SUCCESS";
        //
        //                //                hdrRow.setAttribute("ArInvoice","Y");
        //            }
        //            if (message.toString().contains("access denied")) {
        //                message = "You dont have Access.";
        //            }
        //        } catch (Exception e) {
        //            e.printStackTrace();
        //            message = e.getMessage();
        //        }
        return message;

    }

    public XMLGregorianCalendar getXmlCalender(oracle.jbo.domain.Date date) {
        oracle.jbo.domain.Date oracleDate = date;
        XMLGregorianCalendar xmlDate = null;
        try {

            java.util.Date jDate = oracleDate.getValue();
            GregorianCalendar gc = new GregorianCalendar();
            gc.setTimeInMillis(jDate.getTime());
            DatatypeFactory df = DatatypeFactory.newInstance();
            xmlDate = df.newXMLGregorianCalendar(gc);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return xmlDate;
    }

    /**
     * Container's getter for TransPCHdrVO1.
     * @return TransPCHdrVO1
     */
    public TransPCHdrVOImpl getTransPCHdrVO1() {
        return (TransPCHdrVOImpl)findViewObject("TransPCHdrVO1");
    }

    public String submitPaymentCertificateRequestToAME() {
        CommonUtilsAMImpl commonAM = (CommonUtilsAMImpl)getCommonUtilsAM1();
        PaymentCertHdrVORowImpl hdrRow =
            (PaymentCertHdrVORowImpl)getPaymentCertHdrVO1().getCurrentRow();

        String msg = "";
        if (hdrRow != null) {
            Map paramsMap = new HashMap();
            try {
                paramsMap.put("docId",
                              new oracle.jbo.domain.Number(hdrRow.getPcHeaderId()));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            paramsMap.put("docTypeId", new oracle.jbo.domain.Number(10));
            paramsMap.put("ActionCode", "Submit");
            paramsMap.put("currEmpId", commonAM.getCurrentEmployeeId());
            paramsMap.put("remarks", "");
            paramsMap.put("docNum", hdrRow.getPcNum());
            msg = commonAM.callAMEProcess(paramsMap);
            if (msg != null) {
                if ("Finally Approved".equals(msg)) { //FYI approval only
                    hdrRow.setPcStatus("A");
                } else if ("Submitted".equals(msg)) {
                    hdrRow.setPcStatus("I");
                }
            }
        }
        return msg;
    }

    /**
     * Container's getter for PCDocTypeCountsScrVO1.
     * @return PCDocTypeCountsScrVO1
     */
    public PCDocTypeCountsScrVOImpl getPCDocTypeCountsScrVO1() {
        return (PCDocTypeCountsScrVOImpl)findViewObject("PCDocTypeCountsScrVO1");
    }


    /**
     * Container's getter for AttachmentsVO2.
     * @return AttachmentsVO2
     */
    public AttachmentsVOImpl getAttachmentsVO2() {
        return (AttachmentsVOImpl)findViewObject("AttachmentsVO2");
    }

    /**
     * Container's getter for PCToAttachmentsVL2.
     * @return PCToAttachmentsVL2
     */
    public ViewLinkImpl getPCToAttachmentsVL2() {
        return (ViewLinkImpl)findViewLink("PCToAttachmentsVL2");
    }

    /**
     * Container's getter for AttachmentsVO1.
     * @return AttachmentsVO1
     */
    public AttachmentsVOImpl getAttachmentsVO1() {
        return (AttachmentsVOImpl)findViewObject("AttachmentsVO1");
    }

    /**
     * Container's getter for PCToAttachmentsVL1.
     * @return PCToAttachmentsVL1
     */
    public ViewLinkImpl getPCToAttachmentsVL1() {
        return (ViewLinkImpl)findViewLink("PCToAttachmentsVL1");
    }


    /**
     * Container's getter for TaxLinesDifferenceVO1.
     * @return TaxLinesDifferenceVO1
     */
    public TaxLinesDifferenceVOImpl getTaxLinesDifferenceVO1() {
        return (TaxLinesDifferenceVOImpl)findViewObject("TaxLinesDifferenceVO1");
    }

    /**
     * Container's getter for ProjectTaxDetailsVO1.
     * @return ProjectTaxDetailsVO1
     */
    public ProjectTaxDetailsVOImpl getProjectTaxDetailsVO1() {
        return (ProjectTaxDetailsVOImpl)findViewObject("ProjectTaxDetailsVO1");
    }

    /**
     * Container's getter for PCPrintReportVO1.
     * @return PCPrintReportVO1
     */
    public PCPrintReportVOImpl getPCPrintReportVO1() {
        return (PCPrintReportVOImpl)findViewObject("PCPrintReportVO1");
    }

    /**
     * Container's getter for TransReversePopVO1.
     * @return TransReversePopVO1
     */
    public TransReversePopVOImpl getTransReversePopVO1() {
        return (TransReversePopVOImpl)findViewObject("TransReversePopVO1");
    }
}
