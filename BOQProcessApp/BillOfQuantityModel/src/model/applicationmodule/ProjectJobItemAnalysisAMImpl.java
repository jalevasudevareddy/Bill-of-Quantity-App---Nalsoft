package model.applicationmodule;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.HashSet;
import java.util.Map;

import java.util.Set;

import model.applicationmodule.common.ProjectJobItemAnalysisAM;

import model.searchview.JobTempGroupRescPopulateVOImpl;
import model.searchview.JobTempGroupRescPopulateVORowImpl;
import model.searchview.ResourceItemRateForProjectSearchVOImpl;
import model.searchview.ResourceItemRateForProjectSearchVORowImpl;
import model.searchview.SearchProjectExistInPrjJobHdrVOImpl;

import model.searchview.SearchProjectExistInPrjJobHdrVORowImpl;

import model.view.JobItemAnalysisRescPopulateVOImpl;
import model.view.JobItemAnalysisRescPopulateVORowImpl;
import model.view.JobItemAnalysisVOImpl;
import model.view.JobItemAnalysisVORowImpl;
import model.view.JobItemResourceVOImpl;
import model.view.JobItemResourceVORowImpl;
import model.view.JobTemplateActivityVORowImpl;
import model.view.JobTemplateResourceVOImpl;
import model.view.JobTemplateResourceVORowImpl;
import model.view.ProjectJobHeaderSearchVOImpl;

import model.view.ProjectJobHeaderVOImpl;
import model.view.ProjectJobHeaderVORowImpl;
import model.view.ProjectUsedResourcesVOImpl;
import model.view.ProjectUsedResourcesVORowImpl;
import model.view.ResourceItemsVOImpl;
import model.view.ResourceItemsVORowImpl;
import model.view.TransProjectJobHeaderVOImpl;

import model.view.TransProjectJobHeaderVORowImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 06 15:16:18 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProjectJobItemAnalysisAMImpl extends ApplicationModuleImpl implements ProjectJobItemAnalysisAM {
    private final String UPDATE_PROJECT_RESOURCE_RATE =
        "begin xxboq_bill_of_quantity_pkg.Update_Project_Item_Unit_Rate" +
        "(:p_job_item_any_id,:p_item_id,:P_item_rate);end;";
    private final String REVISE_PROJECT_JOB_ITEM_ANALYSIS =
        "begin xxboq_bill_of_quantity_pkg.revise_prj_job_item_analysis" +
        "(:p_prj_job_header_id,:p_user_name);end;";

    private final String COPY_JOB =
        "begin xxboq_bill_of_quantity_pkg.copy_job_from" +
        "(:p_prj_job_hdr_id,:p_job_item_ana_id,:p_user_name,:p_exe_message);end;";

    /**
     * This is the default constructor (do not remove).
     */
    public ProjectJobItemAnalysisAMImpl() {
    }

    public String copyPrjJobItemAnalysis() {
        String isCopied = null;
        if (getProjectJobHeaderVO1().getCurrentRow() != null) {
            ProjectJobHeaderVORowImpl prjJobHdrRow =
                (ProjectJobHeaderVORowImpl)getProjectJobHeaderVO1().getCurrentRow();
            JobItemAnalysisVORowImpl jobItemAnaRow =
                (JobItemAnalysisVORowImpl)getJobItemAnalysisVO1().getCurrentRow();
            CallableStatement st = null;
            try {
                st = getDBTransaction().createCallableStatement(COPY_JOB, 0);
                st.setLong("p_prj_job_hdr_id",
                           jobItemAnaRow.getProjectJobHeaderId().longValue());
                st.setLong("p_job_item_ana_id",
                           jobItemAnaRow.getJobItemAnalysisId().longValue());

                String userName =
                    ((String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName"));
                st.setString("p_user_name", userName);
                st.registerOutParameter("p_exe_message", Types.VARCHAR);

                st.execute();
                Object isCopiedObj = st.getString("p_exe_message");
                if (isCopiedObj != null) {
                    isCopied = isCopiedObj.toString();
                }

            } catch (SQLException e) {
                e.printStackTrace();
                //                    return e.getLocalizedMessage();
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        // 7. Close the statement
                        st.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return isCopied;
    }

    public void makeRevicesItemAnalysisAsCurrentRow(Number revisedItemAnyId) {
        if (revisedItemAnyId != null) {

            CommonUtilsAMImpl commAM = (CommonUtilsAMImpl)getCommonUtilsAM1();
            commAM.makeAsCurrentRow(getProjectJobHeaderVO1(),
                                    revisedItemAnyId);

        }
    }

    public Number reviseCurrentPrjJobItemAnalysis() {
        Number revPrjJobHdrId = null;
        if (getProjectJobHeaderVO1().getCurrentRow() != null) {
            ProjectJobHeaderVORowImpl prjJobHdrRow =
                (ProjectJobHeaderVORowImpl)getProjectJobHeaderVO1().getCurrentRow();
            CallableStatement st = null;
            try {
                st =
 getDBTransaction().createCallableStatement(REVISE_PROJECT_JOB_ITEM_ANALYSIS,
                                            0);
                st.setLong("p_prj_job_header_id",
                           prjJobHdrRow.getProjectJobHeaderId().longValue());
                String userName =
                    ((String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName"));
                st.setString("p_user_name", userName);
                st.registerOutParameter("p_prj_job_header_id", Types.NUMERIC);

                st.execute();
                Object revPrjJobHdrIdObj = st.getLong("p_prj_job_header_id");
                if (revPrjJobHdrIdObj != null) {
                    revPrjJobHdrId = new Number(revPrjJobHdrIdObj.toString());
                }

            } catch (SQLException e) {
                e.printStackTrace();
                //                    return e.getLocalizedMessage();
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        // 7. Close the statement
                        st.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return revPrjJobHdrId;
    }

    public String updateItemAnyStatusWith(String newStatus) {
        String message = null;
        if (newStatus != null) {
            if (getProjectJobHeaderVO1().getCurrentRow() != null) {
                ProjectJobHeaderVORowImpl prjJobHdrRow =
                    (ProjectJobHeaderVORowImpl)getProjectJobHeaderVO1().getCurrentRow();
                prjJobHdrRow.setStatus(newStatus);
                message = "Success";
                if ("Approved".equals(newStatus)) {
                    CommonUtilsAMImpl commAm =
                        (CommonUtilsAMImpl)getCommonUtilsAM1();
                    prjJobHdrRow.setApprovedBy(commAm.getCurrentEmployeeUserName());
                    prjJobHdrRow.setApprovedDate(new Date(new java.sql.Date(System.currentTimeMillis())));
                }
            }
        }
        return message;
    }

    public void calculateAndUpdatePrjItemUnitRate() {
        try {
            if (getJobItemAnalysisVO1().getCurrentRow() != null) {
                if (getJobItemResourceVO1().getCurrentRow() != null) {
                    JobItemAnalysisVORowImpl jobItemAnaRow =
                        (JobItemAnalysisVORowImpl)getJobItemAnalysisVO1().getCurrentRow();
                    JobItemResourceVORowImpl resrcItemRow =
                        (JobItemResourceVORowImpl)getJobItemResourceVO1().getCurrentRow();
                    Number existItemRate =
                        getProjectItemRate(jobItemAnaRow.getProjectJobHeaderId(),
                                           resrcItemRow.getItemId());
                    if (existItemRate != null) {
                        resrcItemRow.setUnitRate(existItemRate.bigDecimalValue());
                    }

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public Number getProjectItemRate(Number projectJobHdrId, Number itemId) {
        Number itemRate = null;
        try {
            ResourceItemRateForProjectSearchVOImpl resrRateVO =
                getResourceItemRateForProjectSearchVO1();
            resrRateVO.setNamedWhereClauseParam("p_item_id", itemId);
            resrRateVO.setNamedWhereClauseParam("p_prj_job_hdr_id",
                                                projectJobHdrId);
            resrRateVO.executeQuery();
            resrRateVO.setRangeSize(-1);
            if (resrRateVO.getEstimatedRowCount() == 1 &&
                resrRateVO.first() != null) {
                ResourceItemRateForProjectSearchVORowImpl itemRateRow =
                    (ResourceItemRateForProjectSearchVORowImpl)resrRateVO.first();
                itemRate = new Number(itemRateRow.getUnitRate());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return itemRate;
    }

    public String updateProjectResourcesRate() {
        String updateMesssge = null;
        if (getProjectJobHeaderVO1().getCurrentRow() != null &&
            getProjectUsedResourcesVO1().getCurrentRow() != null) {
            if (getProjectJobHeaderVO1().getCurrentRow() != null) {
                ProjectJobHeaderVORowImpl jobAnalyRow =
                    (ProjectJobHeaderVORowImpl)getProjectJobHeaderVO1().getCurrentRow();
                ProjectUsedResourcesVORowImpl prjUsedRescRow =
                    (ProjectUsedResourcesVORowImpl)getProjectUsedResourcesVO1().getCurrentRow();

                CallableStatement st = null;
                try {
                    st =
 getDBTransaction().createCallableStatement(UPDATE_PROJECT_RESOURCE_RATE, 0);
                    st.setLong("p_job_item_any_id",
                               jobAnalyRow.getProjectJobHeaderId().longValue());
                    st.setLong("p_item_id",
                               prjUsedRescRow.getItemId().longValue());
                    st.setDouble("P_item_rate",
                                 prjUsedRescRow.getTransUnitRate().doubleValue());

                    st.execute();


                } catch (SQLException e) {
                    e.printStackTrace();
                    //                    return e.getLocalizedMessage();
                    throw new JboException(e);
                } finally {
                    if (st != null) {
                        try {
                            // 7. Close the statement
                            st.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
            getJobItemResourceVO1().executeQuery();
        }
        return updateMesssge;
    }


    public String updateProjectResourcesRates() {
        String updateMesssge = null;
        if (getProjectJobHeaderVO1().getCurrentRow() != null) {
            ProjectJobHeaderVORowImpl jobAnalyRow =
                (ProjectJobHeaderVORowImpl)getProjectJobHeaderVO1().getCurrentRow();


            RowQualifier rowQf = new RowQualifier("TransUnitRate!=''");
            Row[] modifRows =
                getProjectUsedResourcesVO1().getFilteredRows(rowQf);
            //             Row[] modifRows =
            //                getProjectUsedResourcesVO1().getAllRowsInRange();
            for (Row row : modifRows) {

                ProjectUsedResourcesVORowImpl prjUsedRescRow =
                    (ProjectUsedResourcesVORowImpl)row;
                CallableStatement st = null;

                try {


                    st =
 getDBTransaction().createCallableStatement(UPDATE_PROJECT_RESOURCE_RATE, 0);
                    st.setLong("p_job_item_any_id",
                               jobAnalyRow.getProjectJobHeaderId().longValue());
                    st.setLong("p_item_id",
                               prjUsedRescRow.getItemId().longValue());
                    st.setDouble("P_item_rate",
                                 prjUsedRescRow.getTransUnitRate().doubleValue());

                    st.execute();


                } catch (SQLException e) {
                    e.printStackTrace();
                    //                    return e.getLocalizedMessage();
                    throw new JboException(e);
                } finally {
                    if (st != null) {
                        try {
                            // 7. Close the statement
                            st.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
        getJobItemResourceVO1().executeQuery();
        return updateMesssge;
    }

    public void refreshProjectUsedResourcesVO() {
        if (getProjectJobHeaderVO1().getCurrentRow() != null) {
            ProjectJobHeaderVORowImpl jobAnalyRow =
                (ProjectJobHeaderVORowImpl)getProjectJobHeaderVO1().getCurrentRow();
            getProjectUsedResourcesVO1().setNamedWhereClauseParam("p_prj_job_hdr_id",
                                                                  jobAnalyRow.getProjectJobHeaderId());
            getProjectUsedResourcesVO1().executeQuery();
        }
    }

    public void refreshPopulateJobRescVO() {
        JobItemAnalysisVORowImpl jobItemAnyRow =
            (JobItemAnalysisVORowImpl)getJobItemAnalysisVO1().getCurrentRow();
        Object jobActId = jobItemAnyRow.getJobItemAnalysisId();
        getJobItemAnalysisRescPopulateVO1().clearViewCriterias();
        getJobItemAnalysisRescPopulateVO1().clearCache();

        getJobItemAnalysisRescPopulateVO1().setNamedWhereClauseParam("p_job_id",
                                                                     jobActId);
        getJobItemAnalysisRescPopulateVO1().executeQuery();
    }

    public void populateSelectedResources(Set selectedItems) {
        try {
            //            getJobItemResourceVO1().executeQuery();
            Set selectedPrjJobResc =
                selectedItems != null && selectedItems.size() > 0 ?
                (HashSet<Number>)selectedItems : null;
            if (selectedPrjJobResc != null) {
                Number defVal = new Number(0.0);

                JobItemResourceVOImpl rescVo = getJobItemResourceVO1();


                ResourceItemsVOImpl resourceItemVO = getResourceItemsVO1();

                //
                //                RowQualifier rq = new RowQualifier("TransSelectFlag='Y'");
                //                Row[] rows = jobRescPopltVO.getFilteredRows(rq);

                //
                for (Object itemId : selectedPrjJobResc) {

                    resourceItemVO.applyViewCriteria(null);

                    resourceItemVO.setNamedWhereClauseParam("p_item_id",
                                                            itemId);
                    resourceItemVO.setApplyViewCriteriaName("SearchResourceIteamViewCriteria");
                    resourceItemVO.executeQuery();
                    //                    jobRescPopltVO.setRangeSize(-1);

                    if (resourceItemVO.first() != null) {
                        ResourceItemsVORowImpl rescRow =
                            (ResourceItemsVORowImpl)resourceItemVO.first();
                        JobItemResourceVORowImpl prjResc =
                            (JobItemResourceVORowImpl)rescVo.createRow();
                        //                    rescRow.setJobResourceId(new Number(++maxRescId));
                        prjResc.setSparesPercentage(defVal);
                        prjResc.setMaintenancePercentage(defVal);
                        prjResc.setWastagePercentage(defVal);
                        prjResc.setQuantity(defVal);
                        prjResc.setUnitRate(rescRow.getItemRate());
                        prjResc.setResourceGroupId(new Number(rescRow.getResourceGroupId().doubleValue()));
                        prjResc.setResourceSubGroupId(new Number(rescRow.getResourceSubGroupId().doubleValue()));
                        prjResc.setItemId(new Number(rescRow.getItemId().doubleValue()));
                        rescVo.insertRow(prjResc);
                        this.getDBTransaction().commit();
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void deleteJobItemAnalysisResources() {
        RowSetIterator rowItr = getJobItemResourceVO1().createRowSet(null);
        rowItr.reset();
        while (rowItr.hasNext()) {
            JobItemResourceVORowImpl row =
                (JobItemResourceVORowImpl)rowItr.next();
            if (row.getTransDeleteLineFlag() != null &&
                row.getTransDeleteLineFlag()) {
                row.remove();
            }
        }
    }

    public void initProjectJobResourceRow() {
        try {
            if (getJobItemAnalysisVO1().getCurrentRow() != null) {
                JobItemAnalysisVORowImpl prjJobRow =
                    (JobItemAnalysisVORowImpl)getJobItemAnalysisVO1().getCurrentRow();
                Object analyId = prjJobRow.getJobItemAnalysisId();


                Number defVal = new Number(0.0);

                JobItemResourceVORowImpl rescRow =
                    (JobItemResourceVORowImpl)getJobItemResourceVO1().createRow();


                rescRow.setSparesPercentage(defVal);
                rescRow.setMaintenancePercentage(defVal);
                rescRow.setWastagePercentage(defVal);
                rescRow.setQuantity(defVal);
                rescRow.setUnitRate(defVal.bigDecimalValue());
                rescRow.setTransItemNumber(null);
                getJobItemResourceVO1().insertRow(rescRow);
                //                tempRescVo.executeQuery();
            }
        } catch (SQLException e) {
        }
    }

    public void refreshProjectJobHeaderVO() {
        getProjectJobHeaderVO1().executeQuery();
    }

    public void refreshItemJobAnalysisVO() {
        getJobItemAnalysisVO1().executeQuery();
    }

    public void refreshProjectJobResourceVO() {
        getJobItemResourceVO1().executeQuery();
    }

    public Boolean makeAsCurrentProjectJobActivity(Number prjJobActId) {
        Boolean isCurrentRowSetted = false;
        if (prjJobActId != null) {
            CommonUtilsAMImpl commonAM =
                (CommonUtilsAMImpl)getCommonUtilsAM1();
            if (commonAM.makeAsCurrentRow(getJobItemAnalysisVO1(),
                                          prjJobActId)) {
                isCurrentRowSetted = true;
            }
        }
        return isCurrentRowSetted;
    }

    public Boolean makeAsCurrentProjectJobHeader(Number prjJobHdrId) {
        Boolean isCurrentRowSetted = false;
        if (prjJobHdrId != null) {
            CommonUtilsAMImpl commonAM =
                (CommonUtilsAMImpl)getCommonUtilsAM1();
            if (commonAM.makeAsCurrentRow(getProjectJobHeaderVO1(),
                                          prjJobHdrId)) {
                isCurrentRowSetted = true;
            }
        }
        return isCurrentRowSetted;
    }

    public Boolean isJobItemAnalysisCreatedForProject() {
        Boolean isExist = false;
        if (getTransProjectJobHeaderVO1().getCurrentRow() != null) {
            TransProjectJobHeaderVORowImpl transRow =
                (TransProjectJobHeaderVORowImpl)getTransProjectJobHeaderVO1().getCurrentRow();
            SearchProjectExistInPrjJobHdrVOImpl searchVO =
                getSearchProjectExistInPrjJobHdrVO1();
            searchVO.setNamedWhereClauseParam("p_bu_id",
                                              transRow.getTransBusinessUnitId());
            searchVO.setNamedWhereClauseParam("p_prj_id",
                                              transRow.getTransProjectId());
            searchVO.executeQuery();
            searchVO.setRangeSize(-1);
            if (searchVO.first() != null) {
                SearchProjectExistInPrjJobHdrVORowImpl searchRow =
                    (SearchProjectExistInPrjJobHdrVORowImpl)searchVO.first();
                if (searchRow.getCount1().doubleValue() > 0) {
                    isExist = true;

                }
            }
        }
        return isExist;
    }

    public Number createNewProjectJobHeaderAnalysis() {
        Number prjJobHdrId = null;
        try {

            if (getTransProjectJobHeaderVO1().getCurrentRow() != null) {
                TransProjectJobHeaderVORowImpl transRow =
                    (TransProjectJobHeaderVORowImpl)getTransProjectJobHeaderVO1().getCurrentRow();
                ProjectJobHeaderVOImpl prjJobHdrVO = getProjectJobHeaderVO1();
                ProjectJobHeaderVORowImpl prjJobHdrRow =
                    (ProjectJobHeaderVORowImpl)prjJobHdrVO.createRow();
                prjJobHdrRow.setBusinessUnitId(new Number(transRow.getTransBusinessUnitId().toString()));
                prjJobHdrRow.setProjectId(new Number(transRow.getTransProjectId().doubleValue()));
                prjJobHdrRow.setBusinessUnitId(new Number(transRow.getTransBusinessUnitId().doubleValue()));
                prjJobHdrRow.setVersion(new Number(1));
                prjJobHdrRow.setStatus("Draft");
                prjJobHdrId = prjJobHdrRow.getProjectJobHeaderId();
                prjJobHdrVO.insertRow(prjJobHdrRow);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return prjJobHdrId;
    }

    /**
     * Container's getter for ProjectJobHeaderSearchVO1.
     * @return ProjectJobHeaderSearchVO1
     */
    
    
    public void initTransProjectJobHeaderVO() {
        getTransProjectJobHeaderVO1().insertRow(getTransProjectJobHeaderVO1().createRow());
    }

    public ProjectJobHeaderSearchVOImpl getProjectJobHeaderSearchVO1() {
        return (ProjectJobHeaderSearchVOImpl)findViewObject("ProjectJobHeaderSearchVO1");
    }

    /**
     * Container's getter for TransProjectJobHeaderVO1.
     * @return TransProjectJobHeaderVO1
     */
    public TransProjectJobHeaderVOImpl getTransProjectJobHeaderVO1() {
        return (TransProjectJobHeaderVOImpl)findViewObject("TransProjectJobHeaderVO1");
    }

    /**
     * Container's getter for ProjectJobHeaderVO1.
     * @return ProjectJobHeaderVO1
     */
    public ProjectJobHeaderVOImpl getProjectJobHeaderVO1() {
        return (ProjectJobHeaderVOImpl)findViewObject("ProjectJobHeaderVO1");
    }

    /**
     * Container's getter for SearchProjectExistInPrjJobHdrVO1.
     * @return SearchProjectExistInPrjJobHdrVO1
     */
    public SearchProjectExistInPrjJobHdrVOImpl getSearchProjectExistInPrjJobHdrVO1() {
        return (SearchProjectExistInPrjJobHdrVOImpl)findViewObject("SearchProjectExistInPrjJobHdrVO1");
    }

    /**
     * Container's getter for JobItemAnalysisVO1.
     * @return JobItemAnalysisVO1
     */
    public JobItemAnalysisVOImpl getJobItemAnalysisVO1() {
        return (JobItemAnalysisVOImpl)findViewObject("JobItemAnalysisVO1");
    }

    /**
     * Container's getter for ProjectJobItemHdrToJobItemAnalysisVL1.
     * @return ProjectJobItemHdrToJobItemAnalysisVL1
     */
    public ViewLinkImpl getProjectJobItemHdrToJobItemAnalysisVL1() {
        return (ViewLinkImpl)findViewLink("ProjectJobItemHdrToJobItemAnalysisVL1");
    }

    /**
     * Container's getter for JobItemResourceVO1.
     * @return JobItemResourceVO1
     */
    public JobItemResourceVOImpl getJobItemResourceVO1() {
        return (JobItemResourceVOImpl)findViewObject("JobItemResourceVO1");
    }

    /**
     * Container's getter for jobItemAnalysisToResourceVL1.
     * @return jobItemAnalysisToResourceVL1
     */
    public ViewLinkImpl getjobItemAnalysisToResourceVL1() {
        return (ViewLinkImpl)findViewLink("jobItemAnalysisToResourceVL1");
    }


    /**
     * Container's getter for JobItemAnalysisRescPopulateVO1.
     * @return JobItemAnalysisRescPopulateVO1
     */
    public JobItemAnalysisRescPopulateVOImpl getJobItemAnalysisRescPopulateVO1() {
        return (JobItemAnalysisRescPopulateVOImpl)findViewObject("JobItemAnalysisRescPopulateVO1");
    }

    /**
     * Container's getter for ProjectUsedResourcesVO1.
     * @return ProjectUsedResourcesVO1
     */
    public ProjectUsedResourcesVOImpl getProjectUsedResourcesVO1() {
        return (ProjectUsedResourcesVOImpl)findViewObject("ProjectUsedResourcesVO1");
    }

    /**
     * Container's getter for ResourceItemsVO1.
     * @return ResourceItemsVO1
     */
    public ResourceItemsVOImpl getResourceItemsVO1() {
        return (ResourceItemsVOImpl)findViewObject("ResourceItemsVO1");
    }

    /**
     * Container's getter for ResourceItemRateForProjectSearchVO1.
     * @return ResourceItemRateForProjectSearchVO1
     */
    public ResourceItemRateForProjectSearchVOImpl getResourceItemRateForProjectSearchVO1() {
        return (ResourceItemRateForProjectSearchVOImpl)findViewObject("ResourceItemRateForProjectSearchVO1");
    }

    /**
     * Container's getter for CommonUtilsAM1.
     * @return CommonUtilsAM1
     */
    public ApplicationModuleImpl getCommonUtilsAM1() {
        return (ApplicationModuleImpl)findApplicationModule("CommonUtilsAM1");
    }

}
