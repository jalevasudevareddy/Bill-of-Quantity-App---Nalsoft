package model.applicationmodule;

import java.math.BigDecimal;

import java.sql.SQLException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import java.util.Random;

import java.util.Set;

import model.applicationmodule.common.JobTemplateAM;


import model.searchview.JobCodeExistsForProjectSearchVOImpl;
import model.searchview.JobCodeExistsForProjectSearchVORowImpl;
import model.searchview.JobItemAnalysisIdforJobSearchVOImpl;
import model.searchview.JobItemAnalysisIdforJobSearchVORowImpl;
import model.searchview.JobTempGroupRescPopulateVOImpl;
import model.searchview.JobTempGroupRescPopulateVORowImpl;
import model.searchview.JobTemplateActivitySearchVOImpl;
import model.searchview.JobTemplateActivitySearchVORowImpl;
import model.searchview.JobTemplateExistsForBUSearchVOImpl;
import model.searchview.JobTemplateExistsForBUSearchVORowImpl;
import model.searchview.MaxJobActivityTemplateResourceIdVOImpl;

import model.searchview.MaxProjectJobHeaderIdSearchVOImpl;

import model.searchview.MaxProjectJobHeaderIdSearchVORowImpl;

import model.searchview.ProjectJobResourceCountSearchVOImpl;
import model.searchview.ProjectJobResourceCountSearchVORowImpl;
import model.searchview.ResourceItemRateForProjectSearchVOImpl;

import model.searchview.ResourceItemRateForProjectSearchVORowImpl;

import model.searchview.TemplateRescForJobSearchVOImpl;

import model.searchview.TemplateRescForJobSearchVORowImpl;

import model.view.JobItemAnalysisVOImpl;
import model.view.JobItemAnalysisVORowImpl;
import model.view.JobItemResourceVOImpl;
import model.view.JobItemResourceVORowImpl;
import model.view.JobTemplateResourceVOImpl;


import model.view.JobsCopyToProjectsVOImpl;

import model.view.ResourceItemsVOImpl;
import model.view.TemplateJobsVOImpl;

import oracle.jbo.domain.Number;

import model.view.JobTemplateActivityVOImpl;
import model.view.JobTemplateActivityVORowImpl;
import model.view.JobTemplateResourceVORowImpl;
import model.view.JobTemplateSearchVOImpl;
import model.view.JobTemplateVOImpl;
import model.view.JobTemplateVORowImpl;
import model.view.JobsCopyToProjectsVORowImpl;
import model.view.ProjectJobHeaderVOImpl;
import model.view.ProjectJobHeaderVORowImpl;
import model.view.ResouceSubGroupVORowImpl;
import model.view.ResourceItemsVORowImpl;
import model.view.ResourceMasterGroupVORowImpl;
import model.view.TemplateJobsVORowImpl;
import model.view.TransJobTemplateVOImpl;

import model.view.TransJobTemplateVORowImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 03 10:16:49 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class JobTemplateAMImpl extends ApplicationModuleImpl implements JobTemplateAM {
    /**
     * This is the default constructor (do not remove).
     */
    public JobTemplateAMImpl() {
    }

    public Boolean isJobTemplateExistsForSelectedBU() {
        Boolean isExists = false;
        if (getTransJobTemplateVO1().getCurrentRow() != null) {
            TransJobTemplateVORowImpl transTempRow =
                (TransJobTemplateVORowImpl)getTransJobTemplateVO1().getCurrentRow();
            JobTemplateExistsForBUSearchVOImpl searchVO =
                getJobTemplateExistsForBUSearchVO1();
            searchVO.setNamedWhereClauseParam("p_bu_id",
                                              transTempRow.getTransBuId());
            searchVO.executeQuery();
            if (searchVO.first() != null) {
                JobTemplateExistsForBUSearchVORowImpl jobTemplateSearchRow =
                    (JobTemplateExistsForBUSearchVORowImpl)searchVO.first();
                if (jobTemplateSearchRow.getRowCount().longValue() > 0) {
                    isExists = true;
                }
            }
        }
        return isExists;
    }

    public String copyJobsToProject(Set tempSelectedJobs) {
        String exeMessage = null;
        Map prjRescItemRateMap = new HashMap<Number, Number>();
        Set<Number> selectedJobIds = (Set<Number>)tempSelectedJobs;
        try {
            //            TemplateJobsVOImpl templateJobsVO = getTemplateJobsVO1();
            //            RowQualifier rowQualifier =
            //                new RowQualifier("TransJobSelectFlag='Y'");
            //            Row[] filteredRows = templateJobsVO.getFilteredRows(rowQualifier);
            if (tempSelectedJobs.size() > 0) {
                if (getJobsCopyToProjectsVO1().getCurrentRow() != null) {
                    JobsCopyToProjectsVORowImpl copyJobsToPrj =
                        (JobsCopyToProjectsVORowImpl)getJobsCopyToProjectsVO1().getCurrentRow();
                    Number maxPrjJobHdrId = null;

                    MaxProjectJobHeaderIdSearchVORowImpl maxPrjJobHdrRow =
                        getMaxProjectHeadrRowForId(copyJobsToPrj.getTransProjectId());

                    if (maxPrjJobHdrRow != null) {
                        maxPrjJobHdrId =
                                ("Draft".equals(maxPrjJobHdrRow.getStatus()) ||
                                 "Rejected".equals(maxPrjJobHdrRow.getStatus())) ?
                                new Number(maxPrjJobHdrRow.getProjectJobHeaderId()) :
                                null;
                    } else {
                        maxPrjJobHdrId =
                                createNewProjectItemAnalysisForProject(copyJobsToPrj.getTransProjectId(),
                                                                       copyJobsToPrj.getTransBuId());
                    }

                    //                    maxPrjJobHdrId =
                    //                            getAndMakeCurrentProjectJobHeaderId(copyJobsToPrj.getTransProjectId());

                    //                    maxPrjJobHdrId =
                    //                            maxPrjJobHdrId != null ? maxPrjJobHdrId : createNewProjectItemAnalysisForProject(copyJobsToPrj.getTransProjectId(),
                    //                                                                                                          copyJobsToPrj.getTransBuId());
                    if (maxPrjJobHdrId != null) {
                        CommonUtilsAMImpl commonUtilAM =
                            (CommonUtilsAMImpl)getCommonUtilsAM1();


                        commonUtilAM.makeAsCurrentRow(getProjectJobHeaderVO1(),
                                                      maxPrjJobHdrId);

                        for (Number secActJobId : selectedJobIds) {
                            JobTemplateActivitySearchVOImpl jobTempActSerVO =
                                (JobTemplateActivitySearchVOImpl)getJobTemplateActivitySearchVO1();
                            jobTempActSerVO.applyViewCriteria(null);
                            jobTempActSerVO.setNamedWhereClauseParam("p_job_act_id",
                                                                     secActJobId);
                            jobTempActSerVO.setApplyViewCriteriaName("JobTemplateActivitySearchVOCriteria");
                            jobTempActSerVO.executeQuery();
                            jobTempActSerVO.setRangeSize(-1);
                            if (jobTempActSerVO.first() != null) {
                                JobTemplateActivitySearchVORowImpl copyJobRow =
                                    (JobTemplateActivitySearchVORowImpl)jobTempActSerVO.first();
                                Number activityId =
                                    new Number(copyJobRow.getActivityId());
                                String jobCode = copyJobRow.getJobCode();
                                Number quantity =
                                    new Number(copyJobRow.getQuantity());
                                String uom = copyJobRow.getUom();
                                Number actJobId =
                                    new Number(copyJobRow.getActivityJobId());
                                Number jobItemAnalysisId = null;
                                if (isJobCodeExistsForProject(maxPrjJobHdrId.bigDecimalValue(),
                                                              jobCode)) {
                                    jobItemAnalysisId =
                                            getAndMakeCurrentJobItemAnalysisIdForJob(activityId,
                                                                                     jobCode,
                                                                                     maxPrjJobHdrId);
                                } else {
                                    jobItemAnalysisId =
                                            createJobItemAnalysisForJob(copyJobsToPrj.getTransBuId(),
                                                                        maxPrjJobHdrId,
                                                                        activityId,
                                                                        jobCode.trim(),
                                                                        quantity,
                                                                        uom);
                                }

                                //                            jobItemAnalysisId =
                                //                                    jobItemAnalysisId != null ? jobItemAnalysisId :
                                //                                    createJobItemAnalysisForJob(copyJobsToPrj.getTransBuId(),
                                //                                                                maxPrjJobHdrId,
                                //                                                                activityId,
                                //                                                                jobCode,
                                //                                                                quantity, uom);
                                if (jobItemAnalysisId != null) {
                                    Row[] templateRescs =
                                        getTemplateResourcesforJob(actJobId);
                                    for (Row tempRescRow : templateRescs) {
                                        TemplateRescForJobSearchVORowImpl tempResc =
                                            (TemplateRescForJobSearchVORowImpl)tempRescRow;
                                        //System.out.println(tempResc.getItemId());
                                        Number itemId =
                                            new Number(tempResc.getItemId());
                                        Number tempItemUnitRate =
                                            new Number(tempResc.getUnitRate());
                                        Number rescItemRate =
                                            prjRescItemRateMap.containsKey(itemId) ?
                                            new Number(prjRescItemRateMap.get(itemId).toString()) :
                                            getProjectItemRate(maxPrjJobHdrId,
                                                               itemId);
                                        rescItemRate =
                                                rescItemRate != null ? rescItemRate :
                                                tempItemUnitRate;
                                        prjRescItemRateMap.put(itemId,
                                                               rescItemRate);
                                        if (!isResourceExistsForProjectJob(jobItemAnalysisId,
                                                                           itemId)) {
                                            Number jobItemRescId =
                                                createJobItemResourceForJob(jobItemAnalysisId,
                                                                            new Number(tempResc.getResourceGroupId()),
                                                                            new Number(tempResc.getResourceSubGroupId()),
                                                                            itemId,
                                                                            new Number(tempResc.getQuantity()),
                                                                            rescItemRate,
                                                                            new Number(tempResc.getSparesPercentage()),
                                                                            new Number(tempResc.getWastagePercentage()),
                                                                            new Number(tempResc.getMaintenancePercentage()));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        catch (Exception e) {
            e.printStackTrace();
        }
        this.getDBTransaction().commit();
        return exeMessage;
    }

    public Boolean isJobCodeExistsForProject(BigDecimal prjJobHdrId,
                                             String jobCode) {
        Boolean isExists = false;
        JobCodeExistsForProjectSearchVOImpl jobCodeExistSerVO =
            getJobCodeExistsForProjectSearchVO1();
        jobCodeExistSerVO.setNamedWhereClauseParam("p_prj_job_hdr_id",
                                                   prjJobHdrId);
        jobCodeExistSerVO.setNamedWhereClauseParam("p_job_code",
                                                   jobCode.trim());
        jobCodeExistSerVO.executeQuery();
        if (jobCodeExistSerVO.first() != null) {
            JobCodeExistsForProjectSearchVORowImpl jobCodeExistsSerRow =
                (JobCodeExistsForProjectSearchVORowImpl)jobCodeExistSerVO.first();
            if (jobCodeExistsSerRow.getRowCount().doubleValue() > 0) {
                isExists = true;
            }
        }
        return isExists;
    }

    public Boolean isResourceExistsForProjectJob(Number jobItemAnyId,
                                                 Number itemId) {
        Boolean isExists = false;
        ProjectJobResourceCountSearchVOImpl resouCountVo =
            getProjectJobResourceCountSearchVO1();
        resouCountVo.setNamedWhereClauseParam("p_job_item_any_id",
                                              jobItemAnyId);
        resouCountVo.setNamedWhereClauseParam("p_item_id", itemId);
        resouCountVo.executeQuery();
        if (resouCountVo.first() != null) {
            ProjectJobResourceCountSearchVORowImpl resourceCountRow =
                (ProjectJobResourceCountSearchVORowImpl)resouCountVo.first();
            if (resourceCountRow.getItemCount().longValue() > 0) {
                isExists = true;
            }
        }
        return isExists;
    }

    public Number createJobItemResourceForJob(Number jobItemAnyId,
                                              Number rescGrpId,
                                              Number rescSubGrpId,
                                              Number itemId, Number quantity,
                                              Number unitRate, Number sprPerct,
                                              Number wstPerct,
                                              Number maintPerct) {
        Number jobItemRescId = null;
        //        ProjectJobItemAnalysisAMImpl prjJobItemAnlyAM =
        //            (ProjectJobItemAnalysisAMImpl)getProjectJobItemAnalysisAM1();
        JobItemResourceVOImpl jobItemRescVO = getJobItemResourceVO1();

        JobItemResourceVORowImpl jobItemRescRow =
            (JobItemResourceVORowImpl)jobItemRescVO.createRow();
        jobItemRescRow.setJobItemAnalysisId(jobItemAnyId);
        jobItemRescRow.setResourceGroupId(rescGrpId);
        jobItemRescRow.setResourceSubGroupId(rescSubGrpId);
        jobItemRescRow.setItemId(itemId);
        jobItemRescRow.setQuantity(quantity);
        jobItemRescRow.setUnitRate(unitRate.bigDecimalValue());
        jobItemRescRow.setSparesPercentage(sprPerct);
        jobItemRescRow.setWastagePercentage(wstPerct);
        jobItemRescRow.setMaintenancePercentage(maintPerct);
        jobItemRescId = jobItemRescRow.getJobItemResourceId();
        jobItemRescVO.insertRow(jobItemRescRow);
        return jobItemRescId;
    }

    public Number getProjectItemRate(Number projectJobHdrId, Number itemId) {
        Number itemRate = null;
        try {
            ResourceItemRateForProjectSearchVOImpl resrRateVO =
                getResourceItemRateForProjectSearchVO1();
            resrRateVO.setNamedWhereClauseParam("p_item_id", itemId);
            resrRateVO.setNamedWhereClauseParam("p_prj_job_hdr_id",
                                                projectJobHdrId);
            resrRateVO.executeQuery();
            resrRateVO.setRangeSize(-1);
            if (resrRateVO.getEstimatedRowCount() == 1 &&
                resrRateVO.first() != null) {
                ResourceItemRateForProjectSearchVORowImpl itemRateRow =
                    (ResourceItemRateForProjectSearchVORowImpl)resrRateVO.first();
                itemRate = new Number(itemRateRow.getUnitRate());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return itemRate;
    }

    public Row[] getTemplateResourcesforJob(Number actJobId) {
        Row[] resources = null;
        TemplateRescForJobSearchVOImpl tempResc =
            getTemplateRescForJobSearchVO1();
        tempResc.setNamedWhereClauseParam("p_act_job_id", actJobId);
        tempResc.executeQuery();
        tempResc.setRangeSize(-1);
        resources = tempResc.getAllRowsInRange();
        return resources;

    }

    public Number createJobItemAnalysisForJob(BigDecimal buId,
                                              Number prjJobHdtId, Number actId,
                                              String jobCode, Number qty,
                                              String uom) {
        Number jobItemAnlysisId = null;
        try {
            //            ProjectJobHeaderVOImpl prjJobHdrVO = getProjectJobHeaderVO1();
            //            ProjectJobHeaderVORowImpl prjJobHdrRow =
            //                (ProjectJobHeaderVORowImpl)prjJobHdrVO.getCurrentRow();
            //            prjJobHdrRow.getProjectJobHeaderId();
            //            ProjectJobItemAnalysisAMImpl prjJobItemAnlyAM =
            //                (ProjectJobItemAnalysisAMImpl)getProjectJobItemAnalysisAM1();
            JobItemAnalysisVOImpl jobItemAnalysisVO = getJobItemAnalysisVO1();
            JobItemAnalysisVORowImpl jobItemAnalyRow =
                (JobItemAnalysisVORowImpl)jobItemAnalysisVO.createRow();
            jobItemAnalyRow.setBusinessUnitId(new Number(buId));
            jobItemAnalyRow.setProjectJobHeaderId(prjJobHdtId);
            jobItemAnalyRow.setActivityId(actId);
            jobItemAnalyRow.setJobCode(jobCode);
            jobItemAnalyRow.setQuantity(qty);

            jobItemAnalyRow.setUom(uom);
            jobItemAnlysisId = jobItemAnalyRow.getJobItemAnalysisId();
            jobItemAnalysisVO.insertRow(jobItemAnalyRow);

        } catch (Exception e) {
            e.printStackTrace();
        }

        return jobItemAnlysisId;
    }

    public Number getAndMakeCurrentJobItemAnalysisIdForJob(Number activityId,
                                                           String jobCode,
                                                           Number prjJobHdrId) {
        Number jobItemAnalysisId = null;
        try {
            JobItemAnalysisIdforJobSearchVOImpl jobItemAnalySarchVO =
                getJobItemAnalysisIdforJobSearchVO1();
            jobItemAnalySarchVO.setNamedWhereClauseParam("p_act_id",
                                                         activityId);
            jobItemAnalySarchVO.setNamedWhereClauseParam("p_job_code",
                                                         jobCode);
            jobItemAnalySarchVO.setNamedWhereClauseParam("p_prj_job_hdr_id",
                                                         prjJobHdrId);
            jobItemAnalySarchVO.executeQuery();
            if (jobItemAnalySarchVO.first() != null) {
                JobItemAnalysisIdforJobSearchVORowImpl jobItemAnlyIdRow =
                    (JobItemAnalysisIdforJobSearchVORowImpl)jobItemAnalySarchVO.first();
                jobItemAnalysisId =
                        new Number(jobItemAnlyIdRow.getJobItemAnalysisId());
                CommonUtilsAMImpl commonUtilAM =
                    (CommonUtilsAMImpl)getCommonUtilsAM1();


                commonUtilAM.makeAsCurrentRow(getJobItemAnalysisVO1(),
                                              jobItemAnalysisId);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jobItemAnalysisId;
    }

    public MaxProjectJobHeaderIdSearchVORowImpl getMaxProjectHeadrRowForId(BigDecimal prjJobHdrId) {
        MaxProjectJobHeaderIdSearchVORowImpl maxHdrRow = null;

        try {
            MaxProjectJobHeaderIdSearchVOImpl prjJobHdrIdSearchVO =
                getMaxProjectJobHeaderIdSearchVO1();
            prjJobHdrIdSearchVO.setNamedWhereClauseParam("p_prj_id",
                                                         prjJobHdrId);
            prjJobHdrIdSearchVO.executeQuery();
            prjJobHdrIdSearchVO.setRangeSize(-1);
            if (prjJobHdrIdSearchVO.first() != null) {
                maxHdrRow =
                        (MaxProjectJobHeaderIdSearchVORowImpl)prjJobHdrIdSearchVO.first();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return maxHdrRow;
    }

    public Number getAndMakeCurrentProjectJobHeaderId(BigDecimal prjJobHdrId) {
        Number maxPrjJobHdrId = null;
        try {
            MaxProjectJobHeaderIdSearchVOImpl prjJobHdrIdSearchVO =
                getMaxProjectJobHeaderIdSearchVO1();
            prjJobHdrIdSearchVO.setNamedWhereClauseParam("p_prj_id",
                                                         prjJobHdrId);
            prjJobHdrIdSearchVO.executeQuery();
            prjJobHdrIdSearchVO.setRangeSize(-1);
            if (prjJobHdrIdSearchVO.first() != null) {
                MaxProjectJobHeaderIdSearchVORowImpl maxPrjJobHdrIdRow =
                    (MaxProjectJobHeaderIdSearchVORowImpl)prjJobHdrIdSearchVO.first();
                maxPrjJobHdrId =
                        new Number(maxPrjJobHdrIdRow.getProjectJobHeaderId());


                if (maxPrjJobHdrId != null) {
                    CommonUtilsAMImpl commonUtilAM =
                        (CommonUtilsAMImpl)getCommonUtilsAM1();


                    commonUtilAM.makeAsCurrentRow(getProjectJobHeaderVO1(),
                                                  maxPrjJobHdrId);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return maxPrjJobHdrId;
    }

    public Number createNewProjectItemAnalysisForProject(BigDecimal projectId,
                                                         BigDecimal buId) {
        Number prjJobHdrId = null;
        try {
            //            ProjectJobItemAnalysisAMImpl prjJobItemAnlyAM =
            //                (ProjectJobItemAnalysisAMImpl)getProjectJobItemAnalysisAM1();
            ProjectJobHeaderVOImpl prjJobHdrVO = getProjectJobHeaderVO1();
            ProjectJobHeaderVORowImpl prjJobHdrRow =
                (ProjectJobHeaderVORowImpl)prjJobHdrVO.createRow();
            prjJobHdrRow.setProjectId(new Number(projectId));
            prjJobHdrRow.setBusinessUnitId(new Number(buId));
            prjJobHdrRow.setVersion(new Number(1));
            prjJobHdrRow.setStatus("Draft");
            prjJobHdrId = prjJobHdrRow.getProjectJobHeaderId();
            prjJobHdrVO.insertRow(prjJobHdrRow);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return prjJobHdrId;

    }

    public void refreshTemplateJobsVO() {
        if (getJobTemplateVO1().getCurrentRow() != null) {
            JobTemplateVORowImpl templateRow =
                (JobTemplateVORowImpl)getJobTemplateVO1().getCurrentRow();
            getTemplateJobsVO1().setNamedWhereClauseParam("p_tem_id",
                                                          templateRow.getTemplateId());
            getTemplateJobsVO1().executeQuery();
        }
    }

    public void initCopyJobsToProjectsRow() {
        if (getJobTemplateVO1().getCurrentRow() != null) {
            JobTemplateVORowImpl templateRow =
                (JobTemplateVORowImpl)getJobTemplateVO1().getCurrentRow();
            JobsCopyToProjectsVORowImpl copyToJobsRow =
                (JobsCopyToProjectsVORowImpl)getJobsCopyToProjectsVO1().createRow();
            copyToJobsRow.setTransBuId(templateRow.getBuId().bigDecimalValue());
            getJobsCopyToProjectsVO1().insertRow(copyToJobsRow);
        }
    }

    public void refreshJobTemplateRescVO() {
        JobTemplateActivityVORowImpl tempActRow =
            (JobTemplateActivityVORowImpl)getJobTemplateActivityVO1().getCurrentRow();
        Object jobTempActId = tempActRow.getActivityJobId();
        //        getJobTempGroupRescPopulateVO1().clearViewCriterias();
        //        getJobTempGroupRescPopulateVO1().clearCache();
        getJobTempGroupRescPopulateVO1().setNamedWhereClauseParam("p_job_id",
                                                                  jobTempActId);
        getJobTempGroupRescPopulateVO1().executeQuery();

    }

    public void addResourceData() {
        //        String[] typeArr =
        //        { "L-Labor", "M-Material", "S-Subcontract", "G-General",
        //          "E-Equipment" };
        //        Random typeRandom = new Random();
        //        ResourceMasterGroupVOImpl groupMastVo = getResourceMasterGroupVO1();
        //        for (int i = 1; i < 10; i++) {
        //            String groupName = getGroupName();
        //
        //            ResourceMasterGroupVORowImpl mastRow =
        //                (ResourceMasterGroupVORowImpl)groupMastVo.createRow();
        //            mastRow.setGroupDescription("Some Group desc...");
        //            mastRow.setResourceGroup(groupName);
        //            String[] typeStrArr = typeArr[typeRandom.nextInt(4)].split("-");
        //            mastRow.setResourceType(typeStrArr[1]);
        //            mastRow.setResourceTypeCode(typeStrArr[0]);
        //            mastRow.setBuId(new BigDecimal("300000002183226"));
        //            mastRow.setExpenditureGroup(typeStrArr[0] + "-" + groupName);
        //            groupMastVo.insertRow(mastRow);
        //            ResouceSubGroupVOImpl subGroupVO = getResouceSubGroupVO1();
        //            for (int j = 0; j < 10; j++) {
        //                String subgroupName = getSubGroup();
        //
        //                ResouceSubGroupVORowImpl subGrpRow =
        //                    (ResouceSubGroupVORowImpl)subGroupVO.createRow();
        //                subGrpRow.setResourceType(typeStrArr[1]);
        //                subGrpRow.setResourceTypeCode(typeStrArr[0]);
        //                subGrpRow.setResourceGroup(groupName);
        //                subGrpRow.setResourceSubGroup(subgroupName);
        //                subGrpRow.setBuId(new BigDecimal("300000002183226"));
        //                subGrpRow.setExpenditureCategory(typeStrArr[0] + "-" +
        //                                                 groupName + "-" +
        //                                                 subgroupName);
        //                subGrpRow.setSubGroupDescription("Some Sub Group Desc...");
        //                subGroupVO.insertRow(subGrpRow);
        //                ResourceItemsVOImpl resourceItemVo = getResourceItemsVO1();
        //                for (int k = 0; k < 100; k++) {
        //                    String resourceName = getResource();
        //
        //                    ResourceItemsVORowImpl resourceRow =
        //                        (ResourceItemsVORowImpl)resourceItemVo.createRow();
        //                    resourceRow.setItemCode(resourceName);
        //                    resourceRow.setBuId(new BigDecimal("300000002183226"));
        //                    resourceRow.setItemDescription("new Item resc Desc..");
        //                    resourceRow.setUom("MTR");
        //                    resourceRow.setItemRate(new BigDecimal(k));
        //                    resourceRow.setExpenditureType(typeStrArr[0] + "-" +
        //                                                   groupName + "-" +
        //                                                   subgroupName + "-" +
        //                                                   resourceName);
        //                    resourceItemVo.insertRow(resourceRow);
        //
        //
        //                }
        //            }
        //        }
    }


    //    public String getGroupName() {
    //        String name = "";
    //        char[] alps = new char[52];
    //        int index = 0;
    //        Random alpsRandom = new Random();
    //        for (int a = 65; a < 122; a++) {
    //            if (a != 91 && a != 92 && a != 93 && a != 94 && a != 95) {
    //                alps[index] = (char)a;
    //                index++;
    //            }
    //        }
    //        for (int i = 0; i <= 6; i++) {
    //            name = name + (char)alps[alpsRandom.nextInt(52)];
    //        }
    //        return name;
    //    }
    //
    //    public String getSubGroup() {
    //        String name = "";
    //        char[] alps = new char[52];
    //        int index = 0;
    //        Random alpsRandom = new Random();
    //        for (int a = 65; a < 122; a++) {
    //            if (a != 91 && a != 92 && a != 93 && a != 94 && a != 95) {
    //                alps[index] = (char)a;
    //                index++;
    //            }
    //        }
    //        for (int i = 0; i <= 6; i++) {
    //            name = name + (char)alps[alpsRandom.nextInt(52)];
    //        }
    //        return name;
    //    }

    public void populateSelectedResources(Set tempSelectedResc) {
        try {
            if (tempSelectedResc != null && tempSelectedResc.size() > 0) {
                Set tempSelectedRescSet = (HashSet<Number>)tempSelectedResc;
                if (getJobTemplateActivityVO1().getCurrentRow() != null) {
                    JobTemplateActivityVORowImpl tempActRow =
                        (JobTemplateActivityVORowImpl)getJobTemplateActivityVO1().getCurrentRow();


                    Number defVal = new Number(0.0);

                    JobTemplateResourceVOImpl tempRescVo =
                        getJobTemplateResourceVO1();

                    ResourceItemsVOImpl resourceItemVO = getResourceItemsVO1();

                    //                jobTempRescPopltVO.setRangeSize(-1);
                    //
                    //                RowQualifier rq = new RowQualifier("TransSelectFlag='Y'");
                    //                Row[] rows = jobTempRescPopltVO.getFilteredRows(rq);

                    //
                    for (Object itemId : tempSelectedRescSet) {
                        resourceItemVO.applyViewCriteria(null);

                        resourceItemVO.setNamedWhereClauseParam("p_item_id",
                                                                itemId);
                        resourceItemVO.setApplyViewCriteriaName("SearchResourceIteamViewCriteria");

                        resourceItemVO.executeQuery();
                        if (resourceItemVO.first() != null) {
                            ResourceItemsVORowImpl rescRow =
                                (ResourceItemsVORowImpl)resourceItemVO.first();
                            JobTemplateResourceVORowImpl tempResc =
                                (JobTemplateResourceVORowImpl)tempRescVo.createRow();
                            //                    rescRow.setJobResourceId(new Number(++maxRescId));
                            tempResc.setSparesPercentage(defVal);
                            tempResc.setMaintenancePercentage(defVal);
                            tempResc.setWastagePercentage(defVal);
                            tempResc.setQuantity(defVal);
                            tempResc.setUnitRate(rescRow.getItemRate());
                            tempResc.setResourceGroupId(new Number(rescRow.getResourceGroupId().doubleValue()));
                            tempResc.setResourceSubGroupId(new Number(rescRow.getResourceSubGroupId().doubleValue()));
                            tempResc.setItemId(new Number(rescRow.getItemId().doubleValue()));
                            tempRescVo.insertRow(tempResc);
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //    public String getResource() {
    //        String name = "";
    //        char[] alps = new char[52];
    //        int index = 0;
    //        Random alpsRandom = new Random();
    //        for (int a = 65; a < 122; a++) {
    //            if (a != 91 && a != 92 && a != 93 && a != 94 && a != 95) {
    //                alps[index] = (char)a;
    //                index++;
    //            }
    //        }
    //        for (int i = 0; i <= 6; i++) {
    //            name = name + (char)alps[alpsRandom.nextInt(52)];
    //        }
    //        return name;
    //    }

    public void refreshJobTemplateActivitiesVO() {
        getJobTemplateActivityVO1().executeQuery();
    }

    public void refreshJobTemplateResourcesVO() {
        getJobTemplateResourceVO1().executeQuery();
    }

    public void refreshJobTemplate() {
        getJobTemplateVO1().executeQuery();
    }

    public void deleteJobTemplateActivity() {
        RowSetIterator rowItr = getJobTemplateActivityVO1().createRowSet(null);
        rowItr.reset();
        while (rowItr.hasNext()) {
            JobTemplateActivityVORowImpl row =
                (JobTemplateActivityVORowImpl)rowItr.next();
            if (row.getTransDeleteLineFlag() != null &&
                row.getTransDeleteLineFlag()) {
                row.remove();
            }
        }
    }

    public void deleteJobTemplateResources() {
        RowSetIterator rowItr = getJobTemplateResourceVO1().createRowSet(null);
        rowItr.reset();
        while (rowItr.hasNext()) {
            JobTemplateResourceVORowImpl row =
                (JobTemplateResourceVORowImpl)rowItr.next();
            if (row.getTransDeleteLineFlag() != null &&
                row.getTransDeleteLineFlag()) {
                row.remove();
            }
        }
    }

    public Long getMaxLineIdFor(Object jobTempActId,
                                ViewObjectImpl viewObject) {
        long maxJobActTempRescId = 0;
        ViewObjectImpl liaLineIdVo = viewObject;
        liaLineIdVo.setNamedWhereClauseParam("p_job_act_temp_id",
                                             jobTempActId);

        liaLineIdVo.executeQuery();
        if (liaLineIdVo.first() != null) {
            ViewRowImpl lineId = (ViewRowImpl)liaLineIdVo.first();


            maxJobActTempRescId =
                    lineId.getAttribute("Maxjobresourceid") != null ?
                    Integer.parseInt(lineId.getAttribute("Maxjobresourceid").toString()) :
                    0;

        }
        return maxJobActTempRescId;
    }

    public void initJobTemplateResourceVO() {
        try {
            if (getJobTemplateActivityVO1().getCurrentRow() != null) {
                JobTemplateActivityVORowImpl tempActRow =
                    (JobTemplateActivityVORowImpl)getJobTemplateActivityVO1().getCurrentRow();
                Object jobTempActId = tempActRow.getActivityJobId();
                //                Long maxRescId =
                //                    getMaxLineIdFor(jobTempActId, getMaxJobActivityTemplateResourceIdVO1());


                Number defVal = new Number(0.0);

                JobTemplateResourceVOImpl tempRescVo =
                    getJobTemplateResourceVO1();
                JobTemplateResourceVORowImpl rescRow =
                    (JobTemplateResourceVORowImpl)tempRescVo.createRow();
                //                rescRow.setJobResourceId(new Number(++maxRescId));
                rescRow.setSparesPercentage(defVal);
                rescRow.setMaintenancePercentage(defVal);
                rescRow.setWastagePercentage(defVal);
                rescRow.setQuantity(defVal);
                rescRow.setUnitRate(defVal.bigDecimalValue());
                rescRow.setTransItemNumber(null);
                tempRescVo.insertRow(rescRow);
                //                tempRescVo.executeQuery();
            }
        } catch (SQLException e) {
        }
    }

    public void refreshTransJobtemplateVO(Map attributeMap) {

        if (attributeMap != null &&
            getTransJobTemplateVO1().getCurrentRow() != null) {
            TransJobTemplateVORowImpl transTempRow =
                (TransJobTemplateVORowImpl)getTransJobTemplateVO1().getCurrentRow();
            transTempRow.setTransTemplateName(null);
            transTempRow.setTransTemplateNumber(null);
        }
    }

    public Boolean makeAsCurrentJobActivity(Number jobActivityId) {
        Boolean isCurrentRowSetted = false;
        if (jobActivityId != null) {
            CommonUtilsAMImpl commonAM =
                (CommonUtilsAMImpl)getCommonUtilsAM1();
            if (commonAM.makeAsCurrentRow(getJobTemplateActivityVO1(),
                                          jobActivityId)) {
                isCurrentRowSetted = true;

            }
        }
        return isCurrentRowSetted;
    }

    public Boolean makeAsCurrentrJobActivityTemplate(Number templateId) {
        Boolean isCurrentRowSetted = false;
        if (templateId != null) {
            CommonUtilsAMImpl commonAM =
                (CommonUtilsAMImpl)getCommonUtilsAM1();
            if (commonAM.makeAsCurrentRow(getJobTemplateVO1(), templateId)) {
                isCurrentRowSetted = true;

            }
        }
        return isCurrentRowSetted;
    }

    public Number createNewActivityJobTemplate() {
        Number templateid = null;
        if (getTransJobTemplateVO1().getCurrentRow() != null) {
            TransJobTemplateVORowImpl transTempRow =
                (TransJobTemplateVORowImpl)getTransJobTemplateVO1().getCurrentRow();
            JobTemplateVOImpl jobTemplateVO = getJobTemplateVO1();
            JobTemplateVORowImpl jobTemplateRow =
                (JobTemplateVORowImpl)jobTemplateVO.createRow();
            jobTemplateRow.setTemplateName(transTempRow.getTransTemplateName());
            jobTemplateRow.setTemplateNumber(transTempRow.getTransTemplateNumber());
            try {
                jobTemplateRow.setBusinessUnitId(new Number(transTempRow.getTransBuId().toString()));
            } catch (SQLException e) {
            }
            templateid = jobTemplateRow.getTemplateId();
            jobTemplateVO.insertRow(jobTemplateRow);
        }
        return templateid;
    }

    public void initTransJobTemplateVO() {
        TransJobTemplateVOImpl transJobTempVO = getTransJobTemplateVO1();
        transJobTempVO.insertRow(transJobTempVO.createRow());
    }

    /**
     * Container's getter for JobTemplateSearchVO1.
     * @return JobTemplateSearchVO1
     */
    public JobTemplateSearchVOImpl getJobTemplateSearchVO1() {
        return (JobTemplateSearchVOImpl)findViewObject("JobTemplateSearchVO1");
    }

    /**
     * Container's getter for TransJobTemplateVO1.
     * @return TransJobTemplateVO1
     */
    public TransJobTemplateVOImpl getTransJobTemplateVO1() {
        return (TransJobTemplateVOImpl)findViewObject("TransJobTemplateVO1");
    }


    /**
     * Container's getter for JobTemplateVO1.
     * @return JobTemplateVO1
     */
    public JobTemplateVOImpl getJobTemplateVO1() {
        return (JobTemplateVOImpl)findViewObject("JobTemplateVO1");
    }

    /**
     * Container's getter for JobTemplateActivityVO1.
     * @return JobTemplateActivityVO1
     */
    public JobTemplateActivityVOImpl getJobTemplateActivityVO1() {
        return (JobTemplateActivityVOImpl)findViewObject("JobTemplateActivityVO1");
    }

    /**
     * Container's getter for JobTemplateToJobTemplateActvityVL1.
     * @return JobTemplateToJobTemplateActvityVL1
     */
    public ViewLinkImpl getJobTemplateToJobTemplateActvityVL1() {
        return (ViewLinkImpl)findViewLink("JobTemplateToJobTemplateActvityVL1");
    }

    /**
     * Container's getter for CommonUtilsAM1.
     * @return CommonUtilsAM1
     */
    public ApplicationModuleImpl getCommonUtilsAM1() {
        return (ApplicationModuleImpl)findApplicationModule("CommonUtilsAM1");
    }

    /**
     * Container's getter for JobTemplateResourceVO1.
     * @return JobTemplateResourceVO1
     */
    public JobTemplateResourceVOImpl getJobTemplateResourceVO1() {
        return (JobTemplateResourceVOImpl)findViewObject("JobTemplateResourceVO1");
    }

    /**
     * Container's getter for JobTemplateTemplateToJobTemplateRescVL1.
     * @return JobTemplateTemplateToJobTemplateRescVL1
     */
    public ViewLinkImpl getJobTemplateTemplateToJobTemplateRescVL1() {
        return (ViewLinkImpl)findViewLink("JobTemplateTemplateToJobTemplateRescVL1");
    }

    /**
     * Container's getter for MaxJobActivityTemplateResourceIdVO1.
     * @return MaxJobActivityTemplateResourceIdVO1
     */
    public MaxJobActivityTemplateResourceIdVOImpl getMaxJobActivityTemplateResourceIdVO1() {
        return (MaxJobActivityTemplateResourceIdVOImpl)findViewObject("MaxJobActivityTemplateResourceIdVO1");
    }


    /**
     * Container's getter for JobTempGroupRescPopulateVO1.
     * @return JobTempGroupRescPopulateVO1
     */
    public JobTempGroupRescPopulateVOImpl getJobTempGroupRescPopulateVO1() {
        return (JobTempGroupRescPopulateVOImpl)findViewObject("JobTempGroupRescPopulateVO1");
    }

    /**
     * Container's getter for JobsCopyToProjectsVO1.
     * @return JobsCopyToProjectsVO1
     */
    public JobsCopyToProjectsVOImpl getJobsCopyToProjectsVO1() {
        return (JobsCopyToProjectsVOImpl)findViewObject("JobsCopyToProjectsVO1");
    }

    /**
     * Container's getter for TemplateJobsVO1.
     * @return TemplateJobsVO1
     */
    public TemplateJobsVOImpl getTemplateJobsVO1() {
        return (TemplateJobsVOImpl)findViewObject("TemplateJobsVO1");
    }

    /**
     * Container's getter for MaxProjectJobHeaderIdSearchVO1.
     * @return MaxProjectJobHeaderIdSearchVO1
     */
    public MaxProjectJobHeaderIdSearchVOImpl getMaxProjectJobHeaderIdSearchVO1() {
        return (MaxProjectJobHeaderIdSearchVOImpl)findViewObject("MaxProjectJobHeaderIdSearchVO1");
    }


    /**
     * Container's getter for JobItemAnalysisIdforJobSearchVO1.
     * @return JobItemAnalysisIdforJobSearchVO1
     */
    public JobItemAnalysisIdforJobSearchVOImpl getJobItemAnalysisIdforJobSearchVO1() {
        return (JobItemAnalysisIdforJobSearchVOImpl)findViewObject("JobItemAnalysisIdforJobSearchVO1");
    }

    /**
     * Container's getter for ResourceItemRateForProjectSearchVO1.
     * @return ResourceItemRateForProjectSearchVO1
     */
    public ResourceItemRateForProjectSearchVOImpl getResourceItemRateForProjectSearchVO1() {
        return (ResourceItemRateForProjectSearchVOImpl)findViewObject("ResourceItemRateForProjectSearchVO1");
    }

    /**
     * Container's getter for TemplateRescForJobSearchVO1.
     * @return TemplateRescForJobSearchVO1
     */
    public TemplateRescForJobSearchVOImpl getTemplateRescForJobSearchVO1() {
        return (TemplateRescForJobSearchVOImpl)findViewObject("TemplateRescForJobSearchVO1");
    }

    /**
     * Container's getter for ProjectJobResourceCountSearchVO1.
     * @return ProjectJobResourceCountSearchVO1
     */
    public ProjectJobResourceCountSearchVOImpl getProjectJobResourceCountSearchVO1() {
        return (ProjectJobResourceCountSearchVOImpl)findViewObject("ProjectJobResourceCountSearchVO1");
    }

    /**
     * Container's getter for ResourceItemsVO1.
     * @return ResourceItemsVO1
     */
    public ResourceItemsVOImpl getResourceItemsVO1() {
        return (ResourceItemsVOImpl)findViewObject("ResourceItemsVO1");
    }

    /**
     * Container's getter for JobTemplateActivitySearchVO1.
     * @return JobTemplateActivitySearchVO1
     */
    public JobTemplateActivitySearchVOImpl getJobTemplateActivitySearchVO1() {
        return (JobTemplateActivitySearchVOImpl)findViewObject("JobTemplateActivitySearchVO1");
    }

    /**
     * Container's getter for ProjectJobHeaderVO1.
     * @return ProjectJobHeaderVO1
     */
    public ProjectJobHeaderVOImpl getProjectJobHeaderVO1() {
        return (ProjectJobHeaderVOImpl)findViewObject("ProjectJobHeaderVO1");
    }


    /**
     * Container's getter for JobItemAnalysisVO1.
     * @return JobItemAnalysisVO1
     */
    public JobItemAnalysisVOImpl getJobItemAnalysisVO1() {
        return (JobItemAnalysisVOImpl)findViewObject("JobItemAnalysisVO1");
    }

    /**
     * Container's getter for ProjectJobItemHdrToJobItemAnalysisVL1.
     * @return ProjectJobItemHdrToJobItemAnalysisVL1
     */
    public ViewLinkImpl getProjectJobItemHdrToJobItemAnalysisVL1() {
        return (ViewLinkImpl)findViewLink("ProjectJobItemHdrToJobItemAnalysisVL1");
    }

    /**
     * Container's getter for JobItemResourceVO1.
     * @return JobItemResourceVO1
     */
    public JobItemResourceVOImpl getJobItemResourceVO1() {
        return (JobItemResourceVOImpl)findViewObject("JobItemResourceVO1");
    }

    /**
     * Container's getter for jobItemAnalysisToResourceVL1.
     * @return jobItemAnalysisToResourceVL1
     */
    public ViewLinkImpl getjobItemAnalysisToResourceVL1() {
        return (ViewLinkImpl)findViewLink("jobItemAnalysisToResourceVL1");
    }

    /**
     * Container's getter for JobTemplateExistsForBUSearchVO1.
     * @return JobTemplateExistsForBUSearchVO1
     */
    public JobTemplateExistsForBUSearchVOImpl getJobTemplateExistsForBUSearchVO1() {
        return (JobTemplateExistsForBUSearchVOImpl)findViewObject("JobTemplateExistsForBUSearchVO1");
    }

    /**
     * Container's getter for JobCodeExistsForProjectSearchVO1.
     * @return JobCodeExistsForProjectSearchVO1
     */
    public JobCodeExistsForProjectSearchVOImpl getJobCodeExistsForProjectSearchVO1() {
        return (JobCodeExistsForProjectSearchVOImpl)findViewObject("JobCodeExistsForProjectSearchVO1");
    }
}
