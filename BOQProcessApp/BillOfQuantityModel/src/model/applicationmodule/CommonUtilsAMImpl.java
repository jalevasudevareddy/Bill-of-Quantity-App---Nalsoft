package model.applicationmodule;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import model.searchview.AllPageCountVOImpl;

import model.searchview.BOQHomePageVOImpl;

import model.searchview.BOQWorkListNotificationCountVOImpl;
import model.searchview.CertifiedHomePageVOImpl;
import model.searchview.InvoiceHomePageVOImpl;
import model.searchview.PCHomePageVOImpl;
import model.searchview.WDHomePageVOImpl;

import oracle.jbo.domain.Number;

import model.applicationmodule.common.CommonUtilsAM;

import model.searchview.BOQWorkListNotificationCountVORowImpl;
import model.searchview.InvoicedQtySearchVORowImpl;

import model.view.UserRolesVOImpl;

import model.view.UserRolesVORowImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.xssf.usermodel.XSSFCell;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Oct 08 12:06:15 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CommonUtilsAMImpl extends ApplicationModuleImpl implements CommonUtilsAM {
    /**
     * This is the default constructor (do not remove).
     */
    private String JWT_ROW = "select jwt_key,jwt_value from xx_jwt_config_t";
    private final String AME_PROCESS =
        "begin xxame_pkg.handle_request" + "(:p_document_type_id,:p_request_id,:p_action_code,:p_employee_id,:p_remarks,:p_req_doc_num,:p_work_list_id,:p_source,:p_message);end;";

    private final String WITHDRAW_APPRL_SUBMISSION =
        "begin xxame_pkg.withdraw_submission(:p_document_type_id ,:p_document_id,:p_remarks,:p_user,:p_message);end;";

    private final String CANCEL_DOCUMENT =
        "begin xxame_pkg.cancel_document(:p_document_type_id ,:p_document_id,:p_remarks,:p_user,:p_message);end;";

    private final String UPDATE_DOC_STATUS_FLAG =
        "begin xxboq_bill_of_quantity_pkg.update_status_code(:p_doc_type ,:p_doc_id,:p_user,:p_message);end;";


    public CommonUtilsAMImpl() {
    }

    public String getCurrentUserRoles() {
        String message = null;
        Map<String, String> userRolesMap = new HashMap<String, String>();

        try {
            if (getcurrentEmployeeUserId() != null) {

                UserRolesVOImpl rolesVO = getUserRolesVO1();
                rolesVO.setNamedWhereClauseParam("p_user_id",
                                                 getcurrentEmployeeUserId());
                rolesVO.executeQuery();
                if (rolesVO.first() != null) {
                    UserRolesVORowImpl role =
                        (UserRolesVORowImpl)rolesVO.first();
                    while (role != null) {
                        userRolesMap.put(role.getRoleName(), "Y");
                        if (rolesVO.hasNext()) {
                            role = (UserRolesVORowImpl)rolesVO.next();
                        } else {
                            role = null;
                        }
                    }
                }
                message = "Success";
            }
            ADFContext.getCurrent().getSessionScope().put("userRoles",
                                                          userRolesMap);
            message = "Invalid User Id Found.";
            //            getBOQWorkListNotificationCountVO1().setNamedWhereClauseParam("p_user_id", getcurrentEmployeeUserId());
            getBOQWorkListNotificationCountVO1().executeQuery();
            BOQWorkListNotificationCountVORowImpl row =
                (BOQWorkListNotificationCountVORowImpl)getBOQWorkListNotificationCountVO1().first();
            ADFContext.getCurrent().getSessionScope().put("notificationCount",
                                                          row.getBoqCount());
        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        }
        return message;
    }

    public String updateDocStatusAndCurrFlag(String docType,
                                             BigDecimal docHdrId) {
        String message = null;
        try {
            if (docType != null && docHdrId != null) {
                CallableStatement st =
                    getDBTransaction().createCallableStatement(UPDATE_DOC_STATUS_FLAG,
                                                               0);
                st.setString("p_doc_type", docType);
                st.setLong("p_doc_id", docHdrId.longValue());
                st.setString("p_user",
                             getCurrentSessionScope().get("UserName") != null ?
                             getCurrentSessionScope().get("UserName").toString() :
                             null);
                st.registerOutParameter("p_message", Types.VARCHAR);
                st.execute();

                message = st.getString("p_message");
            }
        } catch (Exception e) {
            message = e.getMessage();
        }
        return message;
    }

    public String withdrawFromApproval(String remarks, Long docId,
                                       Long docTypeId) {
        String message = null;
        try {
            CallableStatement st =
                getDBTransaction().createCallableStatement(WITHDRAW_APPRL_SUBMISSION,
                                                           0);
            st.setLong("p_document_type_id", docTypeId);
            st.setLong("p_document_id", docId);
            st.setString("p_remarks", remarks);
            st.setLong("p_user",
                       getCurrentEmployeeId() != null ? getCurrentEmployeeId().longValue() :
                       -1);

            st.setString("p_message", null);

            st.registerOutParameter("p_message", Types.VARCHAR);
            st.execute();

            message = st.getString("p_message");
            if ("Success".equals(message)) {
                return message;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return message;
    }

    public String cancelDocument(String remarks, Long docId, Long docTypeId) {
        String message = null;
        try {
            CallableStatement st =
                getDBTransaction().createCallableStatement(CANCEL_DOCUMENT, 0);
            st.setLong("p_document_type_id", docTypeId);
            st.setLong("p_document_id", docId);
            st.setString("p_remarks", remarks);
            st.setLong("p_user",
                       getCurrentEmployeeId() != null ? getCurrentEmployeeId().longValue() :
                       -1);

            st.setString("p_message", null);

            st.registerOutParameter("p_message", Types.VARCHAR);
            st.execute();

            message = st.getString("p_message");
            if ("Success".equals(message)) {
                return message;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return message;
    }

    public String getStatusFromCode(String code) {
        String status = null;
        if (code != null) {
            if ("D".equals(code)) {
                status = "Draft";
            } else if ("I".equals(code)) {
                status = "Pending Approval";
            } else if ("A".equals(code)) {
                status = "Approved";
            } else if ("C".equals(code)) {
                status = "Completed";
            } else if ("R".equals(code)) {
                status = "Rejected";
            } else if ("S".equals(code)) {
                status = "Submitted";
            } else if ("CL".equals(code)) {
                status = "Cancelled";
            } else if ("P".equals(code)) {
                status = "Posted";
            } else if ("RV".equals(code)) {
                status = "Revised";
            } else if ("RJ".equals(code)) {
                status = "Rejected";
            } else if ("L".equals(code)) {
                status = "Loaded";
            } else if ("RE".equals(code)) {
                status = "Reversed";
            } else if ("E".equals(code)) {
                status = "Exported";
            } else if ("AC".equals(code)) {
                status = "Active";
            } else if ("W".equals(code)) {
                status = "Withdrawn";
            }
        }

        return status;
    }

    public Map getCurrentSessionScope() {
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        return sessionScope;
    }

    public Boolean makeAsCurrentRow(ViewObjectImpl viewObject,
                                    Object keyValue) {
        if (viewObject != null && keyValue != null) {
            ViewObjectImpl viewObjectImpl = viewObject;
            viewObjectImpl.executeQuery();
            Key masterkey = new Key(new Object[] { keyValue });
            viewObjectImpl.findAndSetCurrentRowByKey(masterkey, 0);
            return true;

        }
        return false;
    }

    public String getCurrnetEmployeeName() {
        Map userMap = (Map)getCurrentSessionScope().get("userMap");
        return (String)(userMap.get("displayName"));
    }

    public String getCurrentEmployeeUserName() {
        Map userMap = (Map)getCurrentSessionScope().get("userMap");
        return (String)(userMap.get("UserName"));
    }

    public Number getcurrentEmployeeUserId() {
        Map userMap = (Map)getCurrentSessionScope().get("userMap");
        Number userId = null;
        try {
            userId = new Number(userMap.get("UserId"));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return userId;
    }

    public Number getCurrentEmployeeId() {
        Map userMap = (Map)getCurrentSessionScope().get("userMap");
        Number employeeId = null;
        try {
            employeeId = new Number(userMap.get("personId"));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return employeeId;
    }

    public Map loadJWTData() {
        Statement st = null;
        String returnCode = null;
        Map JwtMap = new HashMap();
        try {
            st = getDBTransaction().createPreparedStatement(JWT_ROW, 0);
            ResultSet rs = st.executeQuery(JWT_ROW);
            while (rs.next()) {
                JwtMap.put(rs.getString("JWT_KEY"), rs.getString("JWT_VALUE"));
            }
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
        return JwtMap;
    }

    public String callAMEProcess(Map paramsMap) {
        CallableStatement callableStatement = null;
        String msg = "";
        try {
            Long docTypeId =
                Long.parseLong(paramsMap.get("docTypeId").toString());
            Long docId = Long.parseLong(paramsMap.get("docId").toString());
            String actionItem = (String)paramsMap.get("ActionCode");
            Long empId = Long.parseLong(paramsMap.get("currEmpId").toString());
            String remarks = (String)paramsMap.get("remarks");
            String docNum = (String)paramsMap.get("docNum");
            //            SequenceImpl seq=new SequenceImpl("xxame_work_list_s",getDBTransaction());
            Long workListId =
                actionItem.equals("Submit") ? null : Long.parseLong(paramsMap.get("workListId").toString());

            if (docTypeId != null && docId != null && actionItem != null) {
                callableStatement =
                        getDBTransaction().createCallableStatement(AME_PROCESS,
                                                                   0);
                callableStatement.setLong("p_document_type_id",
                                          docTypeId.longValue());
                callableStatement.setLong("p_request_id", docId.longValue());
                callableStatement.setString("p_action_code", actionItem);
                callableStatement.setLong("p_employee_id", empId.longValue());
                callableStatement.setString("p_remarks", remarks);
                callableStatement.setString("p_req_doc_num", docNum);

                if (!actionItem.equals("Submit")) {
                    callableStatement.setLong("p_work_list_id", workListId);
                } else {
                    callableStatement.setNull("p_work_list_id", Types.NULL);
                }
                callableStatement.setString("p_source", "APP");

                callableStatement.registerOutParameter("p_message",
                                                       Types.VARCHAR);

                //                callableStatement.setS

                callableStatement.execute();

                msg = callableStatement.getString("p_message");
            }


        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return msg;

    }

    public Number getUserUploadId() {
        oracle.jbo.domain.Number uploadId = null;

        try {
            Map userMap =
                (Map)ADFContext.getCurrent().getSessionScope().get("userMap");
            if (userMap != null) {
                SequenceImpl seq =
                    new SequenceImpl("XXBOQ_UPLOAD_SEQUENCE_S", getDBTransaction());
                uploadId = seq.getSequenceNumber();
                ((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).put("uploadId",
                                                                                    uploadId);
            } else {
                uploadId =
                        new oracle.jbo.domain.Number(((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("uploadId").toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return uploadId;
    }

    public Object getCellValue(XSSFCell cell) {
        Object value = null;
        if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) {
            value = cell.getRichStringCellValue().getString();
        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {
            value = cell.getNumericCellValue();
            if (HSSFDateUtil.isCellDateFormatted(cell)) {
                value = cell.getDateCellValue();
            }
        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BOOLEAN) {
            value = cell.getBooleanCellValue();
        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_BLANK) {
            value = null;
        } else if (cell.getCellType() == XSSFCell.CELL_TYPE_ERROR) {
            value = cell.getErrorCellValue();
        }
        return value;
    }

    public void loadHomePage() {
        getAllPageCountVO1().setNamedWhereClauseParam("p_doc_type", "BOQ");
        getAllPageCountVO1().executeQuery();
        getAllPageCountVO2().setNamedWhereClauseParam("p_doc_type", "WD");
        getAllPageCountVO2().executeQuery();
        getAllPageCountVO3().setNamedWhereClauseParam("p_doc_type", "INV");
        getAllPageCountVO3().executeQuery();
        getAllPageCountVO4().setNamedWhereClauseParam("p_doc_type", "CER");
        getAllPageCountVO4().executeQuery();
        getAllPageCountVO5().setNamedWhereClauseParam("p_doc_type", "PC");
        getAllPageCountVO5().executeQuery();
    }

    public String homePageDoc() {
        String message = "";
        try {
            Map pageFlowScope = ADFContext.getCurrent().getPageFlowScope();
            String switcher = String.valueOf(pageFlowScope.get("switcher"));
            String docType =
                pageFlowScope.get("DocType") == null ? null : pageFlowScope.get("DocType").toString();
            if ("BOQ".equals(switcher)) {
                getBOQHomePageVO1().setNamedWhereClauseParam("p_status",
                                                             docType);
                getBOQHomePageVO1().executeQuery();
            } else if ("WD".equals(switcher)) {
                getWDHomePageVO1().setNamedWhereClauseParam("p_status",
                                                            docType);
                getWDHomePageVO1().executeQuery();
            } else if ("INV".equals(switcher)) {
                getInvoiceHomePageVO1().setNamedWhereClauseParam("p_status",
                                                                 docType);
                getInvoiceHomePageVO1().executeQuery();
            } else if ("CER".equals(switcher)) {
                getCertifiedHomePageVO1().setNamedWhereClauseParam("p_status",
                                                                   docType);
                getCertifiedHomePageVO1().executeQuery();
            } else if ("PC".equals(switcher)) {
                getPCHomePageVO1().setNamedWhereClauseParam("p_status",
                                                            docType);
                getPCHomePageVO1().executeQuery();
            }
            message = "Success";
        } catch (Exception e) {
            message = e.getMessage();
        }
        return message;
    }

    /**
     * Container's getter for UserRolesVO1.
     * @return UserRolesVO1
     */
    public UserRolesVOImpl getUserRolesVO1() {
        return (UserRolesVOImpl)findViewObject("UserRolesVO1");
    }

    /**
     * Container's getter for AllPageCountVO1.
     * @return AllPageCountVO1
     */
    public AllPageCountVOImpl getAllPageCountVO1() {
        return (AllPageCountVOImpl)findViewObject("AllPageCountVO1");
    }

    /**
     * Container's getter for AllPageCountVO2.
     * @return AllPageCountVO2
     */
    public AllPageCountVOImpl getAllPageCountVO2() {
        return (AllPageCountVOImpl)findViewObject("AllPageCountVO2");
    }

    /**
     * Container's getter for AllPageCountVO3.
     * @return AllPageCountVO3
     */
    public AllPageCountVOImpl getAllPageCountVO3() {
        return (AllPageCountVOImpl)findViewObject("AllPageCountVO3");
    }

    /**
     * Container's getter for AllPageCountVO4.
     * @return AllPageCountVO4
     */
    public AllPageCountVOImpl getAllPageCountVO4() {
        return (AllPageCountVOImpl)findViewObject("AllPageCountVO4");
    }

    /**
     * Container's getter for AllPageCountVO5.
     * @return AllPageCountVO5
     */
    public AllPageCountVOImpl getAllPageCountVO5() {
        return (AllPageCountVOImpl)findViewObject("AllPageCountVO5");
    }

    /**
     * Container's getter for BOQHomePageVO1.
     * @return BOQHomePageVO1
     */
    public BOQHomePageVOImpl getBOQHomePageVO1() {
        return (BOQHomePageVOImpl)findViewObject("BOQHomePageVO1");
    }

    /**
     * Container's getter for WDHomePageVO1.
     * @return WDHomePageVO1
     */
    public WDHomePageVOImpl getWDHomePageVO1() {
        return (WDHomePageVOImpl)findViewObject("WDHomePageVO1");
    }

    /**
     * Container's getter for InvoiceHomePageVO1.
     * @return InvoiceHomePageVO1
     */
    public InvoiceHomePageVOImpl getInvoiceHomePageVO1() {
        return (InvoiceHomePageVOImpl)findViewObject("InvoiceHomePageVO1");
    }

    /**
     * Container's getter for CertifiedHomePageVO1.
     * @return CertifiedHomePageVO1
     */
    public CertifiedHomePageVOImpl getCertifiedHomePageVO1() {
        return (CertifiedHomePageVOImpl)findViewObject("CertifiedHomePageVO1");
    }

    /**
     * Container's getter for PCHomePageVO1.
     * @return PCHomePageVO1
     */
    public PCHomePageVOImpl getPCHomePageVO1() {
        return (PCHomePageVOImpl)findViewObject("PCHomePageVO1");
    }

    /**
     * Container's getter for BOQWorkListNotificationCountVO1.
     * @return BOQWorkListNotificationCountVO1
     */
    public BOQWorkListNotificationCountVOImpl getBOQWorkListNotificationCountVO1() {
        return (BOQWorkListNotificationCountVOImpl)findViewObject("BOQWorkListNotificationCountVO1");
    }
    
    public String decodeUrl(){
        String message ="Success";  
        try{
            String scopeValues = null;
            String actual = null;
            String encodeUrl = (String)ADFContext.getCurrent().getPageFlowScope().get("target"); 
            CallableStatement cs=getDBTransaction().createCallableStatement("begin ? := xxpa_mail_data_pkg.encodeurl(?); end;",0);
            cs.registerOutParameter(1, Types.VARCHAR);
            cs.setString(2, encodeUrl);
            cs.executeUpdate();
            actual = cs.getString(1);
           
            String[] paramValues = actual.split("&");  
            for (int i = 0;i<paramValues.length;i++) {
                scopeValues = paramValues[i];
                if(scopeValues != null){
                    String[] params = scopeValues.split("=");
                    String key = "";
                    String value = "";
                        for (int j = 0;j<params.length;j++) {
                            if(j == 0){
                                key = params[j];
                            }if(j==1){
                                value = params[j];
                            }
                        }                 
                        if("personId".equalsIgnoreCase(key) || "userName".equalsIgnoreCase(key)){
                            ADFContext.getCurrent().getSessionScope().put(key, value);
                        }else{
                          ADFContext.getCurrent().getPageFlowScope().put(key, value);
                            System.out.println(key + "********************************" + value);
                        }
                }
            }            
        }catch(Exception e){
            e.printStackTrace();
        }
        return message;
    }
}
