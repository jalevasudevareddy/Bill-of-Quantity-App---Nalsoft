package model.applicationmodule;

//import com.oracle.xmlns.adf.svc.types.AmountType;
//import com.oracle.xmlns.adf.svc.types.MeasureType;
//import com.oracle.xmlns.apps.projects.control.budgetsandforecasts.budgetservicev2.ObjectFactory;
//import com.oracle.xmlns.apps.projects.control.budgetsandforecasts.budgetservicev2.ProjectBudgetInput;
//
//import com.oracle.xmlns.apps.projects.control.budgetsandforecasts.budgetservicev2.types.CreateBudget;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

import model.applicationmodule.common.PlanningScheduleAM;

import model.view.ActivityLevelPlanningVOImpl;
import model.view.ActivityLevelPlanningVORowImpl;
import model.view.ActivityLineLevelPlanVOImpl;
import model.view.ActivityLineLevelPlanVORowImpl;
import model.view.CertifiedQtyDetailsVOImpl;
import model.view.CertifiedQtyDetailsVORowImpl;
import model.view.JobLevelPlanningVOImpl;
import model.view.JobLevelPlanningVORowImpl;
import model.view.JobLineLevelPlanningVOImpl;
import model.view.JobLineLevelPlanningVORowImpl;
import model.view.PlanningScheduleHdrVOImpl;
import model.view.PlanningScheduleHdrVORowImpl;
import model.view.PlanningScheduleSearchVOImpl;

import model.view.PlanningScheduleSearchVORowImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 05 12:26:43 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PlanningScheduleAMImpl extends ApplicationModuleImpl implements PlanningScheduleAM {

    private final String POPULATE_ACTIVITY_PLAN_LINES =
        "begin xxboq_bill_of_quantity_pkg.POPULATE_ACTIVITY_PLAN_LINES" +
        "(:p_header_id,:p_username,:p_bu_id,:p_prj_id);end;";
    private final String validate_planning_period =
        "begin xxboq_bill_of_quantity_pkg.validate_planning_period" +
        "(:p_budget_type,:p_prj_id,:p_plan_period,:p_period,:p_message);end;";
    private final String VALIDATE_PS_HDR =
        "begin xxboq_bill_of_quantity_pkg.VALIDATE_PS_HDR" +
        "(:p_prj_id,:p_header_id,:p_message);end;";
    private final String revise_planning_schedule_doc =
        "begin xxboq_bill_of_quantity_pkg.revise_planning_schedule_doc" +
        "(:p_header_id,:p_username,:p_change_reason,:p_out_hdr_id);end;";

    /**
     * This is the default constructor (do not remove).
     */
    public PlanningScheduleAMImpl() {
    }


    /**
     * Container's getter for PlanningScheduleSearchVO1.
     * @return PlanningScheduleSearchVO1
     */
    public PlanningScheduleSearchVOImpl getPlanningScheduleSearchVO1() {
        return (PlanningScheduleSearchVOImpl)findViewObject("PlanningScheduleSearchVO1");
    }

    /**
     * Container's getter for PlanningScheduleHdrVO1.
     * @return PlanningScheduleHdrVO1
     */
    public PlanningScheduleHdrVOImpl getPlanningScheduleHdrVO1() {
        return (PlanningScheduleHdrVOImpl)findViewObject("PlanningScheduleHdrVO1");
    }

    public void editDocument() {
        PlanningScheduleHdrVOImpl hdrVO = getPlanningScheduleHdrVO1();
        hdrVO.executeQuery();
        PlanningScheduleSearchVOImpl searchVO = getPlanningScheduleSearchVO1();
        Row currentRow = searchVO.getCurrentRow();
        if (currentRow != null) {
            Key masterkey =
                new Key(new Object[] { currentRow.getAttribute("HeaderId") });
            hdrVO.findAndSetCurrentRowByKey(masterkey, 0);
        }

        getActivityLevelPlanningVO1().applyViewCriteria(null);
        getActivityLevelPlanningVO1().executeQuery();
        if (getActivityLevelPlanningVO1().first() != null) {
            getActivityLevelPlanningVO1().setCurrentRow(getActivityLevelPlanningVO1().first());
        }
        if (getJobLevelPlanningVO1().first() != null) {
            getJobLevelPlanningVO1().setCurrentRow(getActivityLevelPlanningVO1().first());
        }
        //        getActivityLineLevelPlanVO1().executeQuery();
    }

    public void cancelDocument() {
        getPlanningScheduleHdrVO1().getCurrentRow().remove();
        getPlanningScheduleHdrVO1().executeQuery();
    }

    public String createDocument() {
        String message = "";
        PlanningScheduleHdrVOImpl HdrVO = getPlanningScheduleHdrVO1();
        PlanningScheduleHdrVORowImpl hdrRow =
            (PlanningScheduleHdrVORowImpl)HdrVO.getCurrentRow();
        if (hdrRow != null) {
            Long hdrId = new Long(hdrRow.getHeaderId().toString());
            HdrVO.executeQuery();
            Key masterkey = new Key(new Object[] { hdrId });
            HdrVO.findAndSetCurrentRowByKey(masterkey, 0);
            hdrRow = (PlanningScheduleHdrVORowImpl)HdrVO.getCurrentRow();
            //            ViewObjectImpl vo=getMaxIANumberVO1();
            //            vo.setNamedWhereClauseParam("p_bu_id", hdrRow.getBuId());
            //            vo.setNamedWhereClauseParam("p_prj_id", hdrRow.getProjectId());
            //            vo.executeQuery();
            //            Row[] rows=vo.getAllRowsInRange();
            //            if(rows.length>0){
            //                if(rows[0].getAttribute("Version")!=null){
            //                    hdrRow.setIaVersion(new BigDecimal(rows[0].getAttribute("Version").toString()));
            //                }
            if (hdrRow != null) {
                CallableStatement st = null;
                try {
                    st =
 getDBTransaction().createCallableStatement(VALIDATE_PS_HDR, 0);
                    st.setLong("p_prj_id", hdrRow.getProjectId().longValue());
                    st.setLong("p_header_id",
                               hdrRow.getHeaderId().longValue());
                    st.registerOutParameter("p_message", Types.VARCHAR);
                    st.execute();
                    message = st.getString("p_message");

                } catch (SQLException e) {
                    e.printStackTrace();
                    message = e.getMessage();
                    return message;
                    //                                      throw new JboException(e);
                } finally {
                    if (st != null) {
                        try {
                            // 7. Close the statement
                            st.close();
                        } catch (SQLException e) {
                        }
                    }
                }
                if (!"Y".equals(message)) {
                    return message;
                }
            }
            HdrVO.executeQuery();
            HdrVO.findAndSetCurrentRowByKey(masterkey, 0);
        }
        return "";
    }

    public void createHeaderRow() {
        PlanningScheduleHdrVOImpl searchVO = getPlanningScheduleHdrVO1();
        PlanningScheduleHdrVORowImpl searchRow =
            (PlanningScheduleHdrVORowImpl)searchVO.createRow();
        searchRow.setVersionNo(new BigDecimal(0));
        searchRow.setStatus("Draft");
        searchVO.insertRow(searchRow);
    }

    public void callpkgForAMEProcessSubmit() {
        CommonUtilsAMImpl commonAM = (CommonUtilsAMImpl)getCommonUtilsAM1();
        PlanningScheduleHdrVORowImpl hdrRow =
            (PlanningScheduleHdrVORowImpl)getPlanningScheduleHdrVO1().getCurrentRow();
        Long hdrId = new Long(hdrRow.getHeaderId().longValue());
        if (hdrRow != null) {
            Map paramsMap = new HashMap();
            try {
                paramsMap.put("docId",
                              new oracle.jbo.domain.Number(hdrRow.getHeaderId()));
            } catch (SQLException e) {
            }
            paramsMap.put("docTypeId", new oracle.jbo.domain.Number(11));
            paramsMap.put("ActionCode", "Submit");
            paramsMap.put("currEmpId", commonAM.getCurrentEmployeeId());
            paramsMap.put("remarks", "");
            paramsMap.put("docNum", hdrRow.getHeaderId().toString());
            String msg = commonAM.callAMEProcess(paramsMap);

            //            getPlanningScheduleHdrVO1().executeQuery();
            //            ViewObjectImpl Custheader = getPlanningScheduleHdrVO1();
            //            Key masterkey = new Key(new Object[] { hdrId });
            //            Custheader.findAndSetCurrentRowByKey(masterkey, 0);
            if (msg != null) {
                submitDocFor("In Process");
                if ("Fianlly Approved".equals(msg)) { //FYI approval only
                    submitDocFor("Approved");
                }
            }
        }
    }

    public void submitDocFor(String toDocStatus) {
        if (getPlanningScheduleHdrVO1().getCurrentRow() != null) {
            PlanningScheduleHdrVORowImpl hdrRow =
                (PlanningScheduleHdrVORowImpl)getPlanningScheduleHdrVO1().getCurrentRow();
            hdrRow.setStatus(toDocStatus);
            if ("Approved".equals(toDocStatus)) {
                CommonUtilsAMImpl commanAM =
                    (CommonUtilsAMImpl)getCommonUtilsAM1();
                String userName = commanAM.getCurrentEmployeeUserName();
                //                hdrRow.setApprovedBy(userName);
                java.sql.Timestamp datetime =
                    new java.sql.Timestamp(System.currentTimeMillis());
                oracle.jbo.domain.Date daTime =
                    new oracle.jbo.domain.Date(datetime);
                //                hdrRow.setApprovedDate(daTime);
            }
        }
    }

    /**
     * Container's getter for CommonUtilsAM1.
     * @return CommonUtilsAM1
     */
    public ApplicationModuleImpl getCommonUtilsAM1() {
        return (ApplicationModuleImpl)findApplicationModule("CommonUtilsAM1");
    }

    /**
     * Container's getter for ActivityLevelPlanningVO1.
     * @return ActivityLevelPlanningVO1
     */
    public ActivityLevelPlanningVOImpl getActivityLevelPlanningVO1() {
        return (ActivityLevelPlanningVOImpl)findViewObject("ActivityLevelPlanningVO1");
    }

    /**
     * Container's getter for PlanningScheduleToActivityVL1.
     * @return PlanningScheduleToActivityVL1
     */
    public ViewLinkImpl getPlanningScheduleToActivityVL1() {
        return (ViewLinkImpl)findViewLink("PlanningScheduleToActivityVL1");
    }

    public void populateActivityLines() {
        PlanningScheduleHdrVORowImpl hdrRow =
            (PlanningScheduleHdrVORowImpl)getPlanningScheduleHdrVO1().getCurrentRow();
        if (hdrRow != null) {
            CallableStatement st = null;
            try {
                st =
 getDBTransaction().createCallableStatement(POPULATE_ACTIVITY_PLAN_LINES, 0);
                st.setLong("p_header_id", hdrRow.getHeaderId().longValue());
                st.setString("p_username",
                             ((String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName")));
                st.setLong("p_bu_id", hdrRow.getBuId().longValue());
                st.setLong("p_prj_id", hdrRow.getProjectId().longValue());
                st.execute();

            } catch (SQLException e) {
                e.printStackTrace();
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        // 7. Close the statement
                        st.close();
                    } catch (SQLException e) {
                    }
                }
            }

            getActivityLevelPlanningVO1().executeQuery();
            if (getActivityLevelPlanningVO1().first() != null) {
                getActivityLevelPlanningVO1().setCurrentRow(getActivityLevelPlanningVO1().first());
            }
        }
    }

    public void filterLinesUsingStructure() {
        PlanningScheduleHdrVORowImpl hdrRow =
            (PlanningScheduleHdrVORowImpl)getPlanningScheduleHdrVO1().getCurrentRow();
        if (hdrRow != null) {
            ViewObject vo = getActivityLevelPlanningVO1();
            vo.applyViewCriteria(null);
            vo.executeQuery();
            ViewCriteria vc = vo.createViewCriteria();
            ViewCriteriaRow vcr = vc.createViewCriteriaRow();
            vcr.setAttribute("HeaderId", hdrRow.getHeaderId());
            vcr.setAttribute("StructureId", hdrRow.getTransStrId());
            vc.addRow(vcr);
            vo.applyViewCriteria(vc);
            vo.executeQuery();
            getActivityLineLevelPlanVO1().executeQuery();
            getJobLevelPlanningVO1().executeQuery();
            getJobLineLevelPlanningVO1().executeQuery();

            if (getActivityLevelPlanningVO1().first() != null) {
                getActivityLevelPlanningVO1().setCurrentRow(getActivityLevelPlanningVO1().first());
            }
            if (getJobLevelPlanningVO1().first() != null) {
                getJobLevelPlanningVO1().setCurrentRow(getActivityLevelPlanningVO1().first());
            }
            vo.getAllRowsInRange();
        }
    }

    /**
     * Container's getter for JobLevelPlanningVO1.
     * @return JobLevelPlanningVO1
     */
    public JobLevelPlanningVOImpl getJobLevelPlanningVO1() {
        return (JobLevelPlanningVOImpl)findViewObject("JobLevelPlanningVO1");
    }

    /**
     * Container's getter for ActivityToJobPlanningVL1.
     * @return ActivityToJobPlanningVL1
     */
    public ViewLinkImpl getActivityToJobPlanningVL1() {
        return (ViewLinkImpl)findViewLink("ActivityToJobPlanningVL1");
    }

    /**
     * Container's getter for MaxIANumberVO1.
     * @return MaxIANumberVO1
     */
    public ViewObjectImpl getMaxIANumberVO1() {
        return (ViewObjectImpl)findViewObject("MaxIANumberVO1");
    }

    /**
     * Container's getter for ActivityLineLevelPlanVO1.
     * @return ActivityLineLevelPlanVO1
     */
    public ActivityLineLevelPlanVOImpl getActivityLineLevelPlanVO1() {
        return (ActivityLineLevelPlanVOImpl)findViewObject("ActivityLineLevelPlanVO1");
    }

    /**
     * Container's getter for ActivityPlanToLinesVL1.
     * @return ActivityPlanToLinesVL1
     */
    public ViewLinkImpl getActivityPlanToLinesVL1() {
        return (ViewLinkImpl)findViewLink("ActivityPlanToLinesVL1");
    }

    /**
     * Container's getter for JobLineLevelPlanningVO1.
     * @return JobLineLevelPlanningVO1
     */
    public JobLineLevelPlanningVOImpl getJobLineLevelPlanningVO1() {
        return (JobLineLevelPlanningVOImpl)findViewObject("JobLineLevelPlanningVO1");
    }

    /**
     * Container's getter for JobPlanToLinesVL1.
     * @return JobPlanToLinesVL1
     */
    public ViewLinkImpl getJobPlanToLinesVL1() {
        return (ViewLinkImpl)findViewLink("JobPlanToLinesVL1");
    }

    public String validatePeriod() {
        String message = "";
        PlanningScheduleHdrVOImpl HdrVO = getPlanningScheduleHdrVO1();
        PlanningScheduleHdrVORowImpl hdrRow =
            (PlanningScheduleHdrVORowImpl)HdrVO.getCurrentRow();
        if (hdrRow != null && hdrRow.getBuId() != null &&
            hdrRow.getProjectId() != null) {
            RowQualifier rq =
                new RowQualifier("ProjectId=" + hdrRow.getProjectId() +
                                 " AND (Status='Draft' OR Status='Rejected')");
            Row[] rows = HdrVO.getFilteredRows(rq);
            if (rows.length > 1) {
                return "An open Planning Schedule Document is exist in this Project.";
            } else {
                RowQualifier rq1 =
                    new RowQualifier("ProjectId=" + hdrRow.getProjectId());
                Row[] rows1 = HdrVO.getFilteredRows(rq1);
                if (rows1.length > 1) {
                    CallableStatement st = null;
                    try {
                        st =
 getDBTransaction().createCallableStatement(validate_planning_period, 0);
                        st.setString("p_budget_type",
                                     hdrRow.getBudgetType().toString());
                        st.setLong("p_prj_id",
                                   hdrRow.getProjectId().longValue());
                        st.setString("p_plan_period",
                                     hdrRow.getPlanPeriod().toString());
                        if ("Projection Budget".equals(hdrRow.getBudgetType())) {
                            st.setString("p_period", hdrRow.getProjectPlan());
                        } else if ("Master Budget".equals(hdrRow.getBudgetType())) {
                            st.setString("p_period",
                                         hdrRow.getPlanYear().toString());
                        } else if ("Control Budget".equals(hdrRow.getBudgetType())) {
                            st.setString("p_period", "0000".toString());
                        }
                        st.registerOutParameter("p_message", Types.VARCHAR);
                        st.execute();
                        message = st.getString("p_message");

                    } catch (SQLException e) {
                        e.printStackTrace();
                        message = e.getMessage();
                        return message;
                        //                      throw new JboException(e);
                    } finally {
                        if (st != null) {
                            try {
                                // 7. Close the statement
                                st.close();
                            } catch (SQLException e) {
                            }
                        }
                    }
                    if (!"Y".equals(message)) {
                        return message;
                    }
                }
            }
        }
        return "";
    }


    public void revisePlanningSchedule() {
        PlanningScheduleHdrVOImpl HdrVO = getPlanningScheduleHdrVO1();
        PlanningScheduleHdrVORowImpl hdrRow =
            (PlanningScheduleHdrVORowImpl)HdrVO.getCurrentRow();
        if (hdrRow != null && hdrRow.getBuId() != null &&
            hdrRow.getProjectId() != null &&
            hdrRow.getTransChangeReason() != null) {
            CallableStatement st = null;
            Long returnHdrId = null;
            try {
                st =
 getDBTransaction().createCallableStatement(revise_planning_schedule_doc, 0);
                st.setLong("p_header_id", hdrRow.getHeaderId().longValue());
                st.setString("p_username",
                             ((String)((Map)ADFContext.getCurrent().getSessionScope().get("userMap")).get("UserName")));
                st.setString("p_change_reason", hdrRow.getTransChangeReason());
                st.registerOutParameter("p_out_hdr_id", Types.NUMERIC);
                st.execute();
                returnHdrId = st.getLong("p_out_hdr_id");
            } catch (SQLException e) {
                e.printStackTrace();
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        // 7. Close the statement
                        st.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
            if (returnHdrId != null) {
                getPlanningScheduleHdrVO1().clearCache();
                getPlanningScheduleHdrVO1().executeQuery();
                Key masterkey = new Key(new Object[] { returnHdrId });
                getPlanningScheduleHdrVO1().findAndSetCurrentRowByKey(masterkey,
                                                                      0);
            }

        }
    }

    public String splitActivityBOQLine() {
        ActivityLevelPlanningVORowImpl activityRow =
            (ActivityLevelPlanningVORowImpl)getActivityLevelPlanningVO1().getCurrentRow();
        if (activityRow != null && activityRow.getTransFromMonth() != null &&
            activityRow.getTransToMonth() != null &&
            activityRow.getTransBalQty() != null &&
            activityRow.getTransBalQty().longValue() != 0) {
            Long fromLineId = activityRow.getTransFromLineLevelId();
            Long toLineId = activityRow.getTransToLineLevelId();
            if (fromLineId < toLineId) {
                Long splitWays =
                    activityRow.getTransToLineLevelId().longValue() -
                    activityRow.getTransFromLineLevelId().longValue() + 1L;
                Long BalQty = activityRow.getTransBalQty().longValue();
                //                Long setQty=BalQty/splitWays;
                //                    Long extraQty=BalQty%splitWays;
                //                    Row[] lineRows=activityRow.getActivityLineLevelPlanVO().getAllRowsInRange();
                //                    for (int i=0;i<lineRows.length;i++){
                //                        ActivityLineLevelPlanVORowImpl lineRow=(ActivityLineLevelPlanVORowImpl)lineRows[i];
                //                        if(fromLineId+i==lineRow.getActivityLineLevelId().longValue()){
                //                            lineRow.setBoqQuantity(new BigDecimal(setQty));
                //                        }
                //                        if(i==lineRows.length-1){
                //                            lineRow.setBoqQuantity(new BigDecimal(setQty+extraQty));
                //                        }
                //
                //                    }
                Row[] jobRows =
                    activityRow.getJobLevelPlanningVO().getAllRowsInRange();
                if (jobRows.length > 0) {
                    for (Row row : jobRows) {
                        JobLevelPlanningVORowImpl jobRow =
                            (JobLevelPlanningVORowImpl)row;
                        Double jobBalQty =
                            jobRow.getTransBalQty().doubleValue();
                        Row[] jobLineRows =
                            jobRow.getJobLineLevelPlanningVO().getAllRowsInRange();
                        Double jobLinesetQty =
                            jobBalQty / splitWays.doubleValue();
                        Double joblineextraQty = 0.0;
                        joblineextraQty = BalQty.doubleValue() % splitWays;
                        if (jobLineRows.length > 0) {
                            for (int i = 0; i < jobLineRows.length; i++) {
                                JobLineLevelPlanningVORowImpl joblineRow =
                                    (JobLineLevelPlanningVORowImpl)jobLineRows[i];
                                if (fromLineId <=
                                    joblineRow.getJobLineLevelId().longValue() &&
                                    joblineRow.getJobLineLevelId().longValue() <=
                                    toLineId) {
                                    joblineRow.setBoqQuantity(new BigDecimal(jobLinesetQty));
                                    if (i == jobLineRows.length - 1 &&
                                        joblineextraQty != null) {
                                        joblineRow.setBoqQuantity(new BigDecimal(jobLinesetQty +
                                                                                 joblineextraQty));
                                    }
                                }
                            }
                        }
                    }
                }
                Row[] lineRows =
                    activityRow.getActivityLineLevelPlanVO().getAllRowsInRange();
                for (int i = 0; i < lineRows.length; i++) {
                    ActivityLineLevelPlanVORowImpl activitylineRow =
                        (ActivityLineLevelPlanVORowImpl)lineRows[i];
                    if (fromLineId <=
                        activitylineRow.getActivityLineLevelId().longValue() &&
                        activitylineRow.getActivityLineLevelId().longValue() <=
                        toLineId) {
                        Double activityRowsetQty = 0.0;
                        if (jobRows.length > 0) {
                            for (Row row : jobRows) {
                                JobLevelPlanningVORowImpl jobRow =
                                    (JobLevelPlanningVORowImpl)row;
                                RowQualifier rq =
                                    new RowQualifier("JobLeavelLineId=" +
                                                     jobRow.getJobLeavelLineId() +
                                                     " AND JobLineLevelId=" +
                                                     activitylineRow.getActivityLineLevelId());
                                Row[] jobLineRows =
                                    getJobLineLevelPlanningVO1().getFilteredRows(rq);
                                if (jobLineRows.length > 0) {
                                    if (jobLineRows[0].getAttribute("BoqQuantity") !=
                                        null) {
                                        activityRowsetQty =
                                                activityRowsetQty + Double.parseDouble(jobLineRows[0].getAttribute("BoqQuantity").toString());
                                    }
                                }
                            }
                        }
                        activitylineRow.setBoqQuantity(new BigDecimal(activityRowsetQty));
                    }
                }

            } else {
                return "To Month shoud be after From Month.";
            }
        }
        return "";
    }

    public String interfaceBudget() {
        //        PlanningScheduleHdrVOImpl HdrVO = getPlanningScheduleHdrVO1();
        //        PlanningScheduleHdrVORowImpl hdrRow =
        //            (PlanningScheduleHdrVORowImpl)HdrVO.getCurrentRow();
        //        CreateBudget budget = new CreateBudget();
        //        ProjectBudgetInput budgetattr = new ProjectBudgetInput();
        //        ObjectFactory objFactory = new ObjectFactory();
        //        budgetattr.setPlanVersionName(objFactory.createProjectBudgetInputPlanVersionName("1"));
        //        budgetattr.setPlanVersionDescription(objFactory.createProjectBudgetInputPlanVersionDescription("BudgetPlan"));
        //        budgetattr.setProjectId(objFactory.createProjectBudgetInputProjectId(hdrRow.getProjectId().longValue()));
        //        budgetattr.setResourceName(objFactory.createProjectBudgetInputResourceName(""));
        //        budgetattr.setPeriodName(objFactory.createProjectBudgetInputPeriodName(""));
        //        budgetattr.setLineType(objFactory.createProjectBudgetInputLineType("RESOURCE"));
        //        budgetattr.setPlanVersionStatus(objFactory.createProjectBudgetInputPlanVersionStatus("CURRENT WORKING"));
        //        MeasureType Qty = new MeasureType();
        //        Qty.setUnitCode("");
        //        Qty.setValue(new BigDecimal(1));
        //        budgetattr.setQuantity(objFactory.createProjectBudgetInputQuantity(Qty));
        //        budgetattr.setUnitOfMeasure(objFactory.createProjectBudgetInputUnitOfMeasure(""));
        //        budgetattr.setPlanningCurrency(objFactory.createProjectBudgetInputPlanningCurrency(hdrRow.getProjectCurrencyCode()));
        //        AmountType amt = new AmountType();
        //        amt.setCurrencyCode(hdrRow.getProjectCurrencyCode());
        //        amt.setValue(new BigDecimal(hdrRow.getTotalBudget().doubleValue()));
        ////        budgetattr.setRawCostAmount(objFactory.createProjectBudgetInputRawCostAmount(amt));
        //        budgetattr.setRevenueAmount(objFactory.createProjectBudgetInputRevenueAmount(amt));
        //        budget.getBudgetRowList().add(budgetattr);
        return "";
    }

}
