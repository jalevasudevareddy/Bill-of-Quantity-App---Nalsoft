package model.applicationmodule;


import java.util.HashMap;
import java.util.List;

import java.util.Map;

import model.applicationmodule.common.BOQSetupAM;

import model.searchview.GetAccountingMaxRowScrVOImpl;
import model.searchview.GetAccountingMaxRowScrVORowImpl;
import model.searchview.MaxAccountingRowScrVOImpl;
import model.searchview.MaxAccountingRowScrVORowImpl;
import model.searchview.TransAccountsSetupHdrVOImpl;

import model.searchview.TransAccountsSetupHdrVORowImpl;

import model.services.ExternalReportCustom;

import model.services.GLAccountsListing;

import model.view.ActivityDetailsVOImpl;
import model.view.ActivityDetailsVORowImpl;
import model.view.ActivityGroupVOImpl;


import model.view.ActivityGroupVORowImpl;
import model.view.BOQAccountsSetupVOImpl;
import model.view.BOQAccountsSetupVORowImpl;
import model.view.ResouceSubGroupVOImpl;
import model.view.ResouceSubGroupVORowImpl;
import model.view.ResourceItemsVOImpl;
import model.view.ResourceItemsVORowImpl;
import model.view.ResourceMasterGroupVOImpl;

import model.view.ResourceMasterGroupVORowImpl;
import model.view.ResourceMasterSearchVOImpl;

import oracle.jbo.domain.Date;

import model.view.StructureSetupVOImpl;
import model.view.TransStructureSetupBUVOImpl;

import model.view.TransStructureSetupBUVORowImpl;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 29 10:11:35 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BOQSetupAMImpl extends ApplicationModuleImpl implements BOQSetupAM {
    /**
     * This is the default constructor (do not remove).
     */
    public BOQSetupAMImpl() {
    }

    public String refreshBOQAccntSetupRow(Map attributesMap) {
        String message = null;
        try {
            if (getBOQAccountsSetupVO1().getCurrentRow() != null) {
                BOQAccountsSetupVORowImpl boqRow =
                    (BOQAccountsSetupVORowImpl)getBOQAccountsSetupVO1().getCurrentRow();
                if (attributesMap != null) {
                    Map<String, Object> attrMap =
                        (HashMap<String, Object>)attributesMap;
                    for (Map.Entry<String, Object> enty : attrMap.entrySet()) {
                        boqRow.setAttribute(enty.getKey(), enty.getValue());
                    }
                    message = "Success";
                }
            } else {
                message =
                        "Current Row not found. Refreshing the row is failed.";
            }
        } catch (Exception e) {
            e.printStackTrace();
            message = e.getMessage();
        }
        return message;
    }

    public String validateAccountingRow() {
        String message = null;
        try {
            BOQAccountsSetupVOImpl accVO = getBOQAccountsSetupVO1();
            if (accVO.first() != null) {
                BOQAccountsSetupVORowImpl accVORow =
                    (BOQAccountsSetupVORowImpl)accVO.getCurrentRow();
                Date currStartDate = accVORow.getStartDate();
                Date currFinDate = accVORow.getEndDate();
                //                if(currStartDate!=null){


                Number currId = new Number(accVORow.getAccSetupId());
                MaxAccountingRowScrVOImpl searchVO =
                    getMaxAccountingRowScrVO1();
                searchVO.setNamedWhereClauseParam("p_bu_id",
                                                  accVORow.getBuId());
                searchVO.setNamedWhereClauseParam("p_cat_type",
                                                  accVORow.getBillCategory());
                searchVO.setNamedWhereClauseParam("p_dest",
                                                  accVORow.getDestination());
                //                searchVO.setNamedWhereClauseParam("p_ar_cont", accVORow.getArContext());
                //                searchVO.setNamedWhereClauseParam("p_cust_type", accVORow.getCustomerType());

                searchVO.executeQuery();

                if (searchVO.getEstimatedRowCount() > 1) {
                    Date maxStartDate = null;
                    MaxAccountingRowScrVORowImpl acctSetUpRow =
                        (MaxAccountingRowScrVORowImpl)searchVO.first();

                    while (acctSetUpRow != null) {
                        if (currId.longValue() !=
                            acctSetUpRow.getAccSetupId().longValue()) {
                            if (acctSetUpRow.getEndDate() != null) {
                                //                                if (currStartDate==null || currStartDate.compareTo(acctSetUpRow.getFinishDate()) >
                                //                                    0) {
                                //
                                //                                    message = "Success";
                                //                                }
                                //                                else {
                                if (maxStartDate == null ||
                                    acctSetUpRow.getEndDate().compareTo(maxStartDate) >
                                    0) {
                                    maxStartDate =
                                            new Date(acctSetUpRow.getEndDate());
                                }


                                //                                }
                            } else {
                                accVORow.setBillCategory(null);
                                accVORow.setStartDate(null);
                                accVORow.setEndDate(null);
                                message =
                                        "A Account Setup with same Account type is already exists with no finish date.";
                                break;
                            }
                        }
                        if (searchVO.hasNext()) {
                            acctSetUpRow =
                                    (MaxAccountingRowScrVORowImpl)searchVO.next();
                        } else {
                            acctSetUpRow = null;
                        }
                    }

                    if (message == null) {
                        if (maxStartDate != null &&
                            (currStartDate == null || currStartDate.compareTo(maxStartDate) <
                             0)) {
                            maxStartDate.addJulianDays(1, 0);
                            accVORow.setStartDate(maxStartDate);
                            accVORow.setEndDate(null);
                            message = "Success";
                        } else {
                            message = "Success";
                        }
                    }
                } else {
                    message = "Success";
                }

            }
            getBOQAccountsSetupVO1().executeQuery();
        } catch (Exception e) {
            message = e.getMessage();
            e.printStackTrace();
        }
        return message;
    }

    /**
     * Container's getter for ActivityGroupVO1.
     * @return ActivityGroupVO1
     */
    public ActivityGroupVOImpl getActivityGroupVO1() {
        return (ActivityGroupVOImpl)findViewObject("ActivityGroupVO1");
    }

    /**
     * Container's getter for ActivityDetailsVO1.
     * @return ActivityDetailsVO1
     */
    public ActivityDetailsVOImpl getActivityDetailsVO1() {
        return (ActivityDetailsVOImpl)findViewObject("ActivityDetailsVO1");
    }

    /**
     * Container's getter for ActivityGroupToDetailsVL1.
     * @return ActivityGroupToDetailsVL1
     */
    public ViewLinkImpl getActivityGroupToDetailsVL1() {
        return (ViewLinkImpl)findViewLink("ActivityGroupToDetailsVL1");
    }

    /**
     * Container's getter for ResourceMasterGroupVO1.
     * @return ResourceMasterGroupVO1
     */
    public ResourceMasterGroupVOImpl getResourceMasterGroupVO1() {
        return (ResourceMasterGroupVOImpl)findViewObject("ResourceMasterGroupVO1");
    }

    /**
     * Container's getter for ResouceSubGroupVO1.
     * @return ResouceSubGroupVO1
     */
    public ResouceSubGroupVOImpl getResouceSubGroupVO1() {
        return (ResouceSubGroupVOImpl)findViewObject("ResouceSubGroupVO1");
    }

    /**
     * Container's getter for ResourceGroupToSubGroupVL1.
     * @return ResourceGroupToSubGroupVL1
     */
    public ViewLinkImpl getResourceGroupToSubGroupVL1() {
        return (ViewLinkImpl)findViewLink("ResourceGroupToSubGroupVL1");
    }

    /**
     * Container's getter for ResourceItemsVO1.
     * @return ResourceItemsVO1
     */
    public ResourceItemsVOImpl getResourceItemsVO1() {
        return (ResourceItemsVOImpl)findViewObject("ResourceItemsVO1");
    }

    /**
     * Container's getter for ResourceSubGroupToItemsVL1.
     * @return ResourceSubGroupToItemsVL1
     */
    public ViewLinkImpl getResourceSubGroupToItemsVL1() {
        return (ViewLinkImpl)findViewLink("ResourceSubGroupToItemsVL1");
    }

    public void CreateActivityLine() {
        ActivityGroupVORowImpl hdr =
            (ActivityGroupVORowImpl)getActivityGroupVO1().getCurrentRow();
        if (hdr != null) {
            ActivityDetailsVORowImpl activityRow =
                (ActivityDetailsVORowImpl)getActivityDetailsVO1().createRow();
            activityRow.setGroupCode(hdr.getGroupCode());
            getActivityDetailsVO1().insertRow(activityRow);
        }
    }

    /**
     * Container's getter for ResourceMasterSearchVO1.
     * @return ResourceMasterSearchVO1
     */
    public ResourceMasterSearchVOImpl getResourceMasterSearchVO1() {
        return (ResourceMasterSearchVOImpl)findViewObject("ResourceMasterSearchVO1");
    }

    public void editDocument() {
        ResourceMasterGroupVOImpl hdrVO = getResourceMasterGroupVO1();
        hdrVO.executeQuery();
        ResourceMasterSearchVOImpl searchVO = getResourceMasterSearchVO1();
        Row currentRow = searchVO.getCurrentRow();
        if (currentRow != null) {
            Key masterkey =
                new Key(new Object[] { currentRow.getAttribute("ResourceGroupId") });
            hdrVO.findAndSetCurrentRowByKey(masterkey, 0);
        }
    }

    public void cancelDocument() {
        getResourceMasterGroupVO1().getCurrentRow().remove();
        getResourceMasterGroupVO1().executeQuery();
    }

    public void createDocument() {
        ResourceMasterGroupVOImpl searchVO = getResourceMasterGroupVO1();
        ResourceMasterGroupVORowImpl searchRow =
            (ResourceMasterGroupVORowImpl)searchVO.getCurrentRow();
        if (searchRow != null) {
            Long groupId =
                new Long(searchRow.getResourceGroupId().longValue());
            searchVO.executeQuery();
            Key masterkey = new Key(new Object[] { groupId });
            searchVO.findAndSetCurrentRowByKey(masterkey, 0);
        }
        searchRow = (ResourceMasterGroupVORowImpl)searchVO.getCurrentRow();
        if (searchRow != null) {
            searchRow.setExpenditureGroup(searchRow.getResourceTypeCode() +
                                          "-" + searchRow.getResourceGroup());
        }
        //  CommonUtilsAMImpl utilsAmImpl = (CommonUtilsAMImpl)getCommonUtilsAM1();
        //  String docNum =
        //      utilsAmImpl.genDocNumber(hdrRow.getOrganizationCode(), hdrRow.getOrganizationId().longValue(),
        //                              hdrRow.getBuId().longValue(), "**Value");
        // hdrRow.setMirNumber(docNum);
        //hdrRow.setRequestStatus("Draft");
    }

    public void createResourceMasterGroupRow() {
        ResourceMasterGroupVOImpl searchVO = getResourceMasterGroupVO1();
        ResourceMasterGroupVORowImpl searchRow =
            (ResourceMasterGroupVORowImpl)searchVO.createRow();
        searchVO.insertRow(searchRow);
    }

    public void createSubGroupLine() {
        ResourceMasterGroupVORowImpl groupRow =
            (ResourceMasterGroupVORowImpl)getResourceMasterGroupVO1().getCurrentRow();
        if (groupRow != null) {
            ResouceSubGroupVORowImpl subGroupRow =
                (ResouceSubGroupVORowImpl)getResouceSubGroupVO1().createRow();
            subGroupRow.setBuId(groupRow.getBuId());
            subGroupRow.setResourceGroup(groupRow.getResourceGroup());
            subGroupRow.setResourceType(groupRow.getResourceType());
            subGroupRow.setResourceTypeCode(groupRow.getResourceTypeCode());
            getResouceSubGroupVO1().insertRow(subGroupRow);
        }
    }

    public void setExpenditureCategoryValue() {
        ResouceSubGroupVORowImpl subGroupRow =
            (ResouceSubGroupVORowImpl)getResouceSubGroupVO1().getCurrentRow();
        subGroupRow.setExpenditureCategory(subGroupRow.getResourceTypeCode() +
                                           "-" +
                                           subGroupRow.getResourceGroup() +
                                           "-" +
                                           subGroupRow.getResourceSubGroup());
    }

    public void createItemLine() {
        ResouceSubGroupVORowImpl subGroupRow =
            (ResouceSubGroupVORowImpl)getResouceSubGroupVO1().getCurrentRow();
        if (subGroupRow != null) {
            ResourceItemsVORowImpl itemsRow =
                (ResourceItemsVORowImpl)getResourceItemsVO1().createRow();
            itemsRow.setBuId(subGroupRow.getBuId());
            getResourceItemsVO1().insertRow(itemsRow);
        }
    }

    public void setExpenditureTypeValue() {
        ResouceSubGroupVORowImpl subGroupRow =
            (ResouceSubGroupVORowImpl)getResouceSubGroupVO1().getCurrentRow();
        ResourceItemsVORowImpl itemsRow =
            (ResourceItemsVORowImpl)getResourceItemsVO1().getCurrentRow();
        itemsRow.setExpenditureType(subGroupRow.getExpenditureCategory() +
                                    "-" + itemsRow.getItemCode());
    }

    /**
     * Container's getter for TransStructureSetupBUVO1.
     * @return TransStructureSetupBUVO1
     */
    public TransStructureSetupBUVOImpl getTransStructureSetupBUVO1() {
        return (TransStructureSetupBUVOImpl)findViewObject("TransStructureSetupBUVO1");
    }

    /**
     * Container's getter for StructureSetupVO1.
     * @return StructureSetupVO1
     */
    public StructureSetupVOImpl getStructureSetupVO1() {
        return (StructureSetupVOImpl)findViewObject("StructureSetupVO1");
    }

    /**
     * Container's getter for BUToStructureSetupVL1.
     * @return BUToStructureSetupVL1
     */
    public ViewLinkImpl getBUToStructureSetupVL1() {
        return (ViewLinkImpl)findViewLink("BUToStructureSetupVL1");
    }

    public void createTransBuLine() {
        TransStructureSetupBUVORowImpl row =
            (TransStructureSetupBUVORowImpl)getTransStructureSetupBUVO1().createRow();
        getTransStructureSetupBUVO1().insertRow(row);
    }

    /**
     * Container's getter for TransAccountsSetupHdrVO1.
     * @return TransAccountsSetupHdrVO1
     */
    public TransAccountsSetupHdrVOImpl getTransAccountsSetupHdrVO1() {
        return (TransAccountsSetupHdrVOImpl)findViewObject("TransAccountsSetupHdrVO1");
    }

    /**
     * Container's getter for BOQAccountsSetupVO1.
     * @return BOQAccountsSetupVO1
     */
    public BOQAccountsSetupVOImpl getBOQAccountsSetupVO1() {
        return (BOQAccountsSetupVOImpl)findViewObject("BOQAccountsSetupVO1");
    }

    /**
     * Container's getter for AccountsSetupHdrToLinesVL1.
     * @return AccountsSetupHdrToLinesVL1
     */
    public ViewLinkImpl getAccountsSetupHdrToLinesVL1() {
        return (ViewLinkImpl)findViewLink("AccountsSetupHdrToLinesVL1");
    }

    public void crateTransAccountsRow() {
        getTransAccountsSetupHdrVO1().executeQuery();
        TransAccountsSetupHdrVORowImpl row =
            (TransAccountsSetupHdrVORowImpl)getTransAccountsSetupHdrVO1().createRow();
        getTransAccountsSetupHdrVO1().insertRow(row);
    }

    public void createAccountsSetupRow() {
        BOQAccountsSetupVORowImpl row =
            (BOQAccountsSetupVORowImpl)getBOQAccountsSetupVO1().createRow();
        getBOQAccountsSetupVO1().insertRow(row);
    }

    public String createGLAccountCombination() {
        String message = null;
        try {

            //            TransAccountsSetupHdrVORowImpl row =
            //                (TransAccountsSetupHdrVORowImpl)getTransAccountsSetupHdrVO1().getCurrentRow();
            //            Row[] accRows = row.getBOQAccountsSetupVO().getAllRowsInRange();
            //            for (Row row1 : accRows) {
            //                BOQAccountsSetupVORowImpl accRow =
            //                    (BOQAccountsSetupVORowImpl)row1;
            //                if (accRow != null && accRow.getBuId() != null &&
            //                    accRow.getEntity(0).getEntityState() != 1) {
            //                    ExternalReportCustom exreport = new ExternalReportCustom();
            //                    List<GLAccountsListing> glAccs = null;
            //
            //                        glAccs =
            //                                exreport.findSupplierGLAccountsListReport(" ", accRow.getBuId().longValue());
            //                        if (glAccs != null && glAccs.size() > 0) {
            //                            String combination = glAccs.get(0).getGlAcnt();
            //                            String[] parts = combination.split("-");
            //                            if (parts.length == 8) {
            //                                combination =
            //                                        parts[0] + "-" + parts[1] + "-" + parts[2] +
            //                                        "-" + accRow.getNaturalAccount() +
            //                                        "-" + parts[4] + "-" + parts[5] + "-" +
            //                                        parts[6] + "-" + parts[7];
            //                                accRow.setAccountCombination(combination);
            //                            }
            //                        }
            //
            //                }
            //            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return message;
    }

    public String validateBillCategory() {
        BOQAccountsSetupVORowImpl hdrrow =
            (BOQAccountsSetupVORowImpl)getBOQAccountsSetupVO1().getCurrentRow();
        String message = "";
        if (hdrrow != null && hdrrow.getBillCategory() != null) {
            RowQualifier rq =
                new RowQualifier("BuId=" + hdrrow.getBuId() + " AND BillCategory='" +
                                 hdrrow.getBillCategory() + "'");
            Row[] rows = getBOQAccountsSetupVO1().getFilteredRows(rq);
            if (rows.length > 1) {
                Date dateToSet = new Date();
                for (Row row : rows) {
                    BOQAccountsSetupVORowImpl accRow =
                        (BOQAccountsSetupVORowImpl)row;
                    if (!(hdrrow.getAccSetupId().toString().equals(accRow.getAccSetupId().toString()))) {
                        if (accRow.getEndDate() != null) {
                            if (dateToSet.dateValue().compareTo(accRow.getEndDate().dateValue()) <=
                                0) {
                                dateToSet = accRow.getEndDate();
                            }
                        } else {
                            message =
                                    "Bill Category with out End Date is already exist.";
                            hdrrow.setAttribute("BillCategory", null);
                            return message;
                        }
                    }
                }
                if (!(hdrrow.getStartDate() != null)) {
                    Date d2 = dateToSet;
                    Date d1 = new Date(d2);
                    d1.addJulianDays(1, 0);
                    hdrrow.setAttribute("StartDate", d1);
                } else {
                    if ((dateToSet.dateValue().compareTo(hdrrow.getStartDate().dateValue())) >=
                        0) {
                        Date d2 = dateToSet;
                        Date d1 = new Date(d2);
                        d1.addJulianDays(1, 0);
                        hdrrow.setAttribute("StartDate", d1);
                    }
                }
            }
        }
        return message;
    }

    /**
     * Container's getter for GetAccountingMaxRowScrVO1.
     * @return GetAccountingMaxRowScrVO1
     */
    public GetAccountingMaxRowScrVOImpl getGetAccountingMaxRowScrVO1() {
        return (GetAccountingMaxRowScrVOImpl)findViewObject("GetAccountingMaxRowScrVO1");
    }

    /**
     * Container's getter for MaxAccountingRowScrVO1.
     * @return MaxAccountingRowScrVO1
     */
    public MaxAccountingRowScrVOImpl getMaxAccountingRowScrVO1() {
        return (MaxAccountingRowScrVOImpl)findViewObject("MaxAccountingRowScrVO1");
    }
}
