package model.masterentity;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 18 10:24:30 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxinvUomConversionsEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        UomClass {
            public Object get(XxinvUomConversionsEOImpl obj) {
                return obj.getUomClass();
            }

            public void put(XxinvUomConversionsEOImpl obj, Object value) {
                obj.setUomClass((String)value);
            }
        },
        FromUomCode {
            public Object get(XxinvUomConversionsEOImpl obj) {
                return obj.getFromUomCode();
            }

            public void put(XxinvUomConversionsEOImpl obj, Object value) {
                obj.setFromUomCode((String)value);
            }
        },
        ToUomCode {
            public Object get(XxinvUomConversionsEOImpl obj) {
                return obj.getToUomCode();
            }

            public void put(XxinvUomConversionsEOImpl obj, Object value) {
                obj.setToUomCode((String)value);
            }
        },
        FromUomName {
            public Object get(XxinvUomConversionsEOImpl obj) {
                return obj.getFromUomName();
            }

            public void put(XxinvUomConversionsEOImpl obj, Object value) {
                obj.setFromUomName((String)value);
            }
        },
        ToUomName {
            public Object get(XxinvUomConversionsEOImpl obj) {
                return obj.getToUomName();
            }

            public void put(XxinvUomConversionsEOImpl obj, Object value) {
                obj.setToUomName((String)value);
            }
        },
        RowID {
            public Object get(XxinvUomConversionsEOImpl obj) {
                return obj.getRowID();
            }

            public void put(XxinvUomConversionsEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(XxinvUomConversionsEOImpl object);

        public abstract void put(XxinvUomConversionsEOImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int UOMCLASS = AttributesEnum.UomClass.index();
    public static final int FROMUOMCODE = AttributesEnum.FromUomCode.index();
    public static final int TOUOMCODE = AttributesEnum.ToUomCode.index();
    public static final int FROMUOMNAME = AttributesEnum.FromUomName.index();
    public static final int TOUOMNAME = AttributesEnum.ToUomName.index();
    public static final int ROWID = AttributesEnum.RowID.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxinvUomConversionsEOImpl() {
    }

    /**
     * Gets the attribute value for UomClass, using the alias name UomClass.
     * @return the UomClass
     */
    public String getUomClass() {
        return (String)getAttributeInternal(UOMCLASS);
    }

    /**
     * Sets <code>value</code> as the attribute value for UomClass.
     * @param value value to set the UomClass
     */
    public void setUomClass(String value) {
        setAttributeInternal(UOMCLASS, value);
    }

    /**
     * Gets the attribute value for FromUomCode, using the alias name FromUomCode.
     * @return the FromUomCode
     */
    public String getFromUomCode() {
        return (String)getAttributeInternal(FROMUOMCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for FromUomCode.
     * @param value value to set the FromUomCode
     */
    public void setFromUomCode(String value) {
        setAttributeInternal(FROMUOMCODE, value);
    }

    /**
     * Gets the attribute value for ToUomCode, using the alias name ToUomCode.
     * @return the ToUomCode
     */
    public String getToUomCode() {
        return (String)getAttributeInternal(TOUOMCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ToUomCode.
     * @param value value to set the ToUomCode
     */
    public void setToUomCode(String value) {
        setAttributeInternal(TOUOMCODE, value);
    }

    /**
     * Gets the attribute value for FromUomName, using the alias name FromUomName.
     * @return the FromUomName
     */
    public String getFromUomName() {
        return (String)getAttributeInternal(FROMUOMNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for FromUomName.
     * @param value value to set the FromUomName
     */
    public void setFromUomName(String value) {
        setAttributeInternal(FROMUOMNAME, value);
    }

    /**
     * Gets the attribute value for ToUomName, using the alias name ToUomName.
     * @return the ToUomName
     */
    public String getToUomName() {
        return (String)getAttributeInternal(TOUOMNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ToUomName.
     * @param value value to set the ToUomName
     */
    public void setToUomName(String value) {
        setAttributeInternal(TOUOMNAME, value);
    }

    /**
     * Gets the attribute value for RowID, using the alias name RowID.
     * @return the RowID
     */
    public String getRowID() {
        return (String)getAttributeInternal(ROWID);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("model.masterentity.XxinvUomConversionsEO");
        }
        return mDefinitionObject;
    }
}
