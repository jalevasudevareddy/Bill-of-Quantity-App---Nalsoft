package model.masterentity;

import java.math.BigDecimal;

import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 08 09:52:56 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XxpoAgentsEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        AgentId {
            public Object get(XxpoAgentsEOImpl obj) {
                return obj.getAgentId();
            }

            public void put(XxpoAgentsEOImpl obj, Object value) {
                obj.setAgentId((BigDecimal)value);
            }
        },
        AgentName {
            public Object get(XxpoAgentsEOImpl obj) {
                return obj.getAgentName();
            }

            public void put(XxpoAgentsEOImpl obj, Object value) {
                obj.setAgentName((String)value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(XxpoAgentsEOImpl object);

        public abstract void put(XxpoAgentsEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int AGENTID = AttributesEnum.AgentId.index();
    public static final int AGENTNAME = AttributesEnum.AgentName.index();

    /**
     * This is the default constructor (do not remove).
     */
    public XxpoAgentsEOImpl() {
    }

    /**
     * Gets the attribute value for AgentId, using the alias name AgentId.
     * @return the AgentId
     */
    public BigDecimal getAgentId() {
        return (BigDecimal)getAttributeInternal(AGENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AgentId.
     * @param value value to set the AgentId
     */
    public void setAgentId(BigDecimal value) {
        setAttributeInternal(AGENTID, value);
    }

    /**
     * Gets the attribute value for AgentName, using the alias name AgentName.
     * @return the AgentName
     */
    public String getAgentName() {
        return (String)getAttributeInternal(AGENTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for AgentName.
     * @param value value to set the AgentName
     */
    public void setAgentName(String value) {
        setAttributeInternal(AGENTNAME, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param agentId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal agentId) {
        return new Key(new Object[] { agentId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject =
                    EntityDefImpl.findDefObject("model.masterentity.XxpoAgentsEO");
        }
        return mDefinitionObject;
    }
}
